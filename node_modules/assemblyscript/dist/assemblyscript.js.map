{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/extra/ast.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/vector.ts","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/webpack/startup","webpack://assemblyscript/webpack/runtime/global"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__911__","Long","wasm","WebAssembly","Instance","Module","Uint8Array","e","low","high","unsigned","isLong","obj","prototype","__isLong__","Object","defineProperty","value","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","kind","range","name","TypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","parameterKind","type","initializer","ParameterNode","args","DecoratorNode","fromNode","commentKind","text","CommentNode","isQuoted","IdentifierExpression","elementExpressions","ArrayLiteralExpression","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","elementExpression","ElementAccessExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","typeName","NewExpression","NullExpression","names","values","ObjectLiteralExpression","OmittedExpression","ParenthesizedExpression","property","PropertyAccessExpression","pattern","patternFlags","RegexpLiteralExpression","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","decorators","flags","typeParameters","implementsTypes","members","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","ExportDefaultStatement","externalName","ExportImportStatement","localName","exportedName","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","declarations","ImportStatement","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","variable","iterable","ForOfStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureNode","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","literalKind","LITERAL","changetype","FLOAT","INTEGER","STRING","NULL","TRUE","FALSE","node","CALL","PROPERTYACCESS","isAccessOn","THIS","SUPER","TypeNode","super","typeParameterNodes","NAMEDTYPE","namedTypeNode","next","typeArgumentNodes","k","hasGenericComponent","identifier","FUNCTIONTYPE","functionTypeNode","parameterNodes","assert","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","CommonFlags","NONE","flag","nameNode","IDENTIFIER","nameStr","charCodeAt","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","decoratorKind","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","numTypeArguments","Range","join","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","OMITTED","PARENTHESIZED","REGEXP","TERNARY","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","sourceKind","normalizedPath","SOURCE","Array","debugInfoIndex","exportPaths","lineCache","lineColumn","internalPath","mangleInternalPath","pos","lastIndexOf","PATH_DELIMITER","simplePath","source","LIBRARY_SUBST","LIBRARY","LIBRARY_ENTRY","off","end","push","l","r","m","s","unchecked","DeclarationStatement","INDEXSIGNATURE","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","indexSignature","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","normalizePath","startsWith","resolvePath","LIBRARY_PREFIX","EXPORTDEFAULT","EXPRESSION","parameterIndex","FIELDDECLARATION","FOR","FOROF","ArrowKind","FUNCTIONDECLARATION","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","len","cur","isTrivialAlphanum","decorator","BuiltinNames","start","started","argumentsLength","setArgumentsLength","abort","trace","seed","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","clz","ctz","popcnt","rotl","rotr","abs","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","call_indirect","instantiate","idof","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_add","i64_add","f32_add","f64_add","i32_sub","i64_sub","f32_sub","f64_sub","i32_mul","i64_mul","f32_mul","f64_mul","i32_div_s","i32_div_u","i64_div_s","i64_div_u","f32_div","f64_div","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_ceil","v128_floor","v128_trunc","v128_nearest","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16","i16x8","i32x4","i64x2","f32x4","f64x2","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_ceil","f32x4_floor","f32x4_trunc","f32x4_nearest","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_ceil","f64x2_floor","f64x2_trunc","f64x2_nearest","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","heap_base","rtti_base","visit_globals","visit_members","isFinite","ERROR","WARNING","INFO","Function","memory_size","memory_grow","memory_copy","memory_fill","memory_data","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Int64Array","Uint64Array","Float32Array","Float64Array","wasiAbort","wasiTrace","wasiSeed","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","arg0","compileExpression","operands","Type","currentType","isValue","unary","UnaryOp","ClzI32","options","isWasm64","ClzI64","error","DiagnosticCode","Operation_0_cannot_be_applied_to_type_1","reportNode","typeArgumentsRange","builtin_ctz","CtzI32","CtzI64","builtin_popcnt","PopcntI32","PopcntI64","builtin_rotl","arg1","flow","currentFlow","temp1","getTempLocal","findUsedLocals","setLocalFlag","index","LocalFlags","WRAPPED","temp2","ret","binary","BinaryOp","OrI32","ShlI32","local_tee","AndI32","ShrU32","local_get","NativeType","I32","SubI32","freeTempLocal","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","auto","XorI32","AddI32","ShrI32","usizeType","XorI64","AddI64","ShrI64","nativeSizeType","I64","AbsF32","AbsF64","builtin_max","isNumericLiteral","op","GtI32","GtU32","GtI64","GtU64","MaxF32","MaxF64","nativeType","toNativeType","builtin_min","LtI32","LtU32","LtI64","LtU64","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","isIntegerValue","numOperands","immOffset","immAlign","byteSize","evaluateImmediateOffset","evaluateImmediateAlign","isSignedIntegerValue","builtin_store","void","contextIsExact","inType","convertExpression","builtin_add","isNumericValue","makeAdd","builtin_sub","makeSub","builtin_mul","makeMul","builtin_div","makeDiv","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","AtomicRMWOp","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","arg2","builtin_atomic_wait","builtin_diagnostic","category","checkTypeAbsent","emitDiagnostic","User_defined_0","DiagnosticCategory","nop","builtin_conversion","builtin_i8x16","expr","precomp","runExpression","ExpressionRunnerFlags","PreserveSideeffects","writeI8","getConstValueI32","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","idx","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","SIMDExtractOp","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","SIMDReplaceOp","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","isPowerOf2","mask","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","SIMDLoadOp","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_ceil","CeilF32x4","CeilF64x2","builtin_v128_floor","FloorF32x4","FloorF64x2","builtin_v128_trunc","TruncF32x4","TruncF64x2","builtin_v128_nearest","NearestF32x4","NearestF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","SIMDShiftOp","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","builtin_v128_qfma","simd_ternary","SIMDTernaryOp","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","ensureVisitMembersOf","instance","visitRef","program","nativeSizeSize","visitInstance","base","call","internalName","None","hasVisitImpl","isDeclaredInLibrary","visitPrototype","lookupInSelf","ElementKind","FUNCTION_PROTOTYPE","resolver","resolveFunction","compileFunction","visitSignature","visitThisType","thisType","parameterTypes","isStrictlyAssignableTo","needsTempValue","_values","Map_values","j","member","FIELD","parent","fieldOffset","memoryOffset","if","addFunction","createType","flatten","typeToRuntimeFlags","alignLog2","is","evaluateConstantType","Expected_0_type_arguments_but_got_1","Expected_0_arguments_but_got_1","argumentsRange","usize64","getConstValueI64High","getConstValueI64Low","usize32","naturalAlign","align","_0_must_be_a_power_of_two","feature","hasFeature","Feature_0_is_not_enabled","featureToString","setCurrentTypeOnError","Type_0_is_not_generic","expected","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","i64_is_i32","i64_low","i64_is_u32","i64_high","thisOperand","builtins","Map","function_builtins","set","isFloatValue","isBooleanValue","classReference","getClass","isAssignableTo","stringInstance","extends","arrayPrototype","isNullableReference","element","lookupExpression","ReportMode","SWALLOW","getExpressionId","ExpressionId","Const","signatureReference","Type_0_has_no_call_signatures","i64_new","getClassOrWrapper","firstOperand","isLiteralKind","String_literal_expected","fieldName","classMembers","has","get","Type_0_has_no_property_1","nextMemoryOffset","resultType","isInternalReference","getSignature","ensureStaticString","id","hasDecorator","DecoratorFlags","maybeDropCondition","LocalGet","NeF32","getLocalGetIndex","F32","temp","NeF64","F64","EqF32","SubF32","EqF64","SubF64","isAny","makeIsTrueish","compileCallDirect","offset","elementType","valuesOperand","Array_literal_expected","numElements","exprs","isStatic","makeZero","buf","writeStaticBuffer","byteLength","addAlignedMemorySegment","fromType","isChangeableTo","Type_0_cannot_be_changed_to_type_1","nonNullableType","noAssert","evaled","Default","getExpressionType","getConstValueF32","getConstValueF64","makeAbort","EqzI32","EqzI64","ref_is_null","alreadyUnchecked","unset","indexArg","operandExprs","nativeParamTypes","classInstance","This_expression_is_not_constructable","ctor","ensureConstructor","checkFieldInitialization","compileInstantiate","functionPrototype","ftype","requiredParameters","shift","thisArg","_this_cannot_be_referenced_in_current_location","compileCallIndirect","isizeType","writeI16","writeI32","writeF32","writeF64","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","elementsByName","global","COMPILED","INLINED","constantIntegerValue","global_get","block","managedClasses","nextId","_keys","Map_keys","instanceId","return","current","switch","SubI64","count","data","abvInstance","arrayBufferViewInstance","abvPrototype","setPrototype","mapPrototype","staticArrayPrototype","lastId","isAcyclic","getArrayValueType","getTypeArgumentsTo","rttiFlags","segment","addGlobal","instanceofInstance","stmts","instances","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","INDEX_SUFFIX","STUB_DELIMITER","CommonNames","funcref","externref","exnref","anyref","u8x16","u16x8","u32x4","u64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","ASC_FEATURE_GC","ASC_FEATURE_MEMORY64","I8","I16","Isize","U8","U16","U32","U64","Usize","Bool","V128","Funcref","Externref","Exnref","Anyref","String","StaticArray","Set","ArrayBufferView","ArrayBuffer","Mathf","NativeMath","NativeMathf","ipow32","ipow64","alloc","realloc","free","new_","renew","retain","release","collect","typeinfo","instanceof_","visit","newBuffer","newArray","Feature","Target","Typeinfo","TypeinfoFlags","ExportNames","mangleImportName_moduleName","mangleImportName_elementName","target","WASM32","exportMemory","importMemory","initialMemory","maximumMemory","sharedMemory","importTable","exportTable","sourceMap","explicitStart","memoryBase","tableBase","globalAliases","features","noUnsafe","pedantic","lowMemoryLimit","optimizeLevelHint","shrinkLevelHint","WASM64","isize64","isize32","Constraints","RuntimeFeatures","memory","table","Compiler","DiagnosticEmitter","diagnostics","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","skippedAutoreleases","inlineStack","lazyFunctions","pendingClassInstanceOf","virtualCalls","pendingElements","doneModuleExports","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","i32PowInstance","i64PowInstance","create","setLowMemoryUnused","featureFlags","FeatureFlags","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","GC","Memory64","setFeatures","startFunctionInstance","makeNativeFunction","Signature","currentBody","compile","initialize","actualFunction","startFunctionBody","files","filesByName","file","USER_ENTRY","compileFile","compileExports","cyclicClasses","findCyclicClasses","Set_values","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","identifierNode","registerConstantInteger","functionsToCompile","clear","compileClassInstanceOf","startIsEmpty","isWasi","unshift","global_set","funcRef","nativeParams","nativeResults","typesToNativeTypes","additionalLocals","finalize","addFunctionExport","setStart","VIRTUAL","INSTANCE","ensureVirtualStub","finalizeVirtualStub","ensureVarargsStub","delete","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","UNLIMITED_MEMORY","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","functionTableNames","setFunctionTable","UNLIMITED_TABLE","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","elementName","ensureModuleExport","exportsStar","prefix","functionInstances","instanceName","GENERIC","fullName","warning","Exported_generic_function_or_class_has_no_concrete_instances","CLASS_PROTOTYPE","classPrototype","classInstances","PROPERTY_PROTOTYPE","propertyInstance","CONST","STATIC","READONLY","addGlobalExport","Cannot_export_a_mutable_global","ENUMVALUE","enumValue","isImmutable","functionInstance","ensureArgumentsLength","PROPERTY","getterInstance","setterInstance","fieldInstance","internalGetterName","internalSetterName","isUnmanaged","ENUM","INTERFACE_PROTOTYPE","NAMESPACE","TYPEDEFINITION","subPrefix","implicitExport","SCOPED","memberName","PRIVATE","compileMembers","compileGlobal","compileEnum","resolveClass","compileClass","resolveProperty","compileProperty","compileElement","exportStar","normalizedPathWithoutExtension","pathWithIndex","File_0_not_found","startFunction","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","locals","localsByIndex","numLocals","varTypes","ERRORED","initExpr","typeNode","initializerNode","RESOLVED","resolvedType","resolveType","Type_expected","setType","checkTypeSupported","atEnd","Type_0_is_not_assignable_to_type_1","AMBIENT","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","initializeInStart","GlobalGet","fromName","getGlobalGetName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","constantValueKind","constantFloatValue","compileInlineConstant","Decorator_0_is_not_valid_here","findDecorator","decoratorNodes","makeRetain","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","setConstantIntegerValue","MODULE_EXPORT","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","RETAINED","local_set","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","ABSTRACT","INTERFACE","Function_implementation_is_missing_or_not_immediately_following_the_declaration","thisLocal","lookupLocal","compileStatements","GET","SET","compileReturnedExpression","indexBefore","canOverflow","nonNull","isNonnull","NONNULL","allocStmts","makeAllocation","makeFieldInitializationInConstructor","firstStmt","LocalSet","getLocalSetIndex","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","isAnyLocalFlag","ANY_RETAINED","unsetLocalFlag","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","staticMembers","instanceMembers","compileField","compileFieldGetter","compileFieldSetter","getterRef","nativeThisType","nativeValueType","valueExpr","setterRef","NeI64","NeI32","drop","makeRelease","compilePropertyGetter","compilePropertySetter","buffer","alignment","MemorySegment","computeBlockStart64","stringValue","stringSegment","totalOverhead","segments","createBuffer","addRuntimeMemorySegment","ptr","writeI64","arrayBufferInstance","OBJECTInstance","writeField","bufferSegment","arrayInstance","bufferLength","readI32","arrayLength","bufferAddress","STUB","memorySegment","rtInstance","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","Nop","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","Not_implemented_0","addDebugLocation","isBody","numStatements","Block","getBlockName","getBlockChildCount","getBlockChildAt","needsExplicitUnreachable","outerFlow","innerFlow","fork","freeScopedLocals","inherit","labelNode","breakLabel","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateCondition","tcond","Flow","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritNonnullIfTrue","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritNonnullIfFalse","inheritMutual","valueExpression","constraints","inlineReturnLabel","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","message","newArgs","dropped","numDeclarations","initializers","initAutoreleaseSkipped","uniqueMap","contextualTypeArguments","dummy","addScopedDummyLocal","freeScopedDummyLocal","isConst","local","Local","parentFunction","setConstantFloatValue","scopedLocals","existing","errorRelated","Duplicate_identifier_0","_const_declarations_must_be_initialized","LET","existingLocal","getScopedLocal","isNative","addScopedLocal","CONSTANT","addLocal","isShortIntegerValue","CONDITIONALLY_RETAINED","doCompileWhileStatement","computeSmallIntegerShift","computeSmallIntegerMask","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","ensureSmallIntegerWrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","isExternalReference","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","isLongIntegerValue","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","isVaryingIntegerValue","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","PREFIX","AS","exceptVoid","info","Expression_is_never_null","leftExpr","leftType","rightExpr","rightType","commonType","compound","Token","LESSTHAN","overload","lookupOverload","OperatorKind","LT","compileBinaryOverload","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","makeLt","GREATERTHAN","GT","makeGt","LESSTHAN_EQUALS","LE","makeLe","GREATERTHAN_EQUALS","GE","makeGe","EQUALS_EQUALS_EQUALS","EQUALS_EQUALS","EQ","operatorTokenToString","makeEq","EXCLAMATION_EQUALS_EQUALS","EXCLAMATION_EQUALS","NE","makeNe","EQUALS","compileAssignment","PLUS_EQUALS","PLUS","ADD","The_0_operator_cannot_be_applied_to_type_1","MINUS_EQUALS","MINUS","SUB","ASTERISK_EQUALS","ASTERISK","MUL","ASTERISK_ASTERISK_EQUALS","ASTERISK_ASTERISK","POW","makePow","SLASH_EQUALS","SLASH","DIV","PERCENT_EQUALS","PERCENT","REM","makeRem","LESSTHAN_LESSTHAN_EQUALS","LESSTHAN_LESSTHAN","intType","BITWISE_SHL","makeShl","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN","BITWISE_SHR","makeShr","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","BITWISE_SHR_U","makeShru","AMPERSAND_EQUALS","AMPERSAND","BITWISE_AND","makeAnd","BAR_EQUALS","BAR","BITWISE_OR","makeOr","CARET_EQUALS","CARET","BITWISE_XOR","makeXor","AMPERSAND_AMPERSAND","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","cloneExpression","BAR_BAR","retainLeftInThen","targetType","getTypeOfElement","makeAssignment","currentThisExpression","currentElementExpression","LtF32","LtF64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","AddF32","AddF64","MulI32","MulI64","MulF32","MulF64","lookup","Cannot_find_name_0","makeCallDirect","namespace","namespaceMembers","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI64","ShrU64","AndI64","OrI64","operatorInstance","thisExpression","LOCAL","Variable_0_used_before_its_declaration","checkUnsafe","propertyPrototype","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","INDEXED_SET","INDEXED_GET","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","Indexed_access_may_involve_bounds_checking","indexExpression","tee","isLocalFlag","makeLocalAssignment","isConstructor","setThisFieldFlag","FieldFlags","INITIALIZED","fieldParent","makeFieldAssignment","makeAutorelease","thisExpr","nativeReturnType","tempThis","elementExpr","tempTarget","tempElement","localIndex","alreadyRetained","makeReplace","field","fieldType","nativeFieldType","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","baseCtorInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","compileCallExpressionBuiltin","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","Expression_cannot_be_represented_by_a_type","resolveTypeArguments","callee","BuiltinContext","fn","methodName","hasThis","The_this_types_of_each_signature_are_incompatible","hasRest","minimum","maximum","relatedReportNode","isLibrary","Operation_is_unsafe","argumentExpressions","checkCallSignature","isAccessOnThis","isAccessOnSuper","includes","makeCallInline","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","numParameters","createInline","usedLocals","paramExpr","paramType","argumentLocal","getParameterName","addScopedAlias","initType","checkFieldInitializationInFlow","original","stub","varargsStub","originalSignature","originalParameterTypes","originalParameterDeclarations","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","numNames","ofN","Optional_parameter_must_have_an_initializer","theCall","virtualStub","ref","overloadPrototypes","overloads","tempIndex","builder","SwitchBuilder","unboundOverloadPrototype","isBound","unboundOverloadParent","isProperty","propertyParent","overloadInstance","boundProperty","boundPropertyInstance","boundPrototype","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","n","needsVarargsStub","calledName","addCase","extendees","getAllExtendees","a","b","extendee","removeFunction","render","retainInstance","releaseInstance","newExpr","newType","oldExpr","oldType","getAutoreleaseLocal","isLocalTee","lengthBefore","maybeFinishAutorelease","skipAutorelease","Function_0_is_virtual_and_will_not_be_inlined","theOperands","slice","allOptionalsAreConstant","compilesToConst","resolved","lastOperand","getSideEffects","SideEffects","WritesGlobal","lastOperandType","makeCallIndirect","numExpressions","targetExpression","resolveExpression","indexedGet","contextualSignature","clone","FunctionPrototype","nextAnonymousId","signatureNode","numPresentParameters","parameterNode","isTypeOmitted","thisTypeNode","ensureRuntimeFunction","asNullable","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","_super_can_only_be_referenced_in_a_derived_class","maybeCompileEnclosingSource","lookupIdentifierExpression","localType","globalType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","resolveTypeName","makeInstanceofClass","expectedType","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","intValue","determineIntegerLiteralType","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","contextualClass","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","arraySegment","addStaticArrayHeader","arrayAddress","newArrayInstance","nativeArrayType","dataStartMember","bufferSize","newBufferInstance","classType","Cannot_create_an_instance_of_an_abstract_class","ctorPrototype","constructorPrototype","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","nativeClassType","omittedFields","memberKey","Property_0_does_not_exist_on_type_1","Property_0_is_private_and_only_accessible_within_class_1","PROTECTED","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","resolveClassInclTypeArguments","constructorInstance","baseClass","baseCtor","makeNativeFunctionDeclaration","setResolvedInstance","allocExpr","relatedNode","didCheckFieldInitialization","isThisFieldFlag","DEFINITELY_ASSIGNED","Property_0_is_always_assigned_before_being_used","Unnecessary_definite_assignment","Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned","ctorInstance","ctxType","parentEnum","Property_0_is_used_before_being_assigned","Object_is_possibly_null","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","Unreachable","PLUS_PLUS","POSTFIX_INC","getLocalSetValue","compileUnaryOverload","makeOne","MINUS_MINUS","POSTFIX_DEC","setValue","NegF32","NegF64","PREFIX_INC","PREFIX_DEC","EXCLAMATION","NOT","TILDE","BITWISE_NOT","makeNegOne","TYPEOF","compileTypeof","typeString","REPORT","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","debugInfoRef","debugLocations","supported","parameterReportNode","v128_zero","ref_null","allocInstance","newInstance","thisLocalIndex","fieldPrototype","codeLocation","abortInstance","messageArg","makeStaticAbort","messageExpr","filenameExpr","lineAt","columnAt","mangleInternalName","arg","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","sb","indentLevel","build","indent","typeToString","originalName","walk","TSDBuilder","remainingMembers","isInterface","extendsNode","code","diagnosticCategoryToString","PEDANTIC","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","relatedRange","replace","thisRange","otherRange","thisRelatedRange","otherRelatedRange","formatDiagnosticContext","useColors","isLineBreak","showContext","relatedSource","withRange","seenInSource","seenMessagesAtPos","ASTBuilder","visitNode","finish","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitIndexSignature","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","elements","visitArguments","numArgs","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","singleQuoted","quote","last","lastCharPos","isDefault","serializeExternalModifiers","numImplementsTypes","numMembers","numValues","serializeAccessModifiers","numTypeParameters","firstDeclaration","REST","OPTIONAL","DECLARE","PUBLIC","FlowFlags","ConditionKind","localFlags","thisFieldFlags","inlineFunction","initThisFieldFlags","nextInlineId","resetBreakContext","branch","except","temps","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempFuncrefs","tempExternrefs","tempExnrefs","tempAnyrefs","nextAutoreleaseId","resetTemporaryName","scopedLocal","setTemporaryName","scopedDummy","scopedAlias","scope","localsByName","defaultIfInlined","actualParent","actualClass","fieldFlags","nextBreakId","stack","breakStack","otherFlags","conditionKind","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","leftFieldFlags","newFieldFlags","rightFieldFlags","key","before","after","iff","If","getIfFalse","getIfCondition","getIfTrue","Unary","getUnaryOp","getUnaryValue","Binary","getBinaryOp","getBinaryLeft","getBinaryRight","Call","getCallTarget","getCallOperandAt","exprType","canConversionOverflow","Load","signed","isLoadSigned","getLoadBytes","Select","getSelectThen","getSelectElse","instancesByName","levels","findUsedLocalsVisit","used","traverse","formatDiagnosticMessage","Options","alias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","FEATURE_GC","FEATURE_MEMORY64","optimizeLevel","shrinkLevel","Program","diagnosticsOffset","getSource","isEntry","parser","parseFile","nextFile","getDependee","util","Auto","hasTemporaryFunction","cachedStrings","lit","binaryen","_malloc","_BinaryenSizeofLiteral","_BinaryenModuleCreate","cArr","allocU8Array","_BinaryenModuleRead","_free","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","_BinaryenUnary","_BinaryenBinary","_BinaryenMemorySize","_BinaryenMemoryGrow","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","cStr","allocStringCached","_BinaryenGlobalGet","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","replacement","_BinaryenAtomicCmpxchg","timeout","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","allocPtrArray","_BinaryenBlock","single","Return","Throw","singleType","_BinaryenBreak","_BinaryenDrop","ReadsLocal","ReadsGlobal","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","_BinaryenUnreachable","dest","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPop","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","vec","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","_BinaryenSIMDShuffle","c","_BinaryenSIMDTernary","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","exportName","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetFastMath","_BinaryenSetFastMath","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenGetAllowInliningFunctionsWithLoops","enabled","_BinaryenSetAllowInliningFunctionsWithLoops","_BinaryenModuleGetFeatures","_BinaryenModuleSetFeatures","pass","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","passes","cStrs","debugInfo","usesARC","setOptimizeLevel","setShrinkLevel","setDebugInfo","setFastMath","clearPassArguments","setAlwaysInlineMaxSize","setFlexibleInlineMaxSize","setOneCallerInlineMaxSize","setAllowInliningFunctionsWithLoops","getLowMemoryUnused","runPasses","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","__i32_load8_u","readBuffer","watFormat","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenLocalGetGetIndex","globalName","_BinaryenGlobalGetGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenExpressionCopy","maxLoopIterations","runner","_ExpressionRunnerCreate","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChildAt","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperandAt","_BinaryenMemoryGrowGetDelta","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","All","_BinaryenExpressionGetSideEffects","u8s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","arr","ch","fromCharCodes","labelPostfix","labels","defaultLabel","lastCase","output","Break","numChildren","Loop","Switch","_BinaryenSwitchGetCondition","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperandAt","GlobalSet","_BinaryenGlobalSetGetValue","Store","Drop","MemorySize","MemoryGrow","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperandAt","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperandAt","TupleExtract","Dependee","Parser","sources","backlog","seenlog","donelog","onComment","currentSource","dependees","tryParseSignatureIsSignature","parseParametersThis","dependee","Source","USER","tn","Tokenizer","skip","ENDOFFILE","parseTopLevelStatement","skipStatement","startPos","AT","tokenPos","parseDecorator","exportStart","exportEnd","defaultStart","defaultEnd","DEFAULT","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","nextTokenPos","parseEnum","parseVariable","VAR","parseFunction","state","mark","abstractStart","abstractEnd","nextTokenOnNewLine","reset","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","IdentifierHandling","PREFER","parseNamespace","parseExportImport","parseImport","TYPE","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","DOT","Identifier_expected","acceptParenthesized","suppressErrors","token","OPENPAREN","isNullableSignature","tryParseFunctionType","CLOSEPAREN","_0_expected","Unexpected_token","innerType","parseType","createNamedType","STRINGLITERAL","parseTypeName","parameter","notNullStart","notNull","OPENBRACKET","bracketStart","CLOSEBRACKET","bracketRange","nullable","isSignature","firstParamNameNoType","firstParamKind","paramStart","DOT_DOT_DOT","COLON","QUESTION","A_rest_parameter_cannot_be_optional","param","createParameter","createOmittedType","EQUALS_GREATERTHAN","createFunctionType","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","SEMICOLON","parentFlags","parentDecorators","isIllegalVariableIdentifier","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","createVariableDeclaration","OPENBRACE","CLOSEBRACE","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","nextToken","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","EXTENDS","createTypeParameter","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createFunctionDeclaration","createEmptyIdentifierExpression","parseFunctionExpressionCommon","explicitThis","bodyExpression","createExpressionStatement","createFunctionExpression","IMPLEMENTS","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","isGetter","getStart","getEnd","setEnd","isGetterOrSetter","createConstructorExpression","retIndex","parseIndexSignature","ALWAYS","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignature","createNamespaceDeclaration","parseExportMember","FROM","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createWildcardImportStatement","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","OF","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","ELSE","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","CASE","createSwitchCase","_case_or_default_expected","createThrowStatement","CATCH","FINALLY","createTryStatement","createTypeDeclaration","createVoidStatement","createWhileStatement","YIELD","DELETE","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createOmittedExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","INTEGERLITERAL","createIntegerLiteralExpression","readInteger","FLOATLITERAL","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Unexpected_end_of_text","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","potentiallyGeneric","createCallExpression","skipBlock","depth","IN","Precedence","AL_MASK","AL_SIZE","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","fromDecorator","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","INVALID","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","nextClassId","nextSignatureId","initialized","elementsByDeclaration","wrapperClasses","uniqueSignatures","_arrayBufferViewInstance","_arrayBufferInstance","_arrayPrototype","_staticArrayPrototype","_setPrototype","_mapPrototype","_functionPrototype","_int8ArrayPrototype","_int16ArrayPrototype","_int32ArrayPrototype","_int64ArrayPrototype","_uint8ArrayPrototype","_uint8ClampedArrayPrototype","_uint16ArrayPrototype","_uint32ArrayPrototype","_uint64ArrayPrototype","_float32ArrayPrototype","_float64ArrayPrototype","_stringInstance","_allocInstance","_reallocInstance","_freeInstance","_newInstance","_renewInstance","_retainInstance","_releaseInstance","_collectInstance","_visitInstance","_typeinfoInstance","_instanceofInstance","_newBufferInstance","_newArrayInstance","_BLOCKInstance","_OBJECTInstance","nativeDummySignature","nativeSource","Resolver","nativeFile","File","cached","requireClass","requireFunction","BLOCKInstance","blockOverhead","objectOverhead","currentOffset","payloadSize","blockSize","computeBlockStart","blockMinsize","decoratorFlags","registerNativeType","TypeDefinition","makeNativeTypeDeclaration","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","starExports","foreignFile","lookupForeignFile","ensureExportStar","madeProgress","queuedImport","lookupForeign","splice","asAliasNamespace","Module_0_has_no_exported_member_1","exportNames","queuedExport","ensureExport","globalElement","isDeclaredElement","registerWrapperClass","thisPrototype","baseElement","basePrototype","Class_0_is_final_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","firstChar","markModuleExports","thisInstanceMembers","baseInstanceMembers","thisMember","baseMember","thisMethod","baseMethod","visibilityEquals","Overload_signatures_must_all_be_public_private_or_protected","baseMethodInstances","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","nextPrototype","markModuleExport","className","classElement","wrappedType","isIntegerInclReference","Global","makeNativeVariableDeclaration","merged","tryMerge","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","Duplicate_decorator","ClassPrototype","checkDecorators","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","FieldPrototype","addInstance","checkOperatorOverloads","firstArg","_0_is_not_a_valid_operator","Duplicate_function_implementation","operatorKind","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","InterfacePrototype","initializeFieldAsProperty","Namespace","copyMembers","cyclics","Element","shadowType","FILE","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isPublic","vis","declaredElements","DeclaredElement","selfProperty","selfGetter","selfSetter","AcyclicState","typedElements","TypedElement","aliasNamespaces","ensureGlobal","makeNativeNamespaceDeclaration","ns","copyExportsToNamespace","inSelf","ConstantValueKind","VariableLikeElement","i64_zero","boundPrototypes","bound","instanceKey","nameInclTypeParameters","parameterType","parameterName","createParent","registerConcreteElement","getDefaultParameterName","postfix","setDebugLocation","FIELD_PROTOTYPE","toBound","_isInterface","basePtototype","Class","interfaces","_id","_acyclic","implementers","isBuiltinArray","lengthField","inheritedTypeArguments","baseName","baseType","iface","uncheckedOverload","overhead","computeBlockSize","baseOffset","typeKind","i64_is","writeI32AsI64","writeI64AsI32","extendedPrototype","float32ArrayPrototype","float64ArrayPrototype","int8ArrayPrototype","int16ArrayPrototype","int32ArrayPrototype","int64ArrayPrototype","uint8ArrayPrototype","uint8ClampedArrayPrototype","uint16ArrayPrototype","uint32ArrayPrototype","uint64ArrayPrototype","acyclic","hasCycle","cyclesTo","exceptIfMember","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","srcMembers","destMembers","asGlobal","cachedDefaultParameterNames","resolveClassPending","ctxElement","ctxTypes","reportMode","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_cannot_be_nullable","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","parameterTypeNode","returnTypeNode","typeArgument","prev","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","typeParameterNames","argumentNodes","argumentExpression","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","ensureResolvedLazyGlobal","isTypedElement","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","targetNode","propertyName","variableLikeElement","wrapper","baseInstance","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_bool","Type_0_is_illegal_in_this_context","superLocal","fltType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","varType","varElement","thenType","elseType","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","nameInclTypeParamters","Interface","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","addInterface","finishResolveClass","unimplemented","ifaceMembers","isCompatibleOverride","This_overload_signature_is_not_compatible_with_its_implementation_signature","identifierAndSignatureRange","baseMembers","instanceMemberPrototypes","properties","fieldTypeNode","baseField","Field","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","overloadKind","overloadPrototype","IndexSignature","pending","dependsOnInstance","_values2","Property","tokenFromKeyword","ASYNC","AWAIT","DEBUGGER","IS","KEYOF","MODULE","PACKAGE","WITH","tokenIsAlsoIdentifier","identifierHandling","unsafeNext","maxTokenLength","chr","isDecimalDigit","commentStartPos","LINE","TRIPLE","closed","testInteger","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","reusableState","State","Unterminated_string_literal","readEscapeSequence","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","sepEnd","i64_4","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","sepCount","readDecimalFloatPartial","replaceAll","parseFloat","allowLeadingZeroSep","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","TypeKind","TypeFlags","_nonNullableType","_nullableType","nullableType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isVectorValue","signednessIsImportant","validWat","nullablePostfix","numTypes","signatureTypes","numParameterTypes","nativeTypes","thisThisType","otherThisType","thisParameterTypes","otherParameterTypes","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cloneParameterTypes","readI64","i32_as_f32","f32_as_i32","i64_as_f64","valueI64","f64_as_i64","overrides","cloned","v","x","separator","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","midVal","unmanaged","g","toText","wrapModule","emitStackIR","emitText","toAsmjs","emitAsmjs","keys","i64_one","i64_neg_one","i64_pow","rightLo","rightHi","i64_div","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shr","i64_not","i64_eq","i64_ne","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","minSafeF64","maxSafeF64","i64_is_f64","fround","globalScope","window","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","Infinity","NaN","clz32","round","y","sign","isTrueish","CHUNKSIZE","apply","parts","fromCodePoint","search","replacment","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","arguments","console","byteOffset","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","globalThis"],"mappings":"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A,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,8HACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,0HACA,wGACA,oIACA,wFACA,4KACA,sHACA,gFACA,oKACA,gLACA,4FACA,0MACA,wKACA,0FACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,0GACA,kKACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,sNACA,8FACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,0HACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA9KF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAkL1B,kCAAuC0pD,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,sDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,iCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAA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CA,YACA,YAEA,YACA,eACS,EAAAq9C,OAGT,a,+5CChRA,eACA,SAoBA,IAAiB11D,EAeL2uB,EAiBApR,EAmLA9d,EAihEAm9C,GApuEZ,SAAiB58C,GACF,EAAA2Y,KAAmB,EACnB,EAAAwqC,YAA0B,EAC1B,EAAAljD,IAAkB,EAClB,EAAAkB,IAAkB,EAClB,EAAA8d,IAAkB,EAClB,EAAAG,IAAkB,EAClB,EAAAiK,KAAmB,EACnB,EAAAC,QAAsB,EACtB,EAAAC,UAAwB,EACxB,EAAAC,OAAqB,EACrB,EAAAC,OAAqB,GACrB,EAAAksC,MAAoB,EAZnC,CAAiB31D,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAe3B,SAAY2uB,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,iCACA,kBACA,8BACA,oBAdF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAiBxB,SAAYpR,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,gCACA,gCACA,kBACA,kCACA,8BACA,sCACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BAEA,gCACA,4BACA,gCACA,gCACA,kBACA,0BACA,8BACA,0BACA,sBACA,kBACA,sBACA,0BACA,0BACA,8BACA,oCAnDF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAsDxB,SAAY5f,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BAEA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,qDACA,qDACA,qDACA,qDACA,mDACA,mDACA,mDACA,mDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDA1HF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA6HnB,SAAY8B,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BAMA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BAKA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,iDACA,iDACA,iDACA,iDACA,qCA5LF,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KA+LpB,SAAYwG,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAY4C,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAWzB,SAAYW,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KASzB,SAAYqM,GACV,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,4BACA,4BAZF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAevB,SAAY+B,GACV,6BACA,6BACA,6BACA,6BACA,6BALF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAQzB,SAAYhN,GACV,uCACA,uCACA,uCACA,uCACA,qCACA,qCACA,uCACA,uCACA,uCACA,uCAVF,CAAY,EAAAA,aAAA,EAAAA,WAAU,KAatB,SAAYhD,GACV,yBACA,iDACA,qCAHF,CAAY,EAAAA,wBAAA,EAAAA,sBAAqB,KAMjC,sBACE,YAESo2B,EAEApe,GAFA,KAAAoe,SAEA,KAAApe,WAIX,MAAat+C,EACX,YAESm4E,GAAA,KAAAA,MA6mBD,KAAAmc,sBAA6B,EA6kB7B,KAAAC,cAAmC,IAAIv5C,IAxrC7Ct7C,KAAK80F,IAAMC,EAASC,QAAQD,EAASE,0BAKvC,gBACE,OAAO,IAAI30F,EAAOy0F,EAASG,yBAG7B,kBAAkBl4B,GAChB,IAAIm4B,EAAOC,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AAgB,OAAOw9D,EAAMowD,KACjC,MAEF,KAAK,IACH,GAAY,SAAR5tH,EAAiB,OAAOw9D,EAAMizC,MAItC,OAAOjzC,EAAMs3C,QAGf,SAAgB+Y,EAAsBtoB,GACpC,OAAQA,GACN,KAAK/nC,EAAM1P,SACX,KAAK0P,EAAMV,GACX,KAAKU,EAAM5xD,YACX,KAAK4xD,EAAM2jB,QACX,KAAK3jB,EAAMkzC,OACX,KAAKlzC,EAAM6vC,KACX,KAAK7vC,EAAM7tD,IACX,KAAK6tD,EAAMpP,IACX,KAAKoP,EAAMzxD,WACX,KAAKyxD,EAAMgwD,GACX,KAAKhwD,EAAMiwD,MACX,KAAKjwD,EAAMkwD,OACX,KAAKlwD,EAAM9U,UACX,KAAK8U,EAAM91D,KACX,KAAK81D,EAAM/V,SACX,KAAK+V,EAAMnP,IACX,KAAKmP,EAAMgnC,KACX,KAAKhnC,EAAM3sD,KAAM,OAAO,EACxB,QAAS,OAAO,IAlSpB,SAAY2sD,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAY2mC,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAgIA,0BAwBA,uCAA4CzlG,GAE1C,OADAsK,OAAOtK,EAAKrI,QACJqI,EAAKkL,WAAW,IACtB,KAAK,IAAY,MAAe,UAARlL,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsC6mG,GACpC,OAAQA,GACN,KAAK/nC,EAAMkzC,OAAQ,MAAO,SAC1B,KAAKlzC,EAAMs2C,GAAI,MAAO,KACtB,KAAKt2C,EAAMzxD,WAAY,MAAO,aAC9B,KAAKyxD,EAAMxxD,IAAK,MAAO,MACvB,KAAKwxD,EAAMsZ,OAAQ,MAAO,SAC1B,KAAKtZ,EAAM3sD,KAAM,MAAO,OACxB,KAAK2sD,EAAMizC,MAAO,MAAO,QACzB,KAAKjzC,EAAMupC,YAAa,MAAO,MAC/B,KAAKvpC,EAAM7xD,MAAO,MAAO,IACzB,KAAK6xD,EAAMC,SAAU,MAAO,IAC5B,KAAKD,EAAMU,YAAa,MAAO,IAC/B,KAAKV,EAAMa,gBAAiB,MAAO,KACnC,KAAKb,EAAMgB,mBAAoB,MAAO,KACtC,KAAKhB,EAAMoB,cAAe,MAAO,KACjC,KAAKpB,EAAMyB,mBAAoB,MAAO,KACtC,KAAKzB,EAAMmB,qBAAsB,MAAO,MACxC,KAAKnB,EAAMwB,0BAA2B,MAAO,MAC7C,KAAKxB,EAAM+B,KAAM,MAAO,IACxB,KAAK/B,EAAMmC,MAAO,MAAO,IACzB,KAAKnC,EAAMyC,kBAAmB,MAAO,KACrC,KAAKzC,EAAMsC,SAAU,MAAO,IAC5B,KAAKtC,EAAM6C,MAAO,MAAO,IACzB,KAAK7C,EAAMgD,QAAS,MAAO,IAC3B,KAAKhD,EAAMqY,UAAW,MAAO,KAC7B,KAAKrY,EAAM0Y,YAAa,MAAO,KAC/B,KAAK1Y,EAAMoD,kBAAmB,MAAO,KACrC,KAAKpD,EAAMyD,wBAAyB,MAAO,KAC3C,KAAKzD,EAAM6D,oCAAqC,MAAO,MACvD,KAAK7D,EAAMiE,UAAW,MAAO,IAC7B,KAAKjE,EAAMqE,IAAK,MAAO,IACvB,KAAKrE,EAAMyE,MAAO,MAAO,IACzB,KAAKzE,EAAMiZ,YAAa,MAAO,IAC/B,KAAKjZ,EAAMmZ,MAAO,MAAO,IACzB,KAAKnZ,EAAM4E,oBAAqB,MAAO,KACvC,KAAK5E,EAAMqF,QAAS,MAAO,KAC3B,KAAKrF,EAAM4B,OAAQ,MAAO,IAC1B,KAAK5B,EAAM8B,YAAa,MAAO,KAC/B,KAAK9B,EAAMkC,aAAc,MAAO,KAChC,KAAKlC,EAAMqC,gBAAiB,MAAO,KACnC,KAAKrC,EAAMwC,yBAA0B,MAAO,MAC5C,KAAKxC,EAAM4C,aAAc,MAAO,KAChC,KAAK5C,EAAM+C,eAAgB,MAAO,KAClC,KAAK/C,EAAMmD,yBAA0B,MAAO,MAC5C,KAAKnD,EAAMwD,+BAAgC,MAAO,MAClD,KAAKxD,EAAM4D,2CAA4C,MAAO,OAC9D,KAAK5D,EAAMgE,iBAAkB,MAAO,KACpC,KAAKhE,EAAMoE,WAAY,MAAO,KAC9B,KAAKpE,EAAMwE,aAAc,MAAO,KAChC,QAEE,OADAh5D,QAAO,GACA,KAKb,MAAauC,EAOX,YAAY6F,EAAYvD,GAFxB,KAAAwpE,aAAsB,EAGpB5jF,KAAK2d,MAAQA,EACb3d,KAAKoa,IAAMA,EAGb,YAAYggE,EAAUC,GACpB,GAAID,EAAErgE,QAAUsgE,EAAEtgE,OAAQ,MAAM,IAAIlX,MAAM,mBAC1C,IAAImI,EAAQ,IAAI8M,EACdsiE,EAAEz8D,MAAQ08D,EAAE18D,MAAQy8D,EAAEz8D,MAAQ08D,EAAE18D,MAChCy8D,EAAEhgE,IAAMigE,EAAEjgE,IAAMggE,EAAEhgE,IAAMigE,EAAEjgE,KAG5B,OADApP,EAAM+O,OAASqgE,EAAErgE,OACV/O,EAGT,OAAOrF,GACL,OAAO3F,KAAK+Z,QAAUpU,EAAMoU,QAAU/Z,KAAK2d,OAAShY,EAAMgY,OAAS3d,KAAKoa,KAAOzU,EAAMyU,IAGvF,cACE,IAAIpP,EAAQ,IAAI8M,EAAM9X,KAAK2d,MAAO3d,KAAK2d,OAEvC,OADA3S,EAAM+O,OAAS/Z,KAAK+Z,OACb/O,EAGT,YACE,IAAIA,EAAQ,IAAI8M,EAAM9X,KAAKoa,IAAKpa,KAAKoa,KAErC,OADApP,EAAM+O,OAAS/Z,KAAK+Z,OACb/O,EAGT,WACE,OAAOhL,KAAK+Z,OAAOxN,KAAKtJ,UAAUjD,KAAK2d,MAAO3d,KAAKoa,MAvCvD,UA+CA,MAAam0F,UAAkB,EAAAniD,kBAgB7B,YAAYryC,EAAgBsyC,EAA0C,MACpE13C,MAAM03C,GAdR,KAAAjyC,IAAW,EAEX,KAAAT,IAAW,EACX,KAAAm4F,OAAgB,EAChB,KAAAhD,SAAgB,EAEhB,KAAAoG,WAAoB,EACpB,KAAAvF,aAAoB,EACpB,KAAAS,oBAA2B,EAE3B,KAAAtC,UAAmC,KAM5BzhD,IAAaA,EAAc,IAChCrsD,KAAKqsD,YAAcA,EACnBrsD,KAAK+Z,OAASA,EAEd,IAAIxN,EAAOwN,EAAOxN,KACd6N,EAAM7N,EAAK3J,OACX+W,EAAM,EAUV,GAPEA,EAAMS,GACkB,OAAxB7N,EAAK4J,WAAWwD,MAEdA,EAKFA,EAAM,EAAIS,GACc,IAAxB7N,EAAK4J,WAAWwD,IACY,IAA5BpN,EAAK4J,WAAWwD,EAAM,GAGtB,IADAA,GAAO,EAELA,EAAMS,GACkB,IAAxB7N,EAAK4J,WAAWwD,MAEdA,EAIN3Z,KAAK2Z,IAAMA,EACX3Z,KAAKoa,IAAMA,EAGb,KAAKigH,EAAyC3pB,EAAmBtB,SAE/D,IAAI0C,EADJ9xG,KAAKk1G,WAAa,EAElB,GAAGpD,EAAQ9xG,KAAKs6H,WAAWD,SACpBvoB,GAAS/nC,EAAMs3C,SAEtB,OADArhH,KAAK8xG,MAAQA,EACNA,EAGD,WACNuoB,EAAyC3pB,EAAmBtB,QAC5DmrB,EAAsBn5G,IAAInf,WAK1B,IAHA,IAAIsK,EAAOvM,KAAK+Z,OAAOxN,KACnB6N,EAAMpa,KAAKoa,IACXT,EAAM3Z,KAAK2Z,IACRA,EAAMS,GAAK,CAChBpa,KAAK8uG,SAAWn1F,EAChB,IAAI+gF,EAAInuF,EAAK4J,WAAWwD,GACxB,OAAQ+gF,GACN,KAAK,GACH,OACI/gF,EAAMS,GACgB,IAAxB7N,EAAK4J,WAAWwD,IACf,MAGL,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,KACDA,EACF,MAEF,KAAK,GAEH,QADEA,EAEA4gH,EAAiB,GAAK5gH,EAAMS,GACJ,IAAxB7N,EAAK4J,WAAWwD,MAEdA,EAEA4gH,EAAiB,GAAK5gH,EAAMS,GACJ,IAAxB7N,EAAK4J,WAAWwD,IAEhB3Z,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMwB,4BAEfvrE,KAAK2Z,IAAMA,EACJowD,EAAMyB,sBAEfxrE,KAAK2Z,IAAMA,EACJowD,EAAMiZ,aAEf,KAAK,GACL,KAAK,GACL,KAAK,GAEH,OADAhjF,KAAK2Z,IAAMA,EACJowD,EAAMyoC,cAEf,KAAK,GAEH,QADE74F,EAEA4gH,EAAiB,GAAK5gH,EAAMS,GACJ,IAAxB7N,EAAK4J,WAAWwD,IAEhB3Z,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM+C,iBAEf9sE,KAAK2Z,IAAMA,EACJowD,EAAMgD,SAEf,KAAK,GAEH,KADEpzD,EACE4gH,EAAiB,GAAK5gH,EAAMS,EAAK,CACnC,IAAIogH,EAAMjuH,EAAK4J,WAAWwD,GAC1B,GAAW,IAAP6gH,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM4E,oBAEf,GAAW,IAAP6rD,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMgE,iBAIjB,OADA/tE,KAAK2Z,IAAMA,EACJowD,EAAMiE,UAEf,KAAK,GAEH,OADAhuE,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMgoC,UAEf,KAAK,GAEH,OADA/xG,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMmoC,WAEf,KAAK,GAEH,KADEv4F,EACE4gH,EAAiB,GAAK5gH,EAAMS,EAAK,CACnC,IAAIogH,EAAMjuH,EAAK4J,WAAWwD,GAC1B,GAAW,IAAP6gH,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMqC,gBAEf,GAAW,IAAPouD,EAEF,QADE7gH,EAEA4gH,EAAiB,GAAK5gH,EAAMS,GACJ,IAAxB7N,EAAK4J,WAAWwD,IAEhB3Z,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMwC,2BAEfvsE,KAAK2Z,IAAMA,EACJowD,EAAMyC,mBAIjB,OADAxsE,KAAK2Z,IAAMA,EACJowD,EAAMsC,SAEf,KAAK,GAEH,KADE1yD,EACE4gH,EAAiB,GAAK5gH,EAAMS,EAAK,CACnC,IAAIogH,EAAMjuH,EAAK4J,WAAWwD,GAC1B,GAAW,IAAP6gH,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMqY,UAEf,GAAW,IAAPo4C,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM8B,YAIjB,OADA7rE,KAAK2Z,IAAMA,EACJowD,EAAM+B,KAEf,KAAK,GAEH,OADA9rE,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM7xD,MAEf,KAAK,GAEH,KADEyB,EACE4gH,EAAiB,GAAK5gH,EAAMS,EAAK,CACnC,IAAIogH,EAAMjuH,EAAK4J,WAAWwD,GAC1B,GAAW,IAAP6gH,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM0Y,YAEf,GAAW,IAAP+3C,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMkC,aAIjB,OADAjsE,KAAK2Z,IAAMA,EACJowD,EAAMmC,MAEf,KAAK,GAEH,KADEvyD,EACE4gH,EAAiB,GAAK5gH,EAAMS,EAAK,CACnC,IAAIogH,EAAMjuH,EAAK4J,WAAWwD,GAC1B,GAAI,EAAA8gH,eAAeD,GAEjB,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM20C,aAEf,GACE6b,EAAiB,GAAK5gH,EAAM,EAAIS,GACzB,IAAPogH,GAC4B,IAA5BjuH,EAAK4J,WAAWwD,EAAM,GAGtB,OADA3Z,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMupC,YAIjB,OADAtzG,KAAK2Z,IAAMA,EACJowD,EAAM2nC,IAEf,KAAK,GAAgB,CACnB,IAAIgpB,EAAkB/gH,EAEtB,KADEA,EACE4gH,EAAiB,GAAK5gH,EAAMS,EAAK,CACnC,IAAIogH,EAAMjuH,EAAK4J,WAAWwD,GAC1B,GAAW,IAAP6gH,EAAuB,CACzB,IAAIluH,EAAc,EAAA+K,YAAYsjH,KAQ9B,IANEhhH,EAAM,EAAIS,GACkB,IAA5B7N,EAAK4J,WAAWwD,EAAM,OAEpBA,EACFrN,EAAc,EAAA+K,YAAYujH,UAEnBjhH,EAAMS,GACb,GAA4B,IAAxB7N,EAAK4J,WAAWwD,GAA2B,GAC3CA,EACF,MAGA3Z,KAAK8tG,WACP9tG,KAAK8tG,UACHxhG,EACAC,EAAKtJ,UAAUy3H,EAAiB/gH,GAChC3Z,KAAKgL,MAAM0vH,EAAiB/gH,IAGhC,MAEF,GAAW,IAAP6gH,EAA0B,CAC5B,IAAIK,GAAS,EACb,OAASlhH,EAAMS,GAEb,GADAsgF,EAAInuF,EAAK4J,WAAWwD,GAEb,IAAL+gF,GACA/gF,EAAM,EAAIS,GACkB,IAA5B7N,EAAK4J,WAAWwD,EAAM,GACtB,CACAA,GAAO,EACPkhH,GAAS,EACT,MAGCA,EAKM76H,KAAK8tG,WACd9tG,KAAK8tG,UACH,EAAAz2F,YAAYyD,MACZvO,EAAKtJ,UAAUy3H,EAAiB/gH,GAChC3Z,KAAKgL,MAAM0vH,EAAiB/gH,IAR9B3Z,KAAKg9B,MACH,EAAAC,eAAek1E,YACfnyG,KAAKgL,MAAM2O,GAAM,MASrB,MAEF,GAAW,IAAP6gH,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM4C,aAIjB,OADA3sE,KAAK2Z,IAAMA,EACJowD,EAAM6C,MAEf,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAEH,OADA5sE,KAAK2Z,IAAMA,EACJ3Z,KAAK86H,cACR/wD,EAAMw0C,eACNx0C,EAAM20C,aAEZ,KAAK,GAEH,OADA1+G,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMwpC,MAEf,KAAK,GAEH,OADAvzG,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMsqC,UAEf,KAAK,GAEH,KADE16F,EACE4gH,EAAiB,GAAK5gH,EAAMS,EAAK,CACnC,IAAIogH,EAAMjuH,EAAK4J,WAAWwD,GAC1B,GAAW,IAAP6gH,EAEF,QADE7gH,EAEA4gH,EAAiB,GACjB5gH,EAAMS,GACkB,IAAxB7N,EAAK4J,WAAWwD,IAEhB3Z,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMmD,2BAEfltE,KAAK2Z,IAAMA,EACJowD,EAAMoD,mBAEf,GAAW,IAAPqtD,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMa,gBAIjB,OADA5qE,KAAK2Z,IAAMA,EACJowD,EAAMC,SAEf,KAAK,GAEH,KADErwD,EACE4gH,EAAiB,GAAK5gH,EAAMS,EAAK,CACnC,IAAIogH,EAAMjuH,EAAK4J,WAAWwD,GAC1B,GAAW,IAAP6gH,EAEF,QADE7gH,EAEA4gH,EAAiB,GACjB5gH,EAAMS,GACkB,IAAxB7N,EAAK4J,WAAWwD,IAEhB3Z,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMmB,uBAEflrE,KAAK2Z,IAAMA,EACJowD,EAAMoB,eAEf,GAAW,IAAPqvD,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM8pC,mBAIjB,OADA7zG,KAAK2Z,IAAMA,EACJowD,EAAM4B,OAEf,KAAK,GAEH,KADEhyD,EACE4gH,EAAiB,GAAK5gH,EAAMS,EAAK,CACnC,IAAIogH,EAAMjuH,EAAK4J,WAAWwD,GAC1B,GAAW,IAAP6gH,EAA6B,CAE/B,KADE7gH,EACE4gH,EAAiB,GAAK5gH,EAAMS,EAAK,CAEnC,GADAogH,EAAMjuH,EAAK4J,WAAWwD,GACX,IAAP6gH,EAEF,QADE7gH,EAEA4gH,EAAiB,GAAK5gH,EAAMS,GACJ,IAAxB7N,EAAK4J,WAAWwD,IAEhB3Z,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM4D,6CAEf3tE,KAAK2Z,IAAMA,EACJowD,EAAM6D,qCAEf,GAAW,IAAP4sD,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMwD,+BAIjB,OADAvtE,KAAK2Z,IAAMA,EACJowD,EAAMyD,wBAEf,GAAW,IAAPgtD,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMgB,mBAIjB,OADA/qE,KAAK2Z,IAAMA,EACJowD,EAAMU,YAEf,KAAK,GAEH,OADAzqE,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMypC,SAEf,KAAK,GAEH,OADAxzG,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM8oC,YAEf,KAAK,GAEH,OADA7yG,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMgpC,aAEf,KAAK,GAEH,QADEp5F,EAEA4gH,EAAiB,GAAK5gH,EAAMS,GACJ,IAAxB7N,EAAK4J,WAAWwD,IAEhB3Z,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMwE,eAEfvuE,KAAK2Z,IAAMA,EACJowD,EAAMyE,OAEf,KAAK,IAEH,OADAxuE,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM8qC,UAEf,KAAK,IAEH,KADEl7F,EACE4gH,EAAiB,GAAK5gH,EAAMS,EAAK,CACnC,IAAIogH,EAAMjuH,EAAK4J,WAAWwD,GAC1B,GAAW,KAAP6gH,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMqF,QAEf,GAAW,IAAPorD,EAEF,OADAx6H,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMoE,WAIjB,OADAnuE,KAAK2Z,IAAMA,EACJowD,EAAMqE,IAEf,KAAK,IAEH,OADApuE,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM+qC,WAEf,KAAK,IAEH,OADA90G,KAAK2Z,IAAMA,EAAM,EACVowD,EAAMmZ,MAEf,KAAK,GAEH,OADAljF,KAAK2Z,IAAMA,EAAM,EACVowD,EAAM8kC,GAEf,QAAS,CACP,GAAI,EAAAksB,kBAAkBrgC,GAAI,CACxB,GAAI,EAAAsgC,mBAAmBtgC,GAAI,CACzB,IAAIugC,EAAYthH,EAChB,OACIA,EAAMS,GACR,EAAA8gH,iBAAiBxgC,EAAInuF,EAAK4J,WAAWwD,KAErC,IAAK,EAAAqhH,mBAAmBtgC,GAEtB,OADA16F,KAAK2Z,IAAMshH,EACJlxD,EAAM9zD,WAGjB,IACIklH,EAAexB,EADDptH,EAAKtJ,UAAUg4H,EAAWthH,IAE5C,GACEwhH,IAAiBpxD,EAAMs3C,SACvBgZ,IAAuB3pB,EAAmBiI,SAExC0hB,IAAuB3pB,EAAmBC,SAC1CypB,EAAsBe,IAIxB,OADAn7H,KAAK2Z,IAAMA,EACJwhH,EAETn7H,KAAK2Z,IAAMA,EAAMshH,EAGnB,OADAj7H,KAAK2Z,IAAMA,EACJowD,EAAM9zD,WACR,GAAI,EAAAmlH,aAAa1gC,GAAI,GACxB/gF,EACF,MAEF,IAAIgE,EAAQhE,IAUZ,OARkB,QAAX,MAAJ+gF,IAAyB/gF,EAAMS,GACK,QAAX,MAAxB7N,EAAK4J,WAAWwD,OAChBA,EACJ3Z,KAAKg9B,MACH,EAAAC,eAAeo+F,kBACfr7H,KAAKgL,MAAM2S,EAAOhE,IAEpB3Z,KAAK2Z,IAAMA,EACJowD,EAAMs3C,UAKnB,OADArhH,KAAK2Z,IAAMA,EACJowD,EAAM0kC,UAGf,KACE6sB,GAAuB,EACvBjB,EAAyC3pB,EAAmBtB,QAC5DmsB,EAAyBn6G,IAAInf,WAE7B,IAAIsK,EAAOvM,KAAK+Z,OAAOxN,KACvB,GAAIvM,KAAKk1G,UAAY,EAAG,CACtB,IAGIA,EAHA+lB,EAAYj7H,KAAK2Z,IACjB6hH,EAAcx7H,KAAK8xG,MACnB2pB,EAAiBz7H,KAAK8uG,SAE1B,GAAGoG,EAAYl1G,KAAKs6H,WAAWD,EAAoBkB,SAC5CrmB,GAAanrC,EAAMs3C,SAG1B,GAFArhH,KAAKk1G,UAAYA,EACjBl1G,KAAK2vG,aAAe3vG,KAAK8uG,SACrBwsB,EAAgB,CAClBt7H,KAAKowG,oBAAqB,EAC1B,IAAK,IAAIz2F,EAAMshH,EAAW7gH,EAAMpa,KAAK2vG,aAAch2F,EAAMS,IAAOT,EAC9D,GAAI,EAAAmuE,YAAYv7E,EAAK4J,WAAWwD,IAAO,CACrC3Z,KAAKowG,oBAAqB,EAC1B,OAINpwG,KAAK2Z,IAAMshH,EACXj7H,KAAK8xG,MAAQ0pB,EACbx7H,KAAK8uG,SAAW2sB,EAElB,OAAOz7H,KAAKk1G,UAGd,eAAemlB,EAAyC3pB,EAAmBC,QACzE,OAAO3wG,KAAKwuG,KAAKzkC,EAAM9zD,WAAYokH,GAGrC,KAAKvoB,EAAcuoB,EAAyC3pB,EAAmBtB,SAC7E,IAOI8F,EAPA+lB,EAAYj7H,KAAK2Z,IACjB6hH,EAAcx7H,KAAK8xG,MACnB2pB,EAAiBz7H,KAAK8uG,SACtBysB,EAAoBn6G,IAAInf,UACxB6vG,GAAS/nC,EAAMU,cACjB8wD,EAAoB,GAGtB,GAAGrmB,EAAYl1G,KAAKs6H,WAAWD,EAAoBkB,SAC5CrmB,GAAanrC,EAAMs3C,SAC1B,OAAInM,GAAapD,GACf9xG,KAAK8xG,MAAQA,EACb9xG,KAAKk1G,WAAa,GACX,IAEPl1G,KAAK2Z,IAAMshH,EACXj7H,KAAK8xG,MAAQ0pB,EACbx7H,KAAK8uG,SAAW2sB,GACT,GAIX,OACE,IAAIzrB,EAAQ0rB,EASZ,OARI1rB,GACF0rB,EAAgB,KAChB1rB,EAAMr2F,IAAM3Z,KAAK2Z,IACjBq2F,EAAM8B,MAAQ9xG,KAAK8xG,MACnB9B,EAAMlB,SAAW9uG,KAAK8uG,UAEtBkB,EAAQ,IAAI2rB,EAAM37H,KAAK2Z,IAAK3Z,KAAK8xG,MAAO9xG,KAAK8uG,UAExCkB,EAGT,QAAQA,GACN0rB,EAAgB1rB,EAGlB,MAAMA,GACJhwG,KAAK2Z,IAAMq2F,EAAMr2F,IACjB3Z,KAAK8xG,MAAQ9B,EAAM8B,MACnB9xG,KAAK8uG,SAAWkB,EAAMlB,SACtB9uG,KAAKk1G,WAAa,EAGpB,MAAMv3F,GAAa,EAAIvD,GAAW,GAC5BuD,EAAQ,GACVA,EAAQ3d,KAAK8uG,SACb10F,EAAMpa,KAAK2Z,KACFS,EAAM,IACfA,EAAMuD,GAER,IAAI3S,EAAQ,IAAI8M,EAAM6F,EAAOvD,GAE7B,OADApP,EAAM+O,OAAS/Z,KAAK+Z,OACb/O,EAGT,iBAKE,IAJA,IAAIuB,EAAOvM,KAAK+Z,OAAOxN,KACnB6N,EAAMpa,KAAKoa,IACXT,EAAM3Z,KAAK2Z,IACXgE,EAAQhE,IAERA,EAAMS,GACR,EAAA8gH,iBAAiB3uH,EAAK4J,WAAWwD,MAGnC,OADA3Z,KAAK2Z,IAAMA,EACJpN,EAAKtJ,UAAU0a,EAAOhE,GAG/B,aAOE,IANA,IAAIpN,EAAOvM,KAAK+Z,OAAOxN,KACnB6N,EAAMpa,KAAKoa,IACXT,EAAM3Z,KAAK2Z,IACXkzE,EAAQtgF,EAAK4J,WAAWwD,KACxBgE,EAAQhE,EACRxW,EAAS,KACA,CACX,GAAIwW,GAAOS,EAAK,CACdjX,GAAUoJ,EAAKtJ,UAAU0a,EAAOhE,GAChC3Z,KAAKg9B,MACH,EAAAC,eAAe2+F,4BACf57H,KAAKgL,MAAM2S,EAAQ,EAAGvD,IAExB,MAEF,IAAIsgF,EAAInuF,EAAK4J,WAAWwD,GACxB,GAAI+gF,GAAK7N,EAAO,CACd1pF,GAAUoJ,EAAKtJ,UAAU0a,EAAOhE,KAChC,MAEF,GAAS,IAAL+gF,EAAJ,CAQA,GAAI,EAAA5S,YAAY4S,IAAe,IAAT7N,EAA4B,CAChD1pF,GAAUoJ,EAAKtJ,UAAU0a,EAAOhE,GAChC3Z,KAAKg9B,MACH,EAAAC,eAAe2+F,4BACf57H,KAAKgL,MAAM2S,EAAQ,EAAGhE,IAExB,QAEAA,OAfAxW,GAAUoJ,EAAKtJ,UAAU0a,EAAOhE,GAChC3Z,KAAK2Z,IAAMA,EACXxW,GAAUnD,KAAK67H,qBAEfl+G,EADAhE,EAAM3Z,KAAK2Z,IAef,OADA3Z,KAAK2Z,IAAMA,EACJxW,EAGT,qBACE,IAAIiX,EAAMpa,KAAKoa,IACf,KAAMpa,KAAK2Z,KAAOS,EAKhB,OAJApa,KAAKg9B,MACH,EAAAC,eAAeiiF,uBACfl/G,KAAKgL,MAAMoP,IAEN,GAGT,IAAI7N,EAAOvM,KAAK+Z,OAAOxN,KACnBmuF,EAAInuF,EAAK4J,WAAWnW,KAAK2Z,OAC7B,OAAQ+gF,GACN,KAAK,GAAa,MAAO,KACzB,KAAK,GAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,GAAsB,MAAO,IAClC,KAAK,GAAsB,MAAO,IAClC,KAAK,IACH,OACE16F,KAAK2Z,IAAMS,GACkB,KAA7B7N,EAAK4J,WAAWnW,KAAK2Z,QAEnB3Z,KAAK2Z,IACA3Z,KAAK87H,6BAEP97H,KAAK+7H,oBAEd,KAAK,IACH,OAAO/7H,KAAKg8H,wBAEd,KAAK,GAEDh8H,KAAK2Z,IAAMS,GACkB,IAA7B7N,EAAK4J,WAAWnW,KAAK2Z,QAEnB3Z,KAAK2Z,IAIX,KAAK,GACL,KAAK,KACL,KAAK,KAA6B,MAAO,GACzC,QAAS,OAAO+uC,OAAOuzE,aAAavhC,IAIxC,oBAKE,IAJA,IAAInuF,EAAOvM,KAAK+Z,OAAOxN,KACnBoR,EAAQ3d,KAAK2Z,IACbS,EAAMpa,KAAKoa,IACX8hH,GAAU,IACD,CACX,GAAIl8H,KAAK2Z,KAAOS,EAAK,CACnBpa,KAAKg9B,MACH,EAAAC,eAAek/F,wCACfn8H,KAAKgL,MAAM2S,EAAOvD,IAEpB,MAEF,GAAiC,IAA7B7N,EAAK4J,WAAWnW,KAAK2Z,KAA4B,GACjD3Z,KAAK2Z,IACPuiH,GAAU,EACV,SAEF,IAAIxhC,EAAInuF,EAAK4J,WAAWnW,KAAK2Z,KAC7B,IAAKuiH,GAAgB,IAALxhC,EAAqB,MACrC,GAAI,EAAA5S,YAAY4S,GAAI,CAClB16F,KAAKg9B,MACH,EAAAC,eAAek/F,wCACfn8H,KAAKgL,MAAM2S,EAAO3d,KAAK2Z,MAEzB,QAEA3Z,KAAK2Z,IACPuiH,GAAU,EAEZ,OAAO3vH,EAAKtJ,UAAU0a,EAAO3d,KAAK2Z,KAGpC,kBAKE,IAJA,IAAIpN,EAAOvM,KAAK+Z,OAAOxN,KACnBoR,EAAQ3d,KAAK2Z,IACbS,EAAMpa,KAAKoa,IACXpK,EAAQ,EACLhQ,KAAK2Z,IAAMS,GAAK,CACrB,IAAIsgF,EAASnuF,EAAK4J,WAAWnW,KAAK2Z,KAClC,IAAK,EAAAuhH,iBAAiBxgC,GAAI,MAI1B,SAHE16F,KAAK2Z,IAGC+gF,GACN,KAAK,IACH1qF,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,KAAK,IACHA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,KAAK,IACHA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACFhQ,KAAKg9B,MACH,EAAAC,eAAem/F,iCACfp8H,KAAKgL,MAAM2S,EAAO3d,KAAK2Z,MAGpBpN,EAAKtJ,UAAU0a,EAAO3d,KAAK2Z,KAGpC,cACE,IAAIpN,EAAOvM,KAAK+Z,OAAOxN,KACnBoN,EAAM3Z,KAAK2Z,IACXS,EAAMpa,KAAKoa,IACf,GAAIT,EAAM,EAAIS,GAA+B,IAAxB7N,EAAK4J,WAAWwD,GACnC,OAAmC,GAA3BpN,EAAK4J,WAAWwD,EAAM,IAC5B,KAAK,IACL,KAAK,GACL,KAAK,IAAY,OAAO,EAG5B,KAAOA,EAAMS,GAAK,CAChB,IAAIsgF,EAAInuF,EAAK4J,WAAWwD,GACxB,GAAS,IAAL+gF,GAAiC,MAAP,GAAJA,GAAuB,OAAO,EACxD,GAAS,IAALA,IAAoBA,EAAI,IAAeA,EAAI,IAAc,MAE7D/gF,IAEF,OAAO,EAGT,cACE,IAAIpN,EAAOvM,KAAK+Z,OAAOxN,KACnBoN,EAAM3Z,KAAK2Z,IACf,GAAIA,EAAM,EAAI3Z,KAAKoa,KAA+B,IAAxB7N,EAAK4J,WAAWwD,GAAqB,CAC7D,OAAmC,GAA3BpN,EAAK4J,WAAWwD,EAAM,IAC5B,KAAK,IAEH,OADA3Z,KAAK2Z,IAAMA,EAAM,EACV3Z,KAAKq8H,iBAEd,KAAK,GAEH,OADAr8H,KAAK2Z,IAAMA,EAAM,EACV3Z,KAAKs8H,oBAEd,KAAK,IAEH,OADAt8H,KAAK2Z,IAAMA,EAAM,EACV3Z,KAAKu8H,mBAGhB,GAAI,EAAAC,aAAajwH,EAAK4J,WAAWwD,EAAM,IAAK,CAC1C,IAAIgE,EAAQhE,EACZ3Z,KAAK2Z,IAAMA,EAAM,EACjB,IAAIzY,EAAQlB,KAAKu8H,mBAKjB,OAJAv8H,KAAKg9B,MACH,EAAAC,eAAew/F,8CACfz8H,KAAKgL,MAAM2S,EAAO3d,KAAK2Z,MAElBzY,GAGX,OAAOlB,KAAK08H,qBAGd,iBACE,IAAInwH,EAAOvM,KAAK+Z,OAAOxN,KACvB,IAAIoN,EAAM3Z,KAAK2Z,IAMf,IALA,IAAIS,EAAMpa,KAAKoa,IACXuD,EAAQhE,EACRgjH,EAASh/G,EACTzc,EAAQy7C,QAAQ,GAChBigF,EAAQjgF,QAAQ,GACbhjC,EAAMS,GAAK,CAChB,IAAIsgF,EAAInuF,EAAK4J,WAAWwD,GACxB,GAAI+gF,GAAK,IAAeA,GAAK,GAE3Bx5F,EAAQ+iB,QACN44G,QAAQ37H,EAAO07H,GACfjgF,QAAQ+9C,EAAI,UAET,GAAIA,GAAK,IAAcA,GAAK,GAEjCx5F,EAAQ+iB,QACN44G,QAAQ37H,EAAO07H,GACfjgF,QAAQ,GAAK+9C,EAAI,UAEd,GAAIA,GAAK,IAAcA,GAAK,IAEjCx5F,EAAQ+iB,QACN44G,QAAQ37H,EAAO07H,GACfjgF,QAAQ,GAAK+9C,EAAI,SAEd,IAAS,IAALA,EAWT,MAVIiiC,GAAUhjH,GACZ3Z,KAAKg9B,MACH2/F,GAAUh/G,EACN,EAAAsf,eAAe6/F,wCACf,EAAA7/F,eAAe8/F,0DACnB/8H,KAAKgL,MAAM2O,IAGfgjH,EAAShjH,EAAM,IAIfA,EAcJ,OAZIA,GAAOgE,EACT3d,KAAKg9B,MACH,EAAAC,eAAe+/F,2BACfh9H,KAAKgL,MAAM2S,IAEJg/G,GAAUhjH,GACnB3Z,KAAKg9B,MACH,EAAAC,eAAe6/F,wCACf98H,KAAKgL,MAAM2xH,EAAS,IAGxB38H,KAAK2Z,IAAMA,EACJzY,EAGT,qBAQE,IAPA,IAAIqL,EAAOvM,KAAK+Z,OAAOxN,KACnBoN,EAAM3Z,KAAK2Z,IACXS,EAAMpa,KAAKoa,IACXuD,EAAQhE,EACRgjH,EAASh/G,EACTzc,EAAQy7C,QAAQ,GAChBsgF,EAAStgF,QAAQ,IACdhjC,EAAMS,GAAK,CAChB,IAAIsgF,EAAInuF,EAAK4J,WAAWwD,GACxB,GAAI+gF,GAAK,IAAeA,GAAK,GAE3Bx5F,EAAQ+iB,QACNQ,QAAQvjB,EAAO+7H,GACftgF,QAAQ+9C,EAAI,SAET,IAAS,IAALA,EAgBT,MAfIiiC,GAAUhjH,EACZ3Z,KAAKg9B,MACH2/F,GAAUh/G,EACN,EAAAsf,eAAe6/F,wCACf,EAAA7/F,eAAe8/F,0DACnB/8H,KAAKgL,MAAM2O,IAEJA,EAAM,GAAKgE,GAAqC,IAA5BpR,EAAK4J,WAAWwD,EAAM,IACnD3Z,KAAKg9B,MACH,EAAAC,eAAe6/F,wCACf98H,KAAKgL,MAAM2O,IAGfgjH,EAAShjH,EAAM,IAIfA,EAcJ,OAZIA,GAAOgE,EACT3d,KAAKg9B,MACH,EAAAC,eAAeigG,eACfl9H,KAAKgL,MAAM2S,IAEJg/G,GAAUhjH,GACnB3Z,KAAKg9B,MACH,EAAAC,eAAe6/F,wCACf98H,KAAKgL,MAAM2xH,EAAS,IAGxB38H,KAAK2Z,IAAMA,EACJzY,EAGT,mBAQE,IAPA,IAAIqL,EAAOvM,KAAK+Z,OAAOxN,KACnBoN,EAAM3Z,KAAK2Z,IACXS,EAAMpa,KAAKoa,IACXuD,EAAQhE,EACRgjH,EAASh/G,EACTzc,EAAQy7C,QAAQ,GAChBwgF,EAAQxgF,QAAQ,GACbhjC,EAAMS,GAAK,CAChB,IAAIsgF,EAAInuF,EAAK4J,WAAWwD,GACxB,GAAI+gF,GAAK,IAAeA,GAAK,GAE3Bx5F,EAAQ+iB,QACN44G,QAAQ37H,EAAOi8H,GACfxgF,QAAQ+9C,EAAI,SAET,IAAS,IAALA,EAWT,MAVIiiC,GAAUhjH,GACZ3Z,KAAKg9B,MACH2/F,GAAUh/G,EACN,EAAAsf,eAAe6/F,wCACf,EAAA7/F,eAAe8/F,0DACnB/8H,KAAKgL,MAAM2O,IAGfgjH,EAAShjH,EAAM,IAIfA,EAcJ,OAZIA,GAAOgE,EACT3d,KAAKg9B,MACH,EAAAC,eAAemgG,qBACfp9H,KAAKgL,MAAM2S,IAEJg/G,GAAUhjH,GACnB3Z,KAAKg9B,MACH,EAAAC,eAAe6/F,wCACf98H,KAAKgL,MAAM2xH,EAAS,IAGxB38H,KAAK2Z,IAAMA,EACJzY,EAGT,oBAQE,IAPA,IAAIqL,EAAOvM,KAAK+Z,OAAOxN,KACnBoN,EAAM3Z,KAAK2Z,IACXS,EAAMpa,KAAKoa,IACXuD,EAAQhE,EACRgjH,EAASh/G,EACTzc,EAAQy7C,QAAQ,GAChB0gF,EAAQ1gF,QAAQ,GACbhjC,EAAMS,GAAK,CAChB,IAAIsgF,EAAInuF,EAAK4J,WAAWwD,GACxB,GAAS,IAAL+gF,EAEFx5F,EAAQ27H,QAAQ37H,EAAOm8H,QAClB,GAAS,IAAL3iC,EAETx5F,EAAQ+iB,QACN44G,QAAQ37H,EAAOm8H,GACfA,OAEG,IAAS,IAAL3iC,EAWT,MAVIiiC,GAAUhjH,GACZ3Z,KAAKg9B,MACH2/F,GAAUh/G,EACN,EAAAsf,eAAe6/F,wCACf,EAAA7/F,eAAe8/F,0DACnB/8H,KAAKgL,MAAM2O,IAGfgjH,EAAShjH,EAAM,IAIfA,EAcJ,OAZIA,GAAOgE,EACT3d,KAAKg9B,MACH,EAAAC,eAAeqgG,sBACft9H,KAAKgL,MAAM2S,IAEJg/G,GAAUhjH,GACnB3Z,KAAKg9B,MACH,EAAAC,eAAe6/F,wCACf98H,KAAKgL,MAAM2xH,EAAS,IAGxB38H,KAAK2Z,IAAMA,EACJzY,EAGT,YAWE,OAAOlB,KAAKu9H,mBAGd,mBACE,IAAIhxH,EAAOvM,KAAK+Z,OAAOxN,KACnB6N,EAAMpa,KAAKoa,IACXuD,EAAQ3d,KAAK2Z,IACb6jH,EAAWx9H,KAAKy9H,yBAAwB,GAK5C,GAJIz9H,KAAK2Z,IAAMS,GAAoC,IAA7B7N,EAAK4J,WAAWnW,KAAK2Z,SACvC3Z,KAAK2Z,IACP6jH,GAAYx9H,KAAKy9H,2BAEfz9H,KAAK2Z,IAAMS,EAAK,CAClB,IAAIsgF,EAAInuF,EAAK4J,WAAWnW,KAAK2Z,KACb,MAAP,GAAJ+gF,QAEC16F,KAAK2Z,IAAMS,GACsB,KAAlCsgF,EAAInuF,EAAK4J,WAAWnW,KAAK2Z,OAAgC,IAAL+gF,GACrD,EAAA+/B,eAAeluH,EAAK4J,WAAWnW,KAAK2Z,IAAM,QAExC3Z,KAAK2Z,IAET6jH,GAAYx9H,KAAKy9H,2BAGrB,IAAIt6H,EAASoJ,EAAKtJ,UAAU0a,EAAO3d,KAAK2Z,KAExC,OADI6jH,IAAUr6H,EAASA,EAAOu6H,WAAW,IAAK,KACvCC,WAAWx6H,GAIZ,wBAAwBy6H,GAA4B,GAQ1D,IAPA,IAAIrxH,EAAOvM,KAAK+Z,OAAOxN,KACnBoN,EAAM3Z,KAAK2Z,IACXgE,EAAQhE,EACRS,EAAMpa,KAAKoa,IACXuiH,EAASh/G,EACT6/G,EAAW,EAER7jH,EAAMS,GAAK,CAChB,IAAIsgF,EAAInuF,EAAK4J,WAAWwD,GAExB,GAAS,IAAL+gF,EACEiiC,GAAUhjH,EACZ3Z,KAAKg9B,MACH2/F,GAAUh/G,EACN,EAAAsf,eAAe6/F,wCACf,EAAA7/F,eAAe8/F,0DACnB/8H,KAAKgL,MAAM2O,IAEHikH,GAAuBjkH,EAAM,GAAKgE,GAAqC,IAA5BpR,EAAK4J,WAAWwD,EAAM,IAC3E3Z,KAAKg9B,MACH,EAAAC,eAAe6/F,wCACf98H,KAAKgL,MAAM2O,IAGfgjH,EAAShjH,EAAM,IACb6jH,OACG,IAAK,EAAA/C,eAAe//B,GACzB,QAEA/gF,EAWJ,OARIA,GAAOgE,GAASg/G,GAAUhjH,GAC5B3Z,KAAKg9B,MACH,EAAAC,eAAe6/F,wCACf98H,KAAKgL,MAAM2xH,EAAS,IAIxB38H,KAAK2Z,IAAMA,EACJ6jH,EAGT,eACE,MAAM,IAAI36H,MAAM,mBAGlB,sBAAsBg7H,EAAc,GAKlC,IAJA,IAAI38H,EAAQ,EACRqL,EAAOvM,KAAK+Z,OAAOxN,KACnBoN,EAAM3Z,KAAK2Z,IACXS,EAAMpa,KAAKoa,IACRT,EAAMS,GAAK,CAChB,IAAIsgF,EAAInuF,EAAK4J,WAAWwD,KACxB,GAAI+gF,GAAK,IAAeA,GAAK,GAC3Bx5F,GAASA,GAAS,GAAKw5F,EAAI,QACtB,GAAIA,GAAK,IAAcA,GAAK,GACjCx5F,GAASA,GAAS,GAAKw5F,GAAI,OACtB,MAAIA,GAAK,IAAcA,GAAK,KAQjC,OALA16F,KAAKg9B,MACH,EAAAC,eAAe+/F,2BACfh9H,KAAKgL,MAAM2O,EAAM,EAAGA,IAEtB3Z,KAAK2Z,IAAMA,EACJ,GAPPzY,GAASA,GAAS,GAAKw5F,GAAI,GAS7B,GAAgB,KAAVmjC,EAAa,MAErB,OAAIA,GACF79H,KAAKg9B,MACH,EAAAC,eAAeiiF,uBACfl/G,KAAKgL,MAAM2O,IAEb3Z,KAAK2Z,IAAMA,EACJ,KAET3Z,KAAK2Z,IAAMA,EACJ+uC,OAAOuzE,aAAa/6H,IAG7B,oBACE,OAAOlB,KAAKg8H,sBAAsB,GAG5B,4BACN,IAAIr+G,EAAQ3d,KAAK2Z,IACbzY,EAAQlB,KAAKq8H,iBACbyB,EAAU7iF,QAAQ/5C,GAClB68H,GAAU,EAEdxoH,QAAQ4lC,SAASj6C,IACb48H,EAAU,UACZ99H,KAAKg9B,MACH,EAAAC,eAAe+gG,4EACfh+H,KAAKgL,MAAM2S,EAAO3d,KAAK2Z,MAEzBokH,GAAU,GAGZ,IAAI3jH,EAAMpa,KAAKoa,IACX7N,EAAOvM,KAAK+Z,OAAOxN,KAiBvB,OAhBIvM,KAAK2Z,KAAOS,GACdpa,KAAKg9B,MACH,EAAAC,eAAeiiF,uBACfl/G,KAAKgL,MAAM2S,EAAOvD,IAEpB2jH,GAAU,GAC4B,KAA7BxxH,EAAK4J,WAAWnW,KAAK2Z,OAC5B3Z,KAAK2Z,KAEP3Z,KAAKg9B,MACH,EAAAC,eAAeghG,qCACfj+H,KAAKgL,MAAM2S,EAAO3d,KAAK2Z,MAEzBokH,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACbp1E,OAAOuzE,aAAa6B,GACpBp1E,OAAOuzE,aACL6B,EAAU,QAAa,GAAM,MAC7BA,EAAU,MAAW,KAAQ,QAzrCvC,cA+rCA,MAAanC,EACX,YAEShiH,EAEAm4F,EAEAhD,GAJA,KAAAn1F,MAEA,KAAAm4F,QAEA,KAAAhD,YAPX,UAYA,IAAI4sB,EAA8B,M,kKCpoDlC,eAMA,UAMA,SAAkBwC,GAKhB,eAEA,iBAEA,iBAEA,iBAEA,qBAKA,eAEA,iBAEA,iBAEA,iBAEA,qBAEA,oBAKA,kBAEA,kBAKA,oBAKA,0BAEA,8BAEA,wBAEA,wBAKA,oBAxDF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KA4D1B,SAAkBC,GAChB,mBAEA,uBAEA,2BAEA,yBAEA,qBAEA,0BAEA,sBAEA,oBAEA,uBAEA,+BAEA,6BAEA,0BAEA,8BAEA,wBAEA,8BA7BF,CAAkB,EAAAA,YAAA,EAAAA,UAAS,KAiC3B,MAAa5hG,EAoBX,YAAYxxB,EAAgBiF,EAAkB3M,GALtC,KAAA+6H,iBAAgC,KAEhC,KAAAC,cAA6B,KAInCr+H,KAAK+K,KAAOA,EACZ/K,KAAKgQ,MAAQA,EACbhQ,KAAKqD,KAAOA,EACZrD,KAAKwjC,SAAgB16B,KAAezF,EAAO,GAC3CrD,KAAK27C,eAAiB,KACtB37C,KAAKy8C,mBAAqB,KACZ,IAARzsC,EAGJhQ,KAAKq+H,cAAgBr+H,KAFrBA,KAAKo+H,iBAAmBp+H,KAO5B,cACE,GAAIA,MAAQu8B,EAAKmD,KAAM,OAAO1/B,KAC9B,OAAQA,KAAK+K,MACX,KAAK,EAAa,OAAOwxB,EAAKrb,GAC9B,KAAK,EAAc,OAAOqb,EAAKpb,IAC/B,KAAK,GACL,KAAK,EAAc,OAAOob,EAAKnb,IAC/B,KAAK,GACL,KAAK,EAAc,OAAOmb,EAAKlb,IAC/B,KAAK,EAAgB,OAAoB,IAAbrhB,KAAKqD,KAAak5B,EAAKsvB,QAAUtvB,EAAKuvB,QAClE,KAAK,EAAa,OAAOvvB,EAAKhb,GAC9B,KAAK,EAAc,OAAOgb,EAAK/a,IAC/B,KAAK,EAAc,OAAO+a,EAAK9a,IAC/B,KAAK,EAAc,OAAO8a,EAAK7a,IAC/B,KAAK,EAAgB,OAAoB,IAAb1hB,KAAKqD,KAAak5B,EAAKud,QAAUvd,EAAK0d,QAClE,KAAK,GACL,QAAS,OAAO1d,EAAKnb,KAKzB,iBACE,OAAiB,IAAbphB,KAAK+K,KAA8BwxB,EAAKmD,KACrC1/B,KAIT,gBACE,OAAO,GAAK+e,IAAS/e,KAAKwjC,UAI5B,cACE,OAAOxjC,KAAKy5C,GAAG,KAIjB,qBACE,OAAOz5C,KAAKy5C,GAAG,KAIjB,0BACE,OAAOz5C,KAAKy5C,GAAG,KAIjB,yBACE,OAAOz5C,KAAKy5C,GAAG,KAIjB,2BACE,OAAOz5C,KAAKy5C,GAAG,KAIjB,6BACE,OAAOz5C,KAAKy5C,GAAG,KAIjB,4BACE,OAAOz5C,KAAKy5C,GAAG,KAIjB,6BACE,OAAOz5C,KAAKy5C,GAAG,GAIjB,mBACE,OAAOz5C,KAAKy5C,GAAG,KAIjB,qBACE,OAAOz5C,KAAKojC,gBAAkBpjC,KAAKy7C,aAIrC,qBACE,OAAOz7C,MAAQu8B,EAAK3a,KAItB,oBACE,OAAO5hB,KAAKy5C,GAAG,MAIjB,kBACE,OAAOz5C,KAAKy5C,GAAG,KAIjB,0BACE,OAAOz5C,KAAKy5C,GAAG,KAIjB,0BACE,OAAOz5C,KAAKy5C,GAAG,KAIjB,0BACE,OAAOz5C,KAAKy5C,GAAG,MAIjB,cACE,QAAOz5C,KAAKu9C,qBACgB,OAAxBv9C,KAAK27C,eAKX,WACE,OAAO37C,KAAKu9C,oBACRv9C,KAAK27C,eACL,KAIN,kBAAkBtE,GAChB,IAAIsE,EAAiB37C,KAAK47C,WAC1B,GAAID,EAEF,OAAOA,EACF,CACL,IAAIc,EAAqBz8C,KAAKw9C,eAC9B,GAAIf,EAAoB,CAEtB,IAAIzwC,EAAOywC,EAAmBzwC,KAC1BiqH,EAAU1gH,OAAO8hC,EAAQa,SAASyd,aAAate,EAAQ4J,kBAAmB,CAAEj1C,KAEhF,OADAiqH,EAAQtM,YAAc39G,EACfiqH,EACF,CACL,IAAIpU,EAAiBxqE,EAAQwqE,eAC7B,GAAIA,EAAe3kE,IAAIl9C,MAErB,OAAOuV,OAAOssG,EAAe1kE,IAAIn9C,QAIvC,OAAO,KAIT,iBACE,QAAOA,KAAKu9C,qBACoB,OAA5Bv9C,KAAKy8C,mBAKX,eACE,OAAOz8C,KAAKu9C,oBACRv9C,KAAKy8C,mBACL,KAIN,gBACE,GAAIz8C,KAAKu9C,oBAAqB,CAC5B,IAAI5B,EAAiB37C,KAAK27C,eAC1B,OAAIA,GAAwBA,EAAegC,aAAa,EAAAC,eAAejnC,WACpC,OAA5B3W,KAAKy8C,mBAEd,OAAO,EAIT,kBACE,IAAId,EAAiB37C,KAAK27C,eAC1B,OAA0B,OAAnBA,GAA2BA,EAAegC,aAAa,EAAAC,eAAejnC,WAI/E,sBACE,OAAI3W,KAAKwnE,oBACAxnE,KAEFuV,OAAOvV,KAAKo+H,kBAIrB,mBACE,OAAOp+H,KAAKq+H,cAId,yBAAyB/uD,GACvB,OAAOA,EAAWjsE,KAAOrD,KAAKqD,KAIhC,wBAAwBisE,GACtB,IAAIjsE,EAAOrD,KAAKy5C,GAAG,GAAsBz5C,KAAKqD,KAAOrD,KAAKqD,KAAO,EACjE,OAAO,IAAQisE,EAAWjsE,KAAOA,EAInC,GAAG2M,GAA0B,OAAQhQ,KAAKgQ,MAAQA,IAAUA,EAE5D,MAAMA,GAA0B,OAA+B,IAAvBhQ,KAAKgQ,MAAQA,GAGrD,aACEuF,OAAOvV,KAAKu9C,qBACZ,IAAI+gF,EAAet+H,KAAKq+H,cAQxB,OAPKC,IACH/oH,QAAQvV,KAAKi8C,qBACbj8C,KAAKq+H,cAAgBC,EAAe,IAAI/hG,EAAKv8B,KAAK+K,KAAmB,IAAb/K,KAAKgQ,MAA4BhQ,KAAKqD,MAC9Fi7H,EAAa3iF,eAAiB37C,KAAK27C,eACnC2iF,EAAa7hF,mBAAqBz8C,KAAKy8C,mBACvC6hF,EAAaF,iBAAmBp+H,MAE3Bs+H,EAIT,OAAO34H,GACL,OAAI3F,KAAK+K,MAAQpF,EAAMoF,QACnB/K,KAAKse,aAELte,KAAK27C,gBAAkBh2C,EAAMg2C,gBAC7B37C,KAAKy8C,oBAAsB92C,EAAM82C,oBACjCz8C,KAAKi8C,qBAAuBt2C,EAAMs2C,qBAOxC,eAAeuO,EAAc+zE,GAA6B,GACxD,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAI3+H,KAAKse,aACP,GAAIksC,EAAOlsC,eACJte,KAAKi8C,qBAAuBuO,EAAOvO,qBACtC,GAAIuiF,EAAex+H,KAAK47C,YACtB,GAAI6iF,EAAcj0E,EAAO5O,WACvB,OAAO4iF,EAAa3iF,eAAe4iF,QAEhC,GAAIC,EAAkB1+H,KAAKw9C,gBAChC,GAAImhF,EAAiBn0E,EAAOhN,eAC1B,OAAOkhF,EAAgB7iF,eAAe8iF,QAEnC,GAAI3+H,KAAKwnE,sBAAwBxnE,KAAK+K,MAAQy/C,EAAOz/C,MAAuB,IAAfy/C,EAAOz/C,MACzE,OAAO,OAIR,IAAKy/C,EAAOlsC,YACjB,GAAIte,KAAKojC,eACP,GAAIonB,EAAOpnB,gBACT,IACGm7F,GACDv+H,KAAK07C,gBACL17C,KAAK2jC,sBAAwB6mB,EAAO7mB,qBAEpC,OAAO3jC,KAAKqD,MAAQmnD,EAAOnnD,SAExB,IAAmB,IAAfmnD,EAAOz/C,KAChB,OAAO/K,KAAKqD,MAAQ,GACf,GAAmB,IAAfmnD,EAAOz/C,KAChB,OAAO/K,KAAKqD,MAAQ,QAEjB,GAAIrD,KAAKy7C,cACd,GAAI+O,EAAO/O,aACT,OAAOz7C,KAAKqD,MAAQmnD,EAAOnnD,UAExB,GAAIrD,KAAK4+H,eACVp0E,EAAOo0E,cACT,OAAO5+H,KAAKqD,MAAQmnD,EAAOnnD,KAIjC,OAAO,EAIT,uBAAuBmnD,EAAc+zE,GAA6B,GAChE,OAAIv+H,KAAKse,YAAoBte,KAAK67C,eAAe2O,IACxCA,EAAOlsC,cAEZte,KAAKojC,eACAonB,EAAOpnB,gBAAkBonB,EAAOnnD,MAAQrD,KAAKqD,QACjDk7H,GACDv+H,KAAK2jC,sBAAwB6mB,EAAO7mB,sBAGjC3jC,KAAK+K,MAAQy/C,EAAOz/C,MAI7B,eAAey/C,GAEb,GAAIxqD,KAAKy5C,GAAG,IAAsB+Q,EAAO/Q,GAAG,GAAoB,CAC9D,IAAIp2C,EAAOrD,KAAKqD,KAChB,OAAOA,GAAQmnD,EAAOnnD,OAASA,GAAQ,IAAMrD,KAAKy5C,GAAG,IAAqB+Q,EAAO/Q,GAAG,IAEtF,OAAOz5C,KAAK+K,MAAQy/C,EAAOz/C,KAI7B,yBAAyBmC,EAAYC,EAAa0xH,GAChD,OAAI1xH,EAAM0uC,eAAe3uC,EAAM2xH,GAA+B3xH,EACrDA,EAAK2uC,eAAe1uC,EAAO0xH,GAA+B1xH,EAC5D,KAIT,SAAS2xH,GAAiB,GACxB,MAAMC,EAAkBD,EACpB,QACA,UACJ,GAAI9+H,KAAKse,YAAa,CACpB,IAAIq9B,EAAiB37C,KAAK47C,WAC1B,GAAID,EACF,OAAO37C,KAAKi8C,oBACRN,EAAejE,aAAeqnF,EAC9BpjF,EAAejE,aACd,CACL,IAAI+E,EAAqBz8C,KAAKw9C,eAC9B,GAAIf,EACF,OAAOz8C,KAAKi8C,oBACR,IAAMQ,EAAmBp4C,SAASy6H,GAAY,IAAMC,EACpDtiF,EAAmBp4C,SAASy6H,IAItC,OAAQ9+H,KAAK+K,MACX,KAAK,EAAa,MAAO,KACzB,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAgB,MAAO,QAC5B,KAAK,EAAa,MAAO,KACzB,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAgB,MAAO,QAC5B,KAAK,GAAe,MAAO,OAC3B,KAAK,GAAc,MAAO,MAC1B,KAAK,GAAc,MAAO,MAC1B,KAAK,GAAe,MAAO,OAC3B,KAAK,GAAkB,MAAO,UAC9B,KAAK,GAAoB,MAAO,YAChC,KAAK,GAAiB,MAAO,SAC7B,KAAK,GAAiB,MAAO,SAC7B,QAASwK,QAAO,GAChB,KAAK,GAAe,MAAO,QAO/B,eACE,OAAQvV,KAAK+K,MACX,QAASwK,QAAO,GAChB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAO,EAAAypB,WAAWC,IACtC,KAAK,EACL,KAAK,EAAgB,GAAiB,IAAbj/B,KAAKqD,KAAY,OAAO,EAAA27B,WAAWC,IAC5D,KAAK,EACL,KAAK,EAAc,OAAO,EAAAD,WAAWmB,IACrC,KAAK,GAAc,OAAO,EAAAnB,WAAWif,IACrC,KAAK,GAAc,OAAO,EAAAjf,WAAWof,IACrC,KAAK,GAAe,OAAO,EAAApf,WAAWqpB,KACtC,KAAK,GAAkB,OAAO,EAAArpB,WAAWspB,QACzC,KAAK,GAAoB,OAAO,EAAAtpB,WAAWupB,UAC3C,KAAK,GAAiB,OAAO,EAAAvpB,WAAWwpB,OACxC,KAAK,GAAiB,OAAO,EAAAxpB,WAAWypB,OACxC,KAAK,GAAe,OAAO,EAAAzpB,WAAW2Y,OAuK5C,SAAgB4Y,EAAmBwzC,GACjC,IAAIi7B,EAAWj7B,EAAMnhG,OACjB27B,EAAM,IAAInlB,MAAkB4lH,GAChC,IAAK,IAAI57H,EAAI,EAAGA,EAAI47H,IAAY57H,EAAGm7B,EAAIn7B,GAAK2gG,EAAM3gG,GAAG49B,eACrD,OAAOzC,EA/kBT,SA2akB,EAAArd,GAAY,IAAIqb,EAAK,EACnC,IAGmB,GAIL,EAAApb,IAAY,IAAIob,EAAK,EACnC,IAGkB,IAIJ,EAAAnb,IAAY,IAAImb,EAAK,EACnC,IAEkB,IAIJ,EAAAlb,IAAY,IAAIkb,EAAK,EACnC,IAGkB,IAIJ,EAAAuvB,QAAgB,IAAIvvB,EAAK,EACvC,IAGkB,IAIJ,EAAAsvB,QAAgB,IAAItvB,EAAK,EACvC,IAIkB,IAIJ,EAAAhb,GAAW,IAAIgb,EAAK,EAClC,IAGmB,GAIL,EAAA/a,IAAY,IAAI+a,EAAK,EACnC,IAGkB,IAIJ,EAAA9a,IAAY,IAAI8a,EAAK,EACnC,IAEkB,IAIJ,EAAA7a,IAAY,IAAI6a,EAAK,EACnC,IAGkB,IAIJ,EAAA0d,QAAgB,IAAI1d,EAAK,EACvC,IAGkB,IAIJ,EAAAud,QAAgB,IAAIvd,EAAK,EACvC,IAIkB,IAIJ,EAAA3a,KAAa,IAAI2a,EAAK,GACpC,IAGmB,GAIL,EAAA1a,IAAY,IAAI0a,EAAK,GACnC,IAEkB,IAIJ,EAAAza,IAAY,IAAIya,EAAK,GACnC,IAGkB,IAIJ,EAAAxa,KAAa,IAAIwa,EAAK,GACpC,KACiB,KAIH,EAAA0oB,QAAgB,IAAI1oB,EAAK,GACvC,KAEqB,GAIP,EAAA2oB,UAAkB,IAAI3oB,EAAK,GACzC,KAEqB,GAIP,EAAA4oB,OAAe,IAAI5oB,EAAK,GACtC,KAEqB,GAIP,EAAA6oB,OAAe,IAAI7oB,EAAK,GACtC,KAEqB,GAIP,EAAAsH,KAAa,IAAItH,EAAK,GAAD,EAAgC,GAGrD,EAAAmD,KAAa,IAAInD,EAAKA,EAAKnb,IAAIrW,KAAMwxB,EAAKnb,IAAIpR,MAAOusB,EAAKnb,IAAI/d,MAIhF,uBAQA,yBAA8B0gG,GAC5B,IAAIi7B,EAAWj7B,EAAMnhG,OACrB,IAAKo8H,EAAU,MAAO,GACtB,IAAIh5C,EAAK,IAAI5sE,MAAc4lH,GAC3B,IAAK,IAAI57H,EAAI,EAAGA,EAAI47H,IAAY57H,EAAG4iF,EAAG5iF,GAAK2gG,EAAM3gG,GAAGiB,UAAS,GAC7D,OAAO2hF,EAAGjuE,KAAK,MAIjB,MAAa42C,EAmBX,YACEtX,EACAmB,EAAgC,KAChChtC,EAA0B,KAC1B+sC,EAAwB,MArB1B,KAAAmF,GAAU,EAuBR19C,KAAKw4C,eAAiBA,GAAkC,GACxDx4C,KAAKmhD,mBAAqB,EAC1BnhD,KAAKwL,WAAaA,GAA0B+wB,EAAKsH,KACjD7jC,KAAKu4C,SAAWA,EAChBv4C,KAAKq3C,QAAUA,EACfr3C,KAAK21E,SAAU,EACf,IAAI71C,EAAYuX,EAAQxa,QAAQiD,UAC5B9zB,EAAO,IAAIuwB,EAAKuD,EAAU/0B,MAAwB,IAAlB+0B,EAAU9vB,MAA2B,IAAqB8vB,EAAUz8B,MACxGrD,KAAKgM,KAAOA,EACZA,EAAKywC,mBAAqBz8C,KAE1B,IAAIi/H,EAAiB5nF,EAAQyqE,iBACzBl/G,EAASq8H,EAAer8H,OAC5B,IAAK,IAAIQ,EAAI,EAAGA,EAAIR,EAAQQ,IAAK,CAC/B,IAAIsD,EAAUu4H,EAAe77H,GAC7B,GAAIpD,KAAK0F,OAAOgB,GAEd,OADA1G,KAAK09C,GAAKh3C,EAAQg3C,GACX19C,KAGXA,KAAK09C,GAAKrG,EAAQqqE,kBAClBrqE,EAAQyqE,iBAAiBznG,KAAKra,MAGhC,mBACE,IAAIu4C,EAAWv4C,KAAKu4C,SAChBC,EAAiBx4C,KAAKw4C,eACtB0mF,EAAoB1mF,EAAe51C,OACvC,IAAKs8H,EACH,OAAK3mF,EACEA,EAASvX,eADM,EAAAhC,WAAW2Y,KAGnC,GAAIY,EAAU,CACZ,IAAI4mF,EAAc,IAAI/lH,MAAkB,EAAI8lH,GAC5CC,EAAY,GAAK5mF,EAASvX,eAC1B,IAAK,IAAI59B,EAAI,EAAGA,EAAI87H,IAAqB97H,EACvC+7H,EAAY/7H,EAAI,GAAKo1C,EAAep1C,GAAG49B,eAEzC,OAAO,EAAAqY,WAAW8lF,GAEpB,OAAO,EAAA9lF,WAAWkX,EAAmB/X,IAGvC,oBACE,OAAOx4C,KAAKwL,WAAWw1B,eAIzB,OAAOr7B,GAGL,IAAIy5H,EAAep/H,KAAKu4C,SACpB8mF,EAAgB15H,EAAM4yC,SAC1B,GAAqB,OAAjB6mF,GACF,GAAsB,OAAlBC,IAA2BD,EAAa15H,OAAO25H,GAAgB,OAAO,OACrE,GAAIA,EACT,OAAO,EAIT,GAAIr/H,KAAK21E,SAAWhwE,EAAMgwE,QAAS,OAAO,EAG1C,IAAI2pD,EAAqBt/H,KAAKw4C,eAC1B+mF,EAAsB55H,EAAM6yC,eAC5Bm+B,EAAgB2oD,EAAmB18H,OACvC,GAAI+zE,GAAiB4oD,EAAoB38H,OAAQ,OAAO,EACxD,IAAK,IAAIQ,EAAI,EAAGA,EAAIuzE,IAAiBvzE,EACnC,IAAKk8H,EAAmBl8H,GAAGsC,OAAO65H,EAAoBn8H,IAAK,OAAO,EAIpE,OAAOpD,KAAKwL,WAAW9F,OAAOC,EAAM6F,YAItC,eAAeg/C,EAAmBg1E,GAAwB,GAGxD,IAAIJ,EAAep/H,KAAKu4C,SACpBknF,EAAiBj1E,EAAOjS,SAC5B,GAAqB,OAAjB6mF,GACF,GAAuB,OAAnBK,IAA4BL,EAAavjF,eAAe4jF,GAAiB,OAAO,OAC/E,GAAIA,EACT,OAAO,EAIT,GAAIz/H,KAAK21E,SAAWnrB,EAAOmrB,QAAS,OAAO,EAG3C,IAAI2pD,EAAqBt/H,KAAKw4C,eAC1BknF,EAAuBl1E,EAAOhS,eAC9Bm+B,EAAgB2oD,EAAmB18H,OACvC,GAAI+zE,GAAiB+oD,EAAqB98H,OAAQ,OAAO,EACzD,IAAK,IAAIQ,EAAI,EAAGA,EAAIuzE,IAAiBvzE,EAAG,CACtC,IAAIu8H,EAAoBL,EAAmBl8H,GACvCw8H,EAAsBF,EAAqBt8H,GAC/C,IAAKu8H,EAAkB9jF,eAAe+jF,GAAsB,OAAO,EAIrE,IAAIC,EAAiB7/H,KAAKwL,WACtBs0H,EAAmBt1E,EAAOh/C,WAC9B,OAAOq0H,GAAkBC,GAAoBD,EAAehkF,eAAeikF,GAI7E,SAAShB,GAAiB,GACxB,IAAI94C,EAAK,IAAI5sE,MACb4sE,EAAG3rE,KAAKykH,EAAW,MAAQ,KAC3B,IAAI3gG,EAAQ,EACRoa,EAAWv4C,KAAKu4C,SAChBA,IACFytC,EAAG3rE,KAAKykH,EAAW,QAAU,UAC7BvpH,QAAQgjC,EAASkE,oBACjBupC,EAAG3rE,KAAKk+B,EAASl0C,SAASy6H,IAC1B3gG,EAAQ,GAEV,IAAI5yB,EAAavL,KAAKw4C,eAClBm+B,EAAgBprE,EAAW3I,OAC/B,GAAI+zE,EAAe,CACjB,IAAIopD,EAAgB//H,KAAKmhD,mBACrB6+E,EAAYhgI,KAAK21E,QAAUgB,EAAgB,GAAK,EACpD,IAAK,IAAIvzE,EAAI,EAAGA,EAAIuzE,IAAiBvzE,IAAK+6B,EACpCA,GAAO6nD,EAAG3rE,KAAKykH,EAAW,MAAQ,MAClC17H,GAAK48H,GAAWh6C,EAAG3rE,KAAK,OAC5B2rE,EAAG3rE,KAAK9O,EAAWnI,GAAGiB,SAASy6H,IAC3B17H,GAAK28H,GAAiB38H,GAAK48H,GAAWh6C,EAAG3rE,KAAK,KAKtD,OAFA2rE,EAAG3rE,KAAKykH,EAAW,QAAU,SAC7B94C,EAAG3rE,KAAKra,KAAKwL,WAAWnH,SAASy6H,IAC1B94C,EAAGjuE,KAAK,IAIjB,QACE,IAAIygC,EAAiBx4C,KAAKw4C,eACtB0mF,EAAoB1mF,EAAe51C,OACnCq9H,EAAsB,IAAI7mH,MAAY8lH,GAC1C,IAAK,IAAI97H,EAAI,EAAGA,EAAI87H,IAAqB97H,EACvC68H,EAAoB78H,GAAKo1C,EAAep1C,GAE1C,OAAO,IAAIurD,EAAU3uD,KAAKq3C,QAAS4oF,EAAqBjgI,KAAKwL,WAAYxL,KAAKu4C,WAzKlF,e,yBC9qBA,SAAgB2lB,EAAQlB,EAAoBpe,GAC1C,OAAOx9B,IAAI47C,EAAOpe,IACXx9B,IAAI47C,EAAOpe,EAAS,KAAO,EAC3Bx9B,IAAI47C,EAAOpe,EAAS,KAAO,GAC3Bx9B,IAAI47C,EAAOpe,EAAS,KAAO,GAIpC,SAAgB8C,EAASxgD,EAAY87D,EAAoBpe,GACvDoe,EAAOpe,GAAc19C,EACrB87D,EAAOpe,EAAS,GAAK19C,IAAU,EAC/B87D,EAAOpe,EAAS,GAAK19C,IAAU,GAC/B87D,EAAOpe,EAAS,GAAK19C,IAAU,GAUjC,SAAgBg/H,EAAQljE,EAAoBpe,GAC1C,IAAIv0C,EAAK6zD,EAAQlB,EAAQpe,GACrBx0C,EAAK8zD,EAAQlB,EAAQpe,EAAS,GAClC,OAAOjC,QAAQtyC,EAAID,G,oNA/CrB,kBAAuB4yD,EAAoBpe,GACzC,OAAOoe,EAAOpe,IAIhB,mBAAwB19C,EAAY87D,EAAoBpe,GACtDoe,EAAOpe,GAAU19C,GAInB,mBAAwB87D,EAAoBpe,GAC1C,OAAOx9B,IAAI47C,EAAOpe,IACXx9B,IAAI47C,EAAOpe,EAAS,KAAO,GAIpC,oBAAyB19C,EAAY87D,EAAoBpe,GACvDoe,EAAOpe,GAAc19C,EACrB87D,EAAOpe,EAAS,GAAK19C,IAAU,GAIjC,YAQA,aAQA,yBAA8BA,EAAY87D,EAAoBpe,EAAaj+C,GAAiB,GAC1F+gD,EAASxgD,EAAO87D,EAAQpe,GACxB8C,EAAS/gD,GAAYO,GAAS,EAAI,GAAK,EAAG87D,EAAQpe,EAAS,IAI7D,YAOA,oBAAyB19C,EAAY87D,EAAoBpe,GACvD8C,EAASzG,QAAQ/5C,GAAQ87D,EAAQpe,GACjC8C,EAASvG,SAASj6C,GAAQ87D,EAAQpe,EAAS,IAI7C,yBAA8B19C,EAAY87D,EAAoBpe,EAAaj+C,GAAiB,GAC1F4U,OAAO5U,EAAWu6C,WAAWh6C,GAAS85C,WAAW95C,IACjDwgD,EAASzG,QAAQ/5C,GAAQ87D,EAAQpe,IAInC,mBAAwBoe,EAAoBpe,GAC1C,OAAOuhF,WAAWjiE,EAAQlB,EAAQpe,KAIpC,oBAAyB19C,EAAY87D,EAAoBpe,GACvD8C,EAAS0+E,WAAWl/H,GAAQ87D,EAAQpe,IAItC,mBAAwBoe,EAAoBpe,GAC1C,OAAOyhF,WAAWH,EAAQljE,EAAQpe,KAIpC,oBAAyB19C,EAAY87D,EAAoBpe,GACvD,IAAI0hF,EAAWC,WAAWr/H,GAC1BwgD,EAASzG,QAAQqlF,GAAWtjE,EAAQpe,GACpC8C,EAASvG,SAASmlF,GAAWtjE,EAAQpe,EAAS,K,6FCjFhD,qBAA+By4B,EAA4B,KAAMmpD,EAA6B,MAC5F,IAAIC,EAAS,IAAInlF,IACjB,GAAI+7B,EAEF,IAAK,IAAIt0B,EAAQC,SAASq0B,GAAWj0E,EAAI,EAAG6R,EAAI8tC,EAAMngD,OAAQQ,EAAI6R,IAAK7R,EAAG,CACxE,IAAI6R,EAAIyF,UAAUqoC,EAAM3/C,IACpBs9H,EAAInrH,OAAO8hE,EAASl6B,IAAIloC,IAC5BwrH,EAAOjlF,IAAIvmC,EAAGyrH,GAGlB,GAAIF,EAEF,IAAK,IAAIz9E,EAAQC,SAASw9E,GAAYp9H,EAAI,EAAG6R,EAAI8tC,EAAMngD,OAAQQ,EAAI6R,IAAK7R,EAAG,CACzE,IAAI6R,EAAIyF,UAAUqoC,EAAM3/C,IACpBs9H,EAAInrH,OAAOirH,EAAUrjF,IAAIloC,IAC7BwrH,EAAOjlF,IAAIvmC,EAAGyrH,GAGlB,OAAOD,I,2ZCnBT,YACA,YACA,WACA,YACA,YACA,a,6FCJA,sBAA2BE,GACzB,OAAY,GAALA,GAA2B,IAAhBA,EAAKA,EAAI,K,2HCE7B,eAIMC,EAAY,GAMlB,SAAgBllH,EAAc/K,GAK5B,IAJA,IAiBI6mD,EAjBA79C,EAAM,EACN2D,EAAM3M,EAAK/N,OAGR+W,EAAM,EAAI2D,GACS,IAAxB3M,EAAKwF,WAAWwD,IAChBhJ,EAAKwF,WAAWwD,EAAM,IAAMinH,GAE5BjnH,GAAO,EAUT,KAPIA,EAAM,GAAK2D,EAAM3M,EAAK/N,UACxB+N,EAAOA,EAAK1N,UAAU0W,EAAK2D,GAC3BA,GAAO3D,EACPA,EAAM,GAIDA,EAAM,EAAI2D,GAAK,CAIpB,GAHAk6C,GAAQ,EAIN7mD,EAAKwF,WAAWwD,IAAQinH,GACI,IAA5BjwH,EAAKwF,WAAWwD,EAAM,GACtB,CAGA,IADA69C,EAAQ79C,EAAM,GAAK2D,IAEjB3D,EAAM,EAAI2D,GACV3M,EAAKwF,WAAWwD,EAAM,IAAMinH,EAC5B,CACAjwH,EAAO6mD,EACH7mD,EAAK1N,UAAU,EAAG0W,GAClBhJ,EAAK1N,UAAU,EAAG0W,GAAOhJ,EAAK1N,UAAU0W,EAAM,GAClD2D,GAAO,EACP,SAKF,IADAk6C,EAAQ79C,EAAM,GAAK2D,IACsB,IAA5B3M,EAAKwF,WAAWwD,EAAM,IACjCA,EAAM,EAAI2D,GACkB,IAA5B3M,EAAKwF,WAAWwD,EAAM,IACtBhJ,EAAKwF,WAAWwD,EAAM,IAAMinH,EAC5B,CAEA,IAAIC,EAAOlnH,EACX,OAASknH,GAAQ,GACf,GAAIlwH,EAAKwF,WAAW0qH,IAASD,EAAW,CAClCjnH,EAAMknH,GAAQ,GACa,IAA7BlwH,EAAKwF,WAAW0qH,EAAO,IACM,IAA7BlwH,EAAKwF,WAAW0qH,EAAO,KAEvBlwH,EAAO6mD,EACH7mD,EAAK1N,UAAU,EAAG49H,GAClBlwH,EAAK1N,UAAU,EAAG49H,GAAQlwH,EAAK1N,UAAU0W,EAAM,GACnD2D,GAAO3D,EAAM,EAAIknH,EACjBlnH,EAAMknH,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKlnH,EAAM,IACT,GAAPA,GACoB,IAAtBhJ,EAAKwF,WAAW,IACM,IAAtBxF,EAAKwF,WAAW,IAChB,CAEAmH,GADA3M,EAAOA,EAAK1N,UAAU0W,EAAM,IACjB/W,OACX,WAKR+W,IAEF,OAAO2D,EAAM,EAAI3M,EAAO,IAc1B,SAAgBmwH,EAAQ5nH,GACtB,IAAIS,EAAMT,EAAetW,OACzB,GAAI+W,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAAIT,EAAe/C,WAAW,IAAMyqH,EAClC,OAAO1nH,EAGX,OAASS,EAAM,GACb,GAAIT,EAAe/C,WAAWwD,IAAQinH,EACpC,OAAO1nH,EAAejW,UAAU,EAAG0W,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BT,EAAwB6nH,GAClD,OAAI7nH,EAAeyC,WAAW,QACrBzC,EAEFwC,EACLolH,EAAQC,GAAU,EAAAlnH,eAAiBX,IAKvC,a,kPC3GA,SAAkB8nH,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4BtmC,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkC/T,GAChC,OAAOA,GAAQ,IAAcA,GAAQ,KAC9BA,GAAQ,IAAcA,GAAQ,IAC9BA,GAAQ,IAAeA,GAAQ,IAIxC,6BAAkC+T,GAChC,MAAMumC,EAAS,GAAJvmC,EACX,OAAOumC,GAAM,IAAcA,GAAM,KACrB,IAALvmC,GACK,IAALA,GACAA,EAAI,SAmLqB/T,EAnLY+T,GAoL9B,KAAO/T,EAAO,QACrBu6C,EAAmBv6C,EAAaw6C,IAFzC,IAAkCx6C,GA/KlC,8BAAmC+T,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMumC,EAAS,GAAJvmC,EACX,OAAOumC,GAAM,IAAcA,GAAM,KAC1BvmC,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB/T,EAzKY+T,GA0K7B,KAAO/T,EAAO,QACrBu6C,EAAmBv6C,EAAay6C,IAFzC,IAAiCz6C,GArKjC,MAAMw6C,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__911__) {\nreturn ","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  OMITTED,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  INDEXSIGNATURE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  constructor(\n    /** Kind of this node. */\n    public kind: NodeKind,\n    /** Source range. */\n    public range: Range\n  ) {}\n\n  // types\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(name, typeArguments, isNullable, range);\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    return new TypeParameterNode(name, extendsType, defaultType, range);\n  }\n\n  static createParameter(\n    parameterKind: ParameterKind,\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    range: Range\n  ): ParameterNode {\n    return new ParameterNode(parameterKind, name, type, initializer, range);\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n  }\n\n  static createComment(\n    commentKind: CommentKind,\n    text: string,\n    range: Range\n  ): CommentNode {\n    return new CommentNode(commentKind, text, range);\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    text: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    return new IdentifierExpression(text, isQuoted, range);\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    return new IdentifierExpression(\"\", false, range);\n  }\n\n  static createArrayLiteralExpression(\n    elementExpressions: Expression[],\n    range: Range\n  ): ArrayLiteralExpression {\n    return new ArrayLiteralExpression(elementExpressions, range);\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    return new AssertionExpression(assertionKind, expression, toType, range);\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    return new BinaryExpression(operator, left, right, range);\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    return new CallExpression(expression, typeArguments, args, range);\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    return new ClassExpression(declaration);\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    return new CommaExpression(expressions, range);\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    return new ConstructorExpression(range);\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    elementExpression: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    return new ElementAccessExpression(expression, elementExpression, range);\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    return new FalseExpression(range);\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    return new FloatLiteralExpression(value, range);\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    return new FunctionExpression(declaration);\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    return new InstanceOfExpression(expression, isType, range);\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    return new IntegerLiteralExpression(value, range);\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    return new NewExpression(typeName, typeArguments, args, range);\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    return new NullExpression(range);\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    return new ObjectLiteralExpression(names, values, range);\n  }\n\n  static createOmittedExpression(\n    range: Range\n  ): OmittedExpression {\n    return new OmittedExpression(range);\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    return new ParenthesizedExpression(expression, range);\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    return new PropertyAccessExpression(expression, property, range);\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    patternFlags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    return new RegexpLiteralExpression(pattern, patternFlags, range);\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    return new TernaryExpression(condition, ifThen, ifElse, range);\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    return new StringLiteralExpression(value, range);\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    return new SuperExpression(range);\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    return new ThisExpression(range);\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    return new TrueExpression(range);\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    return new UnaryPostfixExpression(operator, operand, range);\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    return new UnaryPrefixExpression(operator, operand, range);\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    return new BlockStatement(statements, range);\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    return new BreakStatement(label, range);\n  }\n\n  static createClassDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): ClassDeclaration {\n    return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    return new ContinueStatement(label, range);\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    return new DoStatement(statement, condition, range);\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    return new EmptyStatement(range);\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    values: EnumValueDeclaration[],\n    range: Range\n  ): EnumDeclaration {\n    return new EnumDeclaration(name, decorators, flags, values, range);\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    flags: CommonFlags,\n    initializer: Expression | null,\n    range: Range\n  ): EnumValueDeclaration {\n    return new EnumValueDeclaration(name, flags, initializer, range);\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    return new ExportStatement(members, path, isDeclare, range);\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    return new ExportDefaultStatement(declaration, range);\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    return new ExportImportStatement(name, externalName, range);\n  }\n\n  static createExportMember(\n    localName: IdentifierExpression,\n    exportedName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    if (!exportedName) exportedName = localName;\n    return new ExportMember(localName, exportedName, range);\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    return new ExpressionStatement(expression);\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    return new IfStatement(condition, ifTrue, ifFalse, range);\n  }\n\n  static createImportStatement(\n    declarations: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(declarations, null, path, range);\n  }\n\n  static createWildcardImportStatement(\n    namespaceName: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(null, namespaceName, path, range);\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    if (!name) name = foreignName;\n    return new ImportDeclaration(name, foreignName, range);\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): InterfaceDeclaration {\n    return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): FieldDeclaration {\n    return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    return new ForStatement(initializer, condition, incrementor, statement, range);\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    return new ForOfStatement(variable, iterable, statement, range);\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n  }\n\n  static createIndexSignature(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureNode {\n    return new IndexSignatureNode(keyType, valueType, flags, range);\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    range: Range\n  ): MethodDeclaration {\n    return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    members: Statement[],\n    range: Range\n  ): NamespaceDeclaration {\n    return new NamespaceDeclaration(name, decorators, flags, members, range);\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    return new ReturnStatement(value, range);\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    return new SwitchStatement(condition, cases, range);\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    return new SwitchCase(label, statements, range);\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    return new ThrowStatement(value, range);\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    type: TypeNode,\n    range: Range\n  ): TypeDeclaration {\n    return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n  }\n\n  static createVariableStatement(\n    decorators: DecoratorNode[] | null,\n    declarations: VariableDeclaration[],\n    range: Range\n  ): VariableStatement {\n    return new VariableStatement(decorators, declarations, range);\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): VariableDeclaration {\n    return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    return new VoidStatement(expression, range);\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    return new WhileStatement(condition, statement, range);\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  private isAccessOn(kind: NodeKind): bool {\n    let node = changetype<Node>(this);\n    if (node.kind == NodeKind.CALL) {\n      node = (<CallExpression>node).expression;\n    }\n    if (node.kind == NodeKind.PROPERTYACCESS) {\n      let target = (<PropertyAccessExpression>node).expression;\n      if (target.kind == kind) return true;\n    }\n    return false;\n  }\n\n  /** Checks if this node accesses a method or property on `this`. */\n  get isAccessOnThis(): bool {\n    return this.isAccessOn(NodeKind.THIS);\n  }\n\n  /** Checks if this node accesses a method or property on `super`. */\n  get isAccessOnSuper(): bool {\n    return this.isAccessOn(NodeKind.SUPER);\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  constructor(\n    /** Kind of the type node. */\n    kind: NodeKind,\n    /** Whether nullable or not. */\n    public isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  constructor(\n    /** Identifier of this part. */\n    public identifier: IdentifierExpression,\n    /** Next part of the type name or `null` if this is the last part. */\n    public next: TypeName | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPENAME, range);\n  }\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  constructor(\n    /** Type name. */\n    public name: TypeName,\n    /** Type argument references. */\n    public typeArguments: TypeNode[] | null,\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMEDTYPE, isNullable, range);\n  }\n\n  /** Checks if this type node has type arguments. */\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  constructor(\n    /** Function parameters. */\n    public parameters: ParameterNode[],\n    /** Return type. */\n    public returnType: TypeNode,\n    /** Explicitly provided this type, if any. */\n    public explicitThisType: NamedTypeNode | null, // can't be a function\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONTYPE, isNullable, range);\n  }\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  constructor(\n    /** Identifier reference. */\n    public name: IdentifierExpression,\n    /** Extended type reference, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Default type if omitted, if any. */\n    public defaultType: NamedTypeNode | null, // can't be a function\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEPARAMETER, range);\n  }\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  constructor(\n    /** Parameter kind. */\n    public parameterKind: ParameterKind,\n    /** Parameter name. */\n    public name: IdentifierExpression,\n    /** Parameter type. */\n    public type: TypeNode,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARAMETER, range);\n  }\n\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  constructor(\n    /** Built-in decorator kind, or custom. */\n    public decoratorKind: DecoratorKind,\n    /** Name expression. */\n    public name: Expression,\n    /** Argument expressions. */\n    public args: Expression[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DECORATOR, range);\n  }\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash line comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  constructor(\n    /** Comment kind. */\n    public commentKind: CommentKind,\n    /** Comment text. */\n    public text: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMENT, range);\n  }\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  constructor(\n    /** Textual name. */\n    public text: string,\n    /** Whether quoted or not. */\n    public isQuoted: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IDENTIFIER, range);\n  }\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  constructor(\n    /** Specific literal kind. */\n    public literalKind: LiteralKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.LITERAL, range);\n  }\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Nested element expressions. */\n    public elementExpressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.ARRAY, range);\n  }\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  /** A prefix assertion, i.e. `<T>expr`. */\n  PREFIX,\n  /** An as assertion, i.e. `expr as T`. */\n  AS,\n  /** A non-null assertion, i.e. `!expr`. */\n  NONNULL,\n  /** A const assertion, i.e. `expr as const`. */\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  constructor(\n    /** Specific kind of this assertion. */\n    public assertionKind: AssertionKind,\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Target type, if applicable. */\n    public toType: TypeNode | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ASSERTION, range);\n  }\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  constructor(\n    /** Operator token. */\n    public operator: Token,\n    /** Left-hand side expression */\n    public left: Expression,\n    /** Right-hand side expression. */\n    public right: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BINARY, range);\n  }\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    public expression: Expression,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CALL, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  constructor(\n    /** Inline class declaration. */\n    public declaration: ClassDeclaration\n  ) {\n    super(NodeKind.CLASS, declaration.range);\n  }\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  constructor(\n    /** Sequential expressions. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMA, range);\n  }\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"constructor\", false, range);\n    this.kind = NodeKind.CONSTRUCTOR;\n  }\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Element of the expression being accessed. */\n    public elementExpression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ELEMENTACCESS, range);\n  }\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Float value. */\n    public value: f64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.FLOAT, range);\n  }\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  constructor(\n    /** Inline function declaration. */\n    public declaration: FunctionDeclaration\n  ) {\n    super(NodeKind.FUNCTION, declaration.range);\n  }\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  constructor(\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Type to test for. */\n    public isType: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INSTANCEOF, range);\n  }\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Integer value. */\n    public value: i64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.INTEGER, range);\n  }\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  constructor(\n    /** Type being constructed. */\n    public typeName: TypeName,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NEW, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"null\", false, range);\n    this.kind = NodeKind.NULL;\n  }\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Field names. */\n    public names: IdentifierExpression[],\n    /** Field values. */\n    public values: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.OBJECT, range);\n  }\n}\n\n/** Represents an omitted expression, e.g. within an array literal. */\nexport class OmittedExpression extends Expression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.OMITTED, range);\n  }\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  constructor(\n    /** Expression in parenthesis. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARENTHESIZED, range);\n  }\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Property of the expression being accessed. */\n    public property: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PROPERTYACCESS, range);\n  }\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Regular expression pattern. */\n    public pattern: string,\n    /** Regular expression flags. */\n    public patternFlags: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.REGEXP, range);\n  }\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Expression executed when condition is `true`. */\n    public ifThen: Expression,\n    /** Expression executed when condition is `false`. */\n    public ifElse: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TERNARY, range);\n  }\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  constructor(\n    /** String value without quotes. */\n    public value: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.STRING, range);\n  }\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"super\", false, range);\n    this.kind = NodeKind.SUPER;\n  }\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"this\", false, range);\n    this.kind = NodeKind.THIS;\n  }\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"true\", false, range);\n    this.kind = NodeKind.TRUE;\n  }\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"false\", false, range);\n    this.kind = NodeKind.FALSE;\n  }\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  constructor(\n    /** Unary expression kind. */\n    kind: NodeKind,\n    /** Operator token. */\n    public operator: Token,\n    /** Operand expression. */\n    public operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n  }\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPREFIX, operator, operand, range);\n  }\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  constructor(\n    /** Source kind. */\n    public sourceKind: SourceKind,\n    /** Normalized path with file extension. */\n    public normalizedPath: string,\n    /** Full source text. */\n    public text: string\n  ) {\n    super(NodeKind.SOURCE, new Range(0, text.length));\n    var internalPath = mangleInternalPath(normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.range.source = this;\n  }\n\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[] = new Array();\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Remembered column number. */\n  private lineColumn: i32 = 1;\n\n  /** Determines the line number at the specified position. Starts at `1`. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. Starts at `1`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  constructor(\n    /** Declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    public name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    public decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature. */\nexport class IndexSignatureNode extends Node {\n  constructor(\n    /** Key type. */\n    public keyType: NamedTypeNode,\n    /** Value type. */\n    public valueType: TypeNode,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INDEXSIGNATURE, range);\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  constructor(\n    /** Variable-like declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    public type: TypeNode | null,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, name, decorators, flags, range);\n  }\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BLOCK, range);\n  }\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  constructor(\n    /** Target label, if any. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BREAK, range);\n  }\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    public implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    public members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Index signature, if present. */\n  indexSignature: IndexSignatureNode | null = null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  constructor(\n    /** Target label, if applicable. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CONTINUE, range);\n  }\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  constructor(\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Condition when to repeat. */\n    public condition: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DO, range);\n  }\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EMPTY, range);\n  }\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Enum value declarations. */\n    public values: EnumValueDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n  }\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  constructor(\n    /** Identifier being imported. */\n    public name: IdentifierExpression,\n    /** Identifier being exported. */\n    public externalName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTIMPORT, range);\n  }\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  constructor(\n    /** Local identifier. */\n    public localName: IdentifierExpression,\n    /** Exported identifier. */\n    public exportedName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTMEMBER, range);\n  }\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    public members: ExportMember[] | null,\n    /** Path being exported from, if applicable. */\n    public path: StringLiteralExpression | null,\n    /** Whether this is a declared export. */\n    public isDeclare: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORT, range);\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      this.internalPath = normalizedPath;\n    } else {\n      this.internalPath = null;\n    }\n  }\n\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  constructor(\n    /** Declaration being exported as default. */\n    public declaration: DeclarationStatement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTDEFAULT, range);\n  }\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  constructor(\n    /** Expression being used as a statement.*/\n    public expression: Expression\n  ) {\n    super(NodeKind.EXPRESSION, expression.range);\n  }\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    public parameterIndex: i32,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    public initializer: Statement | null,\n    /** Condition expression, if present. */\n    public condition: Expression | null,\n    /** Incrementor expression, if present. */\n    public incrementor: Expression | null,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOR, range);\n  }\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    public variable: Statement,\n    /** Iterable expression being iterated. */\n    public iterable: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOROF, range);\n  }\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    public signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    public body: Statement | null,\n    /** Arrow function kind, if applicable. */\n    public arrowKind: ArrowKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Gets if this function is generic. */\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return new FunctionDeclaration(\n      this.name,\n      this.decorators,\n      this.flags,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  constructor(\n    /** Condition. */\n    public condition: Expression,\n    /** Statement executed when condition is `true`. */\n    public ifTrue: Statement,\n    /** Statement executed when condition is `false`. */\n    public ifFalse: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IF, range);\n  }\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Identifier being imported. */\n    public foreignName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORTDECLARATION, name, null, CommonFlags.NONE, range);\n  }\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    public declarations: ImportDeclaration[] | null,\n    /** Name of the local namespace, if an asterisk import. */\n    public namespaceName: IdentifierExpression | null,\n    /** Path being imported from. */\n    public path: StringLiteralExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORT, range);\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    this.internalPath = normalizedPath;\n  }\n\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    this.kind = NodeKind.INTERFACEDECLARATION;\n  }\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    body: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, signature, body, ArrowKind.NONE, range);\n    this.kind = NodeKind.METHODDECLARATION;\n  }\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Array of namespace members. */\n    public members: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  constructor(\n    /** Value expression being returned, if present. */\n    public value: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.RETURN, range);\n  }\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  constructor(\n    /** Label expression. `null` indicates the default case. */\n    public label: Expression | null,\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCHCASE, range);\n  }\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Contained cases. */\n    public cases: SwitchCase[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCH, range);\n  }\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  constructor(\n    /** Value expression being thrown. */\n    public value: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.THROW, range);\n  }\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Exception variable name, if a `catch` clause is present. */\n    public catchVariable: IdentifierExpression | null,\n    /** Statements being executed on catch, if a `catch` clause is present. */\n    public catchStatements: Statement[] | null,\n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    public finallyStatements: Statement[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TRY, range);\n  }\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Type being aliased. */\n    public type: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  constructor(\n    /** Array of decorators. */\n    public decorators: DecoratorNode[] | null,\n    /** Array of member declarations. */\n    public declarations: VariableDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLE, range);\n  }\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  constructor(\n    /** Expression being dropped. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VOID, range);\n  }\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.WHILE, range);\n  }\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype,\n  Class\n} from \"./program\";\n\nimport {\n  findUsedLocals,\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const add = \"~lib/builtins/add\";\n  export const sub = \"~lib/builtins/sub\";\n  export const mul = \"~lib/builtins/mul\";\n  export const div = \"~lib/builtins/div\";\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_add = \"~lib/builtins/i32.add\";\n  export const i64_add = \"~lib/builtins/i64.add\";\n  export const f32_add = \"~lib/builtins/f32.add\";\n  export const f64_add = \"~lib/builtins/f64.add\";\n  export const i32_sub = \"~lib/builtins/i32.sub\";\n  export const i64_sub = \"~lib/builtins/i64.sub\";\n  export const f32_sub = \"~lib/builtins/f32.sub\";\n  export const f64_sub = \"~lib/builtins/f64.sub\";\n  export const i32_mul = \"~lib/builtins/i32.mul\";\n  export const i64_mul = \"~lib/builtins/i64.mul\";\n  export const f32_mul = \"~lib/builtins/f32.mul\";\n  export const f64_mul = \"~lib/builtins/f64.mul\";\n  export const i32_div_s = \"~lib/builtins/i32.div_s\";\n  export const i32_div_u = \"~lib/builtins/i32.div_u\";\n  export const i64_div_s = \"~lib/builtins/i64.div_s\";\n  export const i64_div_u = \"~lib/builtins/i64.div_u\";\n  export const f32_div = \"~lib/builtins/f32.div\";\n  export const f64_div = \"~lib/builtins/f64.div\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_ceil = \"~lib/builtins/v128.ceil\";\n  export const v128_floor = \"~lib/builtins/v128.floor\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n  export const v128_nearest = \"~lib/builtins/v128.nearest\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_ceil = \"~lib/builtins/f32x4.ceil\";\n  export const f32x4_floor = \"~lib/builtins/f32x4.floor\";\n  export const f32x4_trunc = \"~lib/builtins/f32x4.trunc\";\n  export const f32x4_nearest = \"~lib/builtins/f32x4.nearest\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_ceil = \"~lib/builtins/f64x2.ceil\";\n  export const f64x2_floor = \"~lib/builtins/f64x2.floor\";\n  export const f64x2_trunc = \"~lib/builtins/f64x2.trunc\";\n  export const f64x2_nearest = \"~lib/builtins/f64x2.nearest\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/memory/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/function.ts\n  export const Function = \"~lib/function/Function\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  constructor(\n    /** Compiler reference. */\n    public compiler: Compiler,\n    /** Prototype being called. */\n    public prototype: FunctionPrototype,\n    /** Provided type arguments. */\n    public typeArguments: Type[] | null,\n    /** Provided operands. */\n    public operands: Expression[],\n    /** Provided this operand, if any. */\n    public thisOperand: Expression | null,\n    /** Contextual type. */\n    public contextualType: Type,\n    /** Respective call expression. */\n    public reportNode: CallExpression,\n    /** Whether originating from inline assembly. */\n    public contextIsExact: bool\n  ) {}\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n/** Function builtins map. */\nexport const function_builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFloatValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isBooleanValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isSignedIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isAssignableTo(compiler.program.stringInstance)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.extends(compiler.program.arrayPrototype)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isArrayLike\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFunction ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isNullableReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element !== null ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classReference = type.getClassOrWrapper(compiler.program);\n  if (!classReference) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.isIntegerValue && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.isIntegerValue && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classReference.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classReference.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classReference.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.isInternalReference) {\n    let classReference = resultType.getClass();\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      assert(resultType.getSignature());\n      value = \"Function\";\n    }\n  } else {\n    value = resultType.toString();\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  let signatureReference = type.getSignature();\n  if (signatureReference) {\n    return module.i32(signatureReference.id);\n  }\n  let classReference = type.getClassOrWrapper(compiler.program);\n  if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n    return module.i32(classReference.id);\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8: // not wrapped\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value << (shift & mask)) | (value >>> ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_tee(temp1.index, arg0),\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1),\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_get(temp1.index, NativeType.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, NativeType.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value >>> (shift & mask)) | (value << ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_tee(temp1.index, arg0),\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1),\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_get(temp1.index, NativeType.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, NativeType.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.isSignedIntegerValue,\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// add<T?>(left: T, right: T) -> T\nfunction builtin_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeAdd(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"add\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.add, builtin_add);\n\n// sub<T?>(left: T, right: T) -> T\nfunction builtin_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeSub(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"sub\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sub, builtin_sub);\n\n// mul<T?>(left: T, right: T) -> T\nfunction builtin_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeMul(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"mul\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.mul, builtin_mul);\n\n// div<T?>(left: T, right: T) -> T\nfunction builtin_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeDiv(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"div\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.div, builtin_div);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue|| // float to int\n      inType.size < type.size  // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    arg2 = compiler.convertExpression(arg2, inType, type, false, operands[2]);\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType, // ^\n    operands[2]\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.memory_size();\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  return module.memory_grow(compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.CONV_IMPLICIT));\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.isValue) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = compiler.compileExpression(elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType, elementExpression);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addAlignedMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addAlignedMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>NativeType.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF: return module.if(module.ref_is_null(arg0), abort);\n\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF: {\n        let temp = flow.getTempLocal(type);\n        let ret = module.if(\n          module.ref_is_null(\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"assert\", compiler.currentType.toString()\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// call_indirect<T?>(index: u32, ...args: *[]) -> T\nfunction builtin_call_indirect(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, i32.MAX_VALUE)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var returnType: Type;\n  if (typeArguments) {\n    assert(typeArguments.length);\n    returnType = typeArguments[0];\n  } else {\n    returnType = ctx.contextualType;\n  }\n  var indexArg = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length - 1;\n  var operandExprs = new Array<ExpressionRef>(numOperands);\n  var nativeParamTypes = new Array<NativeType>(numOperands);\n  for (let i = 0; i < numOperands; ++i) {\n    operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.auto);\n    nativeParamTypes[i] = compiler.currentType.toNativeType();\n  }\n  compiler.currentType = returnType;\n  return module.call_indirect(indexArg, operandExprs, createType(nativeParamTypes), returnType.toNativeType());\n}\nbuiltins.set(BuiltinNames.call_indirect, builtin_call_indirect);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.getClass();\n  if (!classInstance) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  var ctor = compiler.ensureConstructor(classInstance, ctx.reportNode);\n  compiler.checkFieldInitialization(classInstance, ctx.reportNode);\n  return compiler.compileInstantiate(ctor, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Function builtins ======================================================================\n\n// Function<T>#call(thisArg: thisof<T> | null, ...args: *[]) -> returnof<T>\nfunction builtin_function_call(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var parent = ctx.prototype.parent;\n  assert(parent.kind == ElementKind.CLASS);\n  var classInstance = <Class>parent;\n  assert(classInstance.prototype == compiler.program.functionPrototype);\n  var typeArguments = assert(classInstance.typeArguments);\n  assert(typeArguments.length == 1);\n  var ftype = typeArguments[0];\n  var signature = assert(ftype.getSignature());\n  var returnType = signature.returnType;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsOptional(ctx, 1 + signature.requiredParameters, 1 + signature.parameterTypes.length)\n  ) {\n    compiler.currentType = returnType;\n    return compiler.module.unreachable();\n  }\n  var indexArg = compiler.compileExpression(assert(ctx.thisOperand), ftype, Constraints.CONV_IMPLICIT);\n  var thisOperand = assert(ctx.operands.shift());\n  var thisType = signature.thisType;\n  var thisArg: usize = 0;\n  if (thisType) {\n    thisArg = compiler.compileExpression(thisOperand, thisType, Constraints.CONV_IMPLICIT);\n  } else if (thisOperand.kind != NodeKind.NULL) {\n    compiler.error(\n      DiagnosticCode._this_cannot_be_referenced_in_current_location,\n      thisOperand.range\n    );\n    return compiler.module.unreachable();\n  }\n  return compiler.compileCallIndirect(signature, indexArg, ctx.operands, ctx.reportNode, thisArg, ctx.contextualType == Type.void);\n}\nfunction_builtins.set(\"call\", builtin_function_call);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (type.isValue) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.ceil<T!>(a: v128) -> v128\nfunction builtin_v128_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ceil, builtin_v128_ceil);\n\n// v128.floor<T!>(a: v128) -> v128\nfunction builtin_v128_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_floor, builtin_v128_floor);\n\n// v128.trunc<T!>(a: v128) -> v128\nfunction builtin_v128_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc, builtin_v128_trunc);\n\n// v128.nearest<T!>(a: v128) -> v128\nfunction builtin_v128_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_nearest, builtin_v128_nearest);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.add -> add<i32>\nfunction builtin_i32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_add, builtin_i32_add);\n\n// i64.add -> add<i64>\nfunction builtin_i64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_add, builtin_i64_add);\n\n// f32.add -> add<f32>\nfunction builtin_f32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32_add, builtin_f32_add);\n\n// f64.add -> add<f64>\nfunction builtin_f64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64_add, builtin_f64_add);\n\n// i32.sub -> sub<i32>\nfunction builtin_i32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_sub, builtin_i32_sub);\n\n// i64.sub -> sub<i64>\nfunction builtin_i64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_sub, builtin_i64_sub);\n\n// f32.sub -> sub<f32>\nfunction builtin_f32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sub, builtin_f32_sub);\n\n// f64.sub -> sub<f64>\nfunction builtin_f64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sub, builtin_f64_sub);\n\n// i32.mul -> mul<i32>\nfunction builtin_i32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32_mul, builtin_i32_mul);\n\n// i64.mul -> mul<i64>\nfunction builtin_i64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64_mul, builtin_i64_mul);\n\n// f32.mul -> mul<f32>\nfunction builtin_f32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32_mul, builtin_f32_mul);\n\n// f64.mul -> mul<f64>\nfunction builtin_f64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64_mul, builtin_f64_mul);\n\n// i32.div_s -> div<i32>\nfunction builtin_i32_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_s, builtin_i32_div_s);\n\n// i32.div_u -> div<u32>\nfunction builtin_i32_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.u32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_u, builtin_i32_div_u);\n\n// i64.div_s -> div_s<i64>\nfunction builtin_i64_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_s, builtin_i64_div_s);\n\n// i64.div_u -> div_u<u64>\nfunction builtin_i64_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.u64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_u, builtin_i64_div_u);\n\n// f32.div -> div<f32>\nfunction builtin_f32_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32_div, builtin_f32_div);\n\n// f64.div -> div<f64>\nfunction builtin_f64_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64_div, builtin_f64_div);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.ceil -> v128.ceil<f32>\nfunction builtin_f32x4_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ceil, builtin_f32x4_ceil);\n\n// f32x4.floor -> v128.floor<f32>\nfunction builtin_f32x4_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_floor, builtin_f32x4_floor);\n\n// f32x4.trunc -> v128.trunc<f32>\nfunction builtin_f32x4_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_trunc, builtin_f32x4_trunc);\n\n// f32x4.nearest -> v128.nearest<f32>\nfunction builtin_f32x4_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_nearest, builtin_f32x4_nearest);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.ceil -> v128.ceil<f64>\nfunction builtin_f64x2_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ceil, builtin_f64x2_ceil);\n\n// f64x2.floor -> v128.floor<f64>\nfunction builtin_f64x2_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_floor, builtin_f64x2_floor);\n\n// f64x2.trunc -> v128.trunc<f64>\nfunction builtin_f64x2_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_trunc, builtin_f64x2_trunc);\n\n// f64x2.nearest -> v128.nearest<f64>\nfunction builtin_f64x2_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_nearest, builtin_f64x2_nearest);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classReference = globalType.getClass();\n    if (\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Ensures that the visitor function of the specified class is compiled. */\nfunction ensureVisitMembersOf(compiler: Compiler, instance: Class): void {\n  assert(instance.type.isManaged);\n  if (instance.visitRef) return;\n\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var visitInstance = assert(program.visitInstance);\n  var body = new Array<ExpressionRef>();\n\n  // If the class has a base class, call its visitor first\n  var base = instance.base;\n  if (base) {\n    body.push(\n      module.call(base.internalName + \"~visit\", [\n        module.local_get(0, nativeSizeType), // this\n        module.local_get(1, NativeType.I32)  // cookie\n      ], NativeType.None)\n    );\n  }\n\n  // Some standard library components provide a custom visitor implementation,\n  // for example to visit all members of a collection, e.g. arrays and maps.\n  var hasVisitImpl = false;\n  if (instance.isDeclaredInLibrary) {\n    let visitPrototype = instance.lookupInSelf(\"__visit\");\n    if (visitPrototype) {\n      assert(visitPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitInstance = program.resolver.resolveFunction(<FunctionPrototype>visitPrototype, null);\n      if (!visitInstance || !compiler.compileFunction(visitInstance)) {\n        body.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSignature = visitInstance.signature;\n        let visitThisType = assert(visitSignature.thisType);\n        assert(\n          visitSignature.parameterTypes.length == 1 &&\n          visitSignature.parameterTypes[0] == Type.u32 &&\n          visitSignature.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        body.push(\n          module.call(visitInstance.internalName, [\n            module.local_get(0, nativeSizeType), // this\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n      hasVisitImpl = true;\n    }\n  }\n\n  // Otherwise, if there is no custom visitor, generate a visitor function\n  // according to class layout, visiting all _own_ managed members.\n  var needsTempValue = false;\n  if (!hasVisitImpl) {\n    let members = instance.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n        let member = unchecked(_values[j]);\n        if (member.kind == ElementKind.FIELD) {\n          if ((<Field>member).parent === instance) {\n            let fieldType = (<Field>member).type;\n            if (fieldType.isManaged) {\n              let fieldOffset = (<Field>member).memoryOffset;\n              assert(fieldOffset >= 0);\n              needsTempValue = true;\n              body.push(\n                // if ($2 = value) __visit($2, $1)\n                module.if(\n                  module.local_tee(2,\n                    module.load(nativeSizeSize, false,\n                      module.local_get(0, nativeSizeType),\n                      nativeSizeType, fieldOffset\n                    )\n                  ),\n                  module.call(visitInstance.internalName, [\n                    module.local_get(2, nativeSizeType), // value\n                    module.local_get(1, NativeType.I32)  // cookie\n                  ], NativeType.None)\n                )\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Create the visitor function\n  instance.visitRef = module.addFunction(instance.internalName + \"~visit\",\n    createType([nativeSizeType, NativeType.I32]),\n    NativeType.None,\n    needsTempValue ? [ nativeSizeType ] : null,\n    module.flatten(body, NativeType.None)\n  );\n\n  // And make sure the base visitor function exists\n  if (base) ensureVisitMembersOf(compiler, base);\n}\n\n/** Compiles the `__visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  compiler.compileFunction(visitInstance, true); // is lazy, make sure it is compiled\n\n  // Prepare a mapping of class names to visitor calls. Each name corresponds to\n  // the respective sequential (0..N) class id.\n  var names = new Array<string>();\n  var cases = new Array<ExpressionRef>();\n  var nextId = 0;\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    assert(instanceId == nextId++);\n    let instance = assert(managedClasses.get(instanceId));\n    names[i] = instance.internalName;\n    cases[i] = module.block(null, [\n      module.call(instance.internalName + \"~visit\", [\n        module.local_get(0, nativeSizeType), // this\n        module.local_get(1, NativeType.I32)  // cookie\n      ], NativeType.None),\n      module.return()\n    ], NativeType.None);\n    ensureVisitMembersOf(compiler, instance);\n  }\n\n  // Make a br_table of the mapping, calling visitor functions by unique class id\n  var current = module.block(names[0], [\n    module.switch(names, \"invalid\",\n      // load<u32>(changetype<usize>(this) - 8)\n      module.load(4, false,\n        nativeSizeType == NativeType.I64\n          ? module.binary(BinaryOp.SubI64,\n              module.local_get(0, nativeSizeType),\n              module.i64(8)\n            )\n          : module.binary(BinaryOp.SubI32,\n              module.local_get(0, nativeSizeType),\n              module.i32(8) // rtId is at -8\n            ),\n        NativeType.I32, 0\n      )\n    )\n  ], NativeType.None);\n\n  // Wrap blocks in order\n  for (let i = 0, k = names.length - 1; i < k; ++i) {\n    current = module.block(names[i + 1], [\n      current,\n      cases[i]\n    ], NativeType.None);\n  }\n\n  // Wrap the last id in an 'invalid' block to break out of on invalid ids\n  current = module.block(\"invalid\", [\n    current,\n    cases[names.length - 1]\n  ], NativeType.None);\n\n  // Add the function, executing an unreachable if breaking to 'invalid'\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ nativeSizeType, NativeType.I32 ]), // this, cookie\n    NativeType.None, // => void\n    null,\n    module.flatten([\n      current,\n      module.unreachable()\n    ])\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addAlignedMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.isIntegerValue) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITELY_ASSIGNED = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Did error. */\n  ERRORED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a stub. */\n  STUB = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 28,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const funcref = \"funcref\";\n  export const externref = \"externref\";\n  export const exnref = \"exnref\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  export const ASC_FEATURE_GC = \"ASC_FEATURE_GC\";\n  export const ASC_FEATURE_MEMORY64 = \"ASC_FEATURE_MEMORY64\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Funcref = \"Funcref\";\n  export const Externref = \"Externref\";\n  export const Exnref = \"Exnref\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const Function = \"Function\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const ipow32 = \"ipow32\";\n  export const ipow64 = \"ipow64\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const new_ = \"__new\";\n  export const renew = \"__renew\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const newBuffer = \"__newBuffer\";\n  export const newArray = \"__newArray\";\n  export const BLOCK = \"~lib/rt/common/BLOCK\";\n  export const OBJECT = \"~lib/rt/common/OBJECT\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  function_builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChildAt,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  FieldFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  uniqueMap,\n  isPowerOf2,\n  v128_zero,\n  readI32\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5,\n  /** Indicates that the value will become `this` of a property access or instance call. */\n  IS_THIS = 1 << 6\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 4\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled functions. */\n  lazyFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n  /** Elements currently undergoing compilation. */\n  pendingElements: Set<Element> = new Set();\n  /** Elements, that are module exports, already processed */\n  doneModuleExports: Set<Element> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create();\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    if (options.hasFeature(Feature.GC)) featureFlags |= FeatureFlags.GC;\n    if (options.hasFeature(Feature.MEMORY64)) featureFlags |= FeatureFlags.Memory64;\n    module.setFeatures(featureFlags);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = new Array<ExpressionRef>();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // obtain the main start function\n    var startFunctionInstance = this.currentFlow.actualFunction;\n    assert(startFunctionInstance.internalName == BuiltinNames.start);\n    var startFunctionBody = this.currentBody;\n    assert(startFunctionBody.length == 0);\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy functions\n    var lazyFunctions = this.lazyFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // NOTE: no more element compiles from here. may go to the start function!\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.global_set(BuiltinNames.started, module.i32(1))\n        );\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return()\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // set up virtual lookup tables\n    var functionTable = this.functionTable;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // incl. varargs\n        this.finalizeVirtualStub(instance);\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualCalls = this.virtualCalls;\n    while (virtualCalls.size) {\n      // finalizing a stub may discover more virtual calls, so do this in a loop\n      for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        this.finalizeVirtualStub(instance);\n        virtualCalls.delete(instance);\n      }\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var initialPages: u32 = 0;\n    if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n    var isSharedMemory = false;\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      this.memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.memory : null,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n        module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>element;\n        let functionInstances = functionPrototype.instances;\n        if (functionInstances !== null && functionInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (functionPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            functionPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classPrototype = <ClassPrototype>element;\n        let classInstances = classPrototype.instances;\n        if (classInstances !== null && classInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (classPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            classPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (propertyInstance) this.ensureModuleExport(name, propertyInstance, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          if (element.is(CommonFlags.COMPILED)) this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.ensureArgumentsLength();\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.ensureModuleExport(GETTER_PREFIX + name, getterInstance, prefix);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.ensureModuleExport(SETTER_PREFIX + name, setterInstance, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n\n          if (!this.doneModuleExports.has(element)) {\n            module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n            this.doneModuleExports.add(element);\n          }\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (functionInstance) this.compileFunction(functionInstance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let classInstance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (classInstance) this.compileClass(classInstance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n        if (propertyInstance) this.compileProperty(propertyInstance);\n        break;\n      }\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return !global.is(CommonFlags.ERRORED);\n    global.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(global);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) {\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        global.set(CommonFlags.ERRORED);\n        pendingElements.delete(global);\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      pendingElements.delete(global);\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        pendingElements.delete(global);\n        return true;\n      }\n\n      // Importing mutable globals is not supported in the MVP\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        global.declaration.range, \"mutable-globals\"\n      );\n      global.set(CommonFlags.ERRORED);\n      pendingElements.delete(global);\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n          if (this.skippedAutoreleases.has(initExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              global.set(CommonFlags.ERRORED);\n              pendingElements.delete(global);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type, global.declaration);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type, global.declaration));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, type);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    pendingElements.delete(global);\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return !element.is(CommonFlags.ERRORED);\n    element.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(element);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, Type.i32, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    pendingElements.delete(element);\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return !instance.is(CommonFlags.ERRORED);\n\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyFunctions.add(instance);\n        return true;\n      }\n    }\n\n    instance.set(CommonFlags.COMPILED);\n    var pendingElements = this.pendingElements;\n    pendingElements.add(instance);\n\n    var previousType = this.currentType;\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // In normal instance functions, `this` is effectively a constant\n        // retained elsewhere so does not need to be retained.\n        if (instance.is(CommonFlags.CONSTRUCTOR)) {\n          // Constructors, however, can allocate their own memory, and as such\n          // must refcount the allocation in case something else is `return`ed.\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType()),\n                type\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      let body: ExpressionRef;\n      if (this.compileFunctionBody(instance, stmts)) {\n        if (!flow.is(FlowFlags.TERMINATES)) {\n          this.performAutoreleases(flow, stmts);\n          this.finishAutoreleases(flow, stmts);\n        }\n        body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      } else {\n        body = module.unreachable();\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n      instance.set(CommonFlags.ERRORED);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    pendingElements.delete(instance);\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.signature.thisType\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          module.if(\n            module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n              module.local_get(thisLocal.index, nativeSizeType)\n            ),\n            module.local_set(thisLocal.index,\n              this.makeRetain(\n                this.makeAllocation(classInstance),\n                classInstance.type\n              )\n            )\n          )\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n        if (flow.isInline) {\n          let firstStmt = stmts[0]; // `this` alias assignment\n          assert(getExpressionId(firstStmt) == ExpressionId.LocalSet);\n          assert(getLocalSetIndex(firstStmt) == thisLocal.index);\n          allocStmts.unshift(firstStmt);\n          stmts[0] = module.flatten(allocStmts, NativeType.None);\n        } else {\n          stmts.unshift(\n            module.flatten(allocStmts, NativeType.None)\n          );\n        }\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n              instance.identifierNode.range\n            );\n          }\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        assert(flow.isAnyLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED));\n        flow.unsetLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED); // undo\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    this.checkFieldInitialization(instance);\n\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.isSignedIntegerValue,\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr, type);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType), type)\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType), type)\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addAlignedMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Adds a static memory segment representing a runtime object. */\n  addRuntimeMemorySegment(buffer: Uint8Array): MemorySegment {\n    var memoryOffset = this.program.computeBlockStart64(this.memoryOffset);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var totalOverhead = program.totalOverhead;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let len = stringValue.length;\n      let buf = stringInstance.createBuffer(len << 1);\n      for (let i = 0; i < len; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, totalOverhead + (i << 1));\n      }\n      stringSegment = this.addRuntimeMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var ptr = i64_add(stringSegment.offset, i64_new(totalOverhead));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ptr), i64_high(ptr));\n    } else {\n      assert(i64_is_u32(ptr));\n      return this.module.i32(i64_low(ptr));\n    }\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var nativeType = elementType.toNativeType();\n    switch (<u32>nativeType) {\n      case <u32>NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var arrayBufferInstance = program.arrayBufferInstance;\n    var buf = arrayBufferInstance.createBuffer(values.length * elementType.byteSize);\n    this.program.OBJECTInstance.writeField(\"rtId\", id, buf, 0); // use specified rtId\n    this.writeStaticBuffer(buf, program.totalOverhead, elementType, values);\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var bufferLength = readI32(bufferSegment.buffer, program.OBJECTInstance.offsetof(\"rtSize\"));\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n    var bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n\n    var buf = arrayInstance.createBuffer();\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf));\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a runtime counterpart of the specified function exists and returns its address. */\n  ensureRuntimeFunction(instance: Function): i64 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var program = this.program;\n    var memorySegment = instance.memorySegment;\n    if (!memorySegment) {\n\n      // Add to the function table\n      let functionTable = this.functionTable;\n      let tableBase = this.options.tableBase;\n      if (!tableBase) tableBase = 1; // leave first elem blank\n      let index = tableBase + functionTable.length;\n      functionTable.push(instance);\n\n      // Create runtime function\n      let rtInstance = assert(this.resolver.resolveClass(program.functionPrototype, [ instance.type ]));\n      let buf = rtInstance.createBuffer();\n      assert(rtInstance.writeField(\"_index\", index, buf));\n      assert(rtInstance.writeField(\"_env\", 0, buf));\n      instance.memorySegment = memorySegment = this.addRuntimeMemorySegment(buf);\n    }\n    return i64_add(memorySegment.offset, i64_new(program.totalOverhead));\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATURE:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          statement.range,\n          \"Inner type alias\"\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChildAt(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        labelNode.range,\n        \"Break label\"\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        label.range,\n        \"Continue label\"\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType,\n        statement.condition\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations. Note that\n        // this may be necessary multiple times where locals depend on each other.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType,\n        condition\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations. Note that this\n      // may be necessary multiple times where locals depend on each other.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Iterators\"\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n      ? \"case\" + defaultIndex.toString()\n      : \"break\"\n    ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).args;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    // generates dead code (after unreachable) but still updates state\n    var dropped = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, dropped);\n    this.finishAutoreleases(flow, dropped);\n    flow.freeScopedLocals();\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Exceptions\"\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          let pendingElements = this.pendingElements;\n          let dummy = flow.addScopedDummyLocal(name, type); // pending dummy\n          pendingElements.add(dummy);\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n          pendingElements.delete(dummy);\n          flow.freeScopedDummyLocal(name);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let pendingElements = this.pendingElements;\n        let temp = flow.addScopedDummyLocal(name, Type.auto); // pending dummy\n        pendingElements.add(temp);\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        pendingElements.delete(temp);\n        flow.freeScopedDummyLocal(name);\n\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp; // always use precomputed initExpr\n            let local: Local | null = null;\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>NativeType.I32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.I64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.F32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>NativeType.F64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n            }\n            if (local) {\n              // Add as a virtual local that doesn't actually exist in WebAssembly\n              let scopedLocals = flow.scopedLocals;\n              if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n              else if (scopedLocals.has(name)) {\n                let existing = assert(scopedLocals.get(name));\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  declaration.name.range,\n                  existing.declaration.name.range,\n                  name\n                );\n                return this.module.unreachable();\n              }\n              scopedLocals.set(name, local);\n              isStatic = true;\n            }\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr, type)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.isShortIntegerValue) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type, declaration)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.isShortIntegerValue) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations. Note that\n      // this may be necessary multiple times where locals depend on each other.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.isIntegerValue &&\n      contextualType.isIntegerValue &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, expression);\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, expression);\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr, returnType);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  /** Converts an expression's result from one type to another. */\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit. */\n    explicit: bool,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.isReference || toType.isReference) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.isNullableReference && !toType.isNullableReference) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(toType.isExternalReference || fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        if (toType.isExternalReference) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            reportNode.range,\n            \"ref.cast\"\n          );\n          this.currentType = toType;\n          return module.unreachable();\n        }\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n    assert(!fromType.isReference && !toType.isReference);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.isFloatValue) {\n\n      // float to float\n      if (toType.isFloatValue) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.isIntegerValue) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f32, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f64, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.isIntegerValue && toType.isFloatValue) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.isLongIntegerValue) {\n\n        // i64 to i32 or smaller\n        if (toType.isBooleanValue) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n        } else if (!toType.isLongIntegerValue) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.isLongIntegerValue) {\n        expr = module.unary(\n          fromType.isSignedIntegerValue ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.isShortIntegerValue) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.isVaryingIntegerValue && !toType.isVaryingIntegerValue) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Const assertion\"\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n  private i32PowInstance: Function | null = null;\n  private i64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EQUALS_EQUALS) { // can't overload '==='\n          let classReference = leftType.getClassOrWrapper(this.program);\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeEq(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS) { // can't overload '!=='\n          let classReference = leftType.getClass();\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeNe(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"+\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAdd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeSub(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"*\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeMul(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POW);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"**\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"**\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makePow(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"/\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeDiv(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.REM);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"%\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeRem(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShl(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShr(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShru(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAnd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeOr(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeXor(leftExpr, rightExpr, commonType);\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            this.makeIsTrueish(rightExpr, rightType, right),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType, left),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType, left),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType, right)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType, left),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType, left),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  makeLt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeLe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeI64\n            : BinaryOp.LeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeU64\n            : BinaryOp.LeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeI64\n            : BinaryOp.GeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeU64\n            : BinaryOp.GeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeEq(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.EqI64\n            : BinaryOp.EqI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AllTrueI8x16,\n          module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeNe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AnyTrueI8x16,\n          module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAdd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AddI64\n            : BinaryOp.AddI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeSub(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeMul(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.MulI64\n            : BinaryOp.MulI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makePow(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    let module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: {\n        return module.select(\n          module.i32(1),\n          module.binary(BinaryOp.EqI32, rightExpr, module.i32(0)),\n          leftExpr\n        );\n      }\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let instance = this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        let expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n        if (type.size < 32) {\n          // TODO: this is necessary because i32PowInstance is generic, and deals with 32-bit integers,\n          // so its flow does not indicate whether returned SMIs are wrapped. worth to avoid?\n          expr = this.ensureSmallIntegerWrap(expr, type);\n        }\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let instance = this.i64PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow64);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow64\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let isWasm64 = this.options.isWasm64;\n        let instance = isWasm64 ? this.i64PowInstance : this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(isWasm64 ? CommonNames.ipow64 : CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, isWasm64 ? \"ipow64\" : \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          if (isWasm64) {\n            this.i64PowInstance = instance;\n          } else {\n            this.i32PowInstance = instance;\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      // Math.pow otherwise (result is f64)\n      case TypeKind.F64: {\n        let instance = this.f64PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeDiv(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivI64\n            : BinaryOp.DivI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivU64\n            : BinaryOp.DivU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeRem(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemI64\n            : BinaryOp.RemI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemU64\n            : BinaryOp.RemU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F64: {\n        let instance = this.f64ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShl(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the RHS, but only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr << (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShlI32,\n          leftExpr,\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShlI64\n            : BinaryOp.ShlI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits,\n    // and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        // leftExpr >> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrI32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrI64\n            : BinaryOp.ShrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShru(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAnd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AndI64\n            : BinaryOp.AndI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeOr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.OrI64\n            : BinaryOp.OrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeXor(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.XorI64\n            : BinaryOp.XorI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(\n    expression: Expression,\n    valueExpression: Expression,\n    contextualType: Type\n  ): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        if (this.pendingElements.has(target)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            target.internalName\n          );\n          return this.module.unreachable();\n        }\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        let isConstructor = flow.actualFunction.is(CommonFlags.CONSTRUCTOR);\n\n        // Cannot assign to readonly fields except in constructors if there's no initializer\n        if (fieldInstance.is(CommonFlags.READONLY)) {\n          if (!isConstructor || initializerNode !== null) {\n            this.error(\n              DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n              valueExpression.range, fieldInstance.internalName\n            );\n            return module.unreachable();\n          }\n        }\n\n        // Mark initialized fields in constructors\n        thisExpression = assert(thisExpression);\n        if (isConstructor && thisExpression.kind == NodeKind.THIS) {\n          flow.setThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED);\n        }\n\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          valueType,\n          this.compileExpression(\n            thisExpression,\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, nativeReturnType)\n            ], valueExpression)\n          ], nativeReturnType);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toNativeType());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(\n          assert(thisExpression),\n          classInstance.type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.isNullableReference) {\n      if (!valueType.isNullableReference || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          valueType,\n          module.local_get(localIndex, type.toNativeType()),\n          type,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr, valueType);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.isShortIntegerValue) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          valueType,\n          module.global_get(global.internalName, nativeType),\n          type,\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              valueType,\n              module.load(fieldType.byteSize, fieldType.isSignedIntegerValue,\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              fieldType,\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            valueType,\n            module.load(fieldType.byteSize, fieldType.isSignedIntegerValue,\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            fieldType,\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      let baseCtorInstance = this.ensureConstructor(baseClassInstance, expression);\n      this.checkFieldInitialization(baseClassInstance, expression);\n      let superCall = this.compileCallDirect(\n        baseCtorInstance,\n        expression.args,\n        expression,\n        module.local_get(thisLocal.index, nativeSizeType),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(superCall)); // guaranteed\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.args,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          indexArg = module.load(4, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n            ),\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>target;\n        let typeArguments = classInstance.getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          signature = ftype.getSignature();\n          indexArg = this.compileExpression(expression.expression, ftype, Constraints.CONV_IMPLICIT);\n          break;\n        }\n        // fall-through\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: bootstrap can't see this yet\n      indexArg,\n      expression.args,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        uniqueMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var callee = expression.expression;\n    var ctx = new BuiltinContext(\n      this,\n      prototype,\n      typeArguments,\n      expression.args,\n      callee.kind == NodeKind.PROPERTYACCESS\n        ? (<PropertyAccessExpression>callee).expression\n        : null,\n      contextualType,\n      expression,\n      false\n    );\n    // global builtins\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    // class builtins\n    var parent = prototype.parent;\n    if (parent.kind == ElementKind.CLASS) {\n      let classPrototype = (<Class>parent).prototype;\n      if (classPrototype == this.program.functionPrototype) {\n        let methodName = prototype.name;\n        if (function_builtins.has(methodName)) {\n          let fn = assert(function_builtins.get(methodName));\n          return fn(ctx);\n        }\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        reportNode.range,\n        \"Rest parameters\"\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // handle call on `this` in constructors\n    let actualFunction = this.currentFlow.actualFunction;\n    if (actualFunction.is(CommonFlags.CONSTRUCTOR) && reportNode.isAccessOnThis) {\n      let parent = actualFunction.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitialization(<Class>parent, reportNode);\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE) && (!instance.is(CommonFlags.VIRTUAL) || reportNode.isAccessOnSuper)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr, paramType);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // In normal instance functions, `this` is effectively a constant\n      // retained elsewhere so does not need to be retained.\n      if (instance.is(CommonFlags.CONSTRUCTOR)) {\n        // Constructors, however, can allocate their own memory, and as such\n        // must refcount the allocation in case something else is `return`ed.\n        flow.setLocalFlag(thisLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, initType);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // If a constructor, perform field init checks on its flow directly\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitializationInFlow(<Class>parent, flow);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n    }\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(original.internalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      typesToNativeTypes(stub.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      null,\n      module.unreachable()\n    );\n    this.virtualCalls.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    // Wouldn't be here if there wasn't at least one overload\n    var overloadPrototypes = assert(instance.prototype.overloads);\n\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, nativeSizeType),\n          nativeSizeType == NativeType.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        NativeType.I32\n      )\n    );\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved and compiled as\n    // we are going to call them conditionally based on this's class id.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (classInstances) {\n        for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n          let classInstance = _values[j];\n          let overloadInstance: Function | null;\n          if (isProperty) {\n            let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n            assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n            let boundPropertyInstance = this.resolver.resolveProperty(<PropertyPrototype>boundProperty);\n            if (!boundPropertyInstance) continue;\n            if (instance.is(CommonFlags.GET)) {\n              overloadInstance = boundPropertyInstance.getterInstance;\n            } else {\n              assert(instance.is(CommonFlags.SET));\n              overloadInstance = boundPropertyInstance.setterInstance;\n            }\n          } else {\n            let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n            assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            overloadInstance = this.resolver.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n          }\n          if (!overloadInstance || !this.compileFunction(overloadInstance)) continue;\n          let overloadType = overloadInstance.type;\n          let originalType = instance.type;\n          if (!overloadType.isAssignableTo(originalType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n            );\n            continue;\n          }\n          // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n          let overloadSignature = overloadInstance.signature;\n          let overloadParameterTypes = overloadSignature.parameterTypes;\n          let overloadNumParameters = overloadParameterTypes.length;\n          let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n          paramExprs[0] = module.local_get(0, nativeSizeType); // this\n          for (let n = 1; n <= numParameters; ++n) {\n            paramExprs[n] = module.local_get(n, parameterTypes[n - 1].toNativeType());\n          }\n          let needsVarargsStub = false;\n          for (let n = numParameters; n < overloadNumParameters; ++n) {\n            // TODO: inline constant initializers and skip varargs stub\n            paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n], overloadInstance.declaration);\n            needsVarargsStub = true;\n          }\n          let calledName = needsVarargsStub\n            ? this.ensureVarargsStub(overloadInstance).internalName\n            : overloadInstance.internalName;\n          let nativeReturnType = overloadSignature.returnType.toNativeType();\n          let stmts = new Array<ExpressionRef>();\n          if (needsVarargsStub) {\n            this.ensureArgumentsLength();\n            // Safe to prepend since paramExprs are local.get's\n            stmts.push(module.global_set(BuiltinNames.argumentsLength, module.i32(numParameters)));\n          }\n          if (returnType == Type.void) {\n            stmts.push(\n              module.call(calledName, paramExprs, nativeReturnType)\n            );\n            stmts.push(\n              module.return()\n            );\n          } else {\n            stmts.push(\n              module.return(\n                module.call(calledName, paramExprs, nativeReturnType)\n              )\n            );\n          }\n          builder.addCase(classInstance.id, stmts);\n          // Also alias each extendee inheriting this exact overload\n          let extendees = classInstance.getAllExtendees(\n            isProperty\n              ? unboundOverloadParent.name\n              : instance.prototype.name\n          );\n          for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n            let extendee = _values[a];\n            builder.addCase(extendee.id, stmts);\n          }\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, nativeSizeType); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toNativeType());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toNativeType());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      [ NativeType.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef, type: Type): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef, type: Type): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** The type of the new expression. */\n    newType: Type,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** The type of the old expression. */\n    oldType: Type,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr, oldType),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType), newType)\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType), oldType)\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChildAt(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr, type), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType()),\n                local.type\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType()),\n          local.type\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          let returnType = this.currentType;\n          if (returnType.isManaged) {\n            if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i], instance.declaration));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!instance.is(CommonFlags.MODULE_IMPORT)) {\n          let original = instance;\n          instance = this.ensureVarargsStub(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          // We know the last operand is optional and omitted, so inject setting\n          // ~argumentsLength into that operand, which is always safe.\n          let lastOperand = operands[maxOperands - 1];\n          assert(!(getSideEffects(lastOperand) & SideEffects.WritesGlobal));\n          let lastOperandType = parameterTypes[maxArguments - 1];\n          operands[maxOperands - 1] = module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            lastOperand\n          ], lastOperandType.toNativeType());\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr, returnType);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureArgumentsLength();\n          return expr;\n        }\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isAccessOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, reportNode, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    reportNode: Node,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i], reportNode));\n      }\n    }\n\n    if (this.options.isWasm64) {\n      indexArg = module.unary(UnaryOp.WrapI64, indexArg);\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    this.ensureArgumentsLength();\n    var nativeSizeType = this.options.nativeSizeType;\n    if (getSideEffects(indexArg) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(indexArg));\n      indexArg = module.block(null, [\n        module.local_set(temp.index, indexArg),\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      indexArg = module.block(null, [\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        indexArg\n      ], nativeSizeType);\n    }\n    var expr = module.call_indirect(\n      nativeSizeType == NativeType.I64\n        ? module.unary(UnaryOp.WrapI64,\n            module.load(8, false, indexArg, NativeType.I64)\n          )\n        : module.load(4, false, indexArg, NativeType.I32),\n      operands,\n      signature.nativeParams,\n      signature.nativeResults\n    );\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      let classReference = targetType.getClassOrWrapper(this.program);\n      if (classReference) {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (indexedGet) {\n          let thisType = assert(indexedGet.signature.thisType);\n          let thisArg = this.compileExpression(targetExpression, thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!isUnchecked && this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n              expression.range\n            );\n          }\n          return this.compileCallDirect(indexedGet, [\n            expression.elementExpression\n          ], expression, thisArg, constraints);\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = uniqueMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var offset = this.ensureRuntimeFunction(instance); // reports\n    return this.options.isWasm64\n      ? this.module.i64(i64_low(offset), i64_high(offset))\n      : this.module.i32(i64_low(offset));\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.isReference) {\n          let classReference = contextualType.getClass();\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.getSignature();\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          return this.makeZero(contextualType, expression);\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        let thisType = actualFunction.signature.thisType;\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n          this.currentType = this.options.usizeType;\n          return module.unreachable();\n        }\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR) && !(constraints & Constraints.IS_THIS)) {\n          let parent = actualFunction.parent;\n          assert(parent.kind == ElementKind.CLASS);\n          this.checkFieldInitialization(<Class>parent, expression);\n        }\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n        flow.set(FlowFlags.ACCESSES_THIS);\n        this.currentType = thisType;\n        return module.local_get(thisLocal.index, thisType.toNativeType());\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.getClass());\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (this.pendingElements.has(local)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            local.internalName\n          );\n          this.currentType = localType;\n          return module.unreachable();\n        }\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.isNullableReference && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"Closures\"\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          uniqueMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.isExternalReference) {\n          this.currentType = Type.funcref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      uniqueMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <value> - must be exact\n    if (expectedType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <value> instanceof <nonValue> - always false\n    if (actualType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.isNullableReference && !expectedType.isNullableReference) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType, expression.expression)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.getClass();\n    if (classReference) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.isNullableReference) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType, expression.expression)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      case LiteralKind.REGEXP: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Regular expressions\"\n        );\n        this.currentType = contextualType;\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    let contextualClass = contextualType.getClass();\n    if (contextualClass !== null && contextualClass.extends(program.staticArrayPrototype)) {\n      return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(<Expression>elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let totalOverhead = program.totalOverhead;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(totalOverhead));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(totalOverhead));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __newArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.newArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr, arrayType);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.newArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression),\n          arrayType\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    var arrayInstance = assert(contextualType.getClass());\n    var arrayType = arrayInstance.type;\n    var typeArguments = assert(arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype));\n    var elementType = typeArguments[0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __newBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.newBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression),\n          program.arrayBufferInstance.type\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.newBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression),\n          program.arrayBufferInstance.type\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.getClass();\n    if (!classReference) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = isManaged\n      ? flow.getAutoreleaseLocal(classType)\n      : flow.getTempLocal(classType);\n    var nativeClassType = classType.toNativeType();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member: DeclaredElement;\n      if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n      if (fieldType.isManaged && !this.skippedAutoreleases.has(expr)) {\n        expr = this.makeRetain(expr, fieldType);\n      }\n      exprs.push(\n        module.store( // TODO: handle setters as well\n          fieldType.byteSize,\n          module.local_get(tempLocal.index, nativeClassType),\n          expr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        )\n      );\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by generated ctor\n      }\n\n      if (fieldType.isReference) {\n        if (!fieldType.isNullableReference) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.store( // TODO: handle setters as well\n              fieldType.byteSize,\n              module.local_get(tempLocal.index, nativeClassType),\n              this.makeZero(fieldType, expression),\n              fieldType.toNativeType(),\n              fieldInstance.memoryOffset\n            )\n          );\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // generate the default constructor\n    var ctor = this.ensureConstructor(classReference, expression);\n    // note that this is not checking field initialization within the ctor, but\n    // instead checks conditions above with provided fields taken into account.\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(ctor, [], Constraints.WILL_RETAIN, expression)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, nativeClassType)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, nativeClassType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        uniqueMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        uniqueMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var ctor = this.ensureConstructor(classInstance, expression);\n    if (!ctor.hasDecorator(DecoratorFlags.INLINE)) {\n      // Inlined ctors haven't been compiled yet and are checked upon inline\n      // compilation of their body instead.\n      this.checkFieldInitialization(classInstance, expression);\n    }\n    return this.compileInstantiate(ctor, expression.args, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(\n    /** Class wanting a constructor. */\n    classInstance: Class,\n    /** Report node. */\n    reportNode: Node\n  ): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // shortcut if already compiled\n      if (instance.is(CommonFlags.COMPILED)) return instance;\n      // do not attempt to compile if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n    } else {\n      // clone base constructor if a derived class. note that we cannot just\n      // call the base ctor since the derived class may have additional fields.\n      let baseClass = classInstance.base;\n      let contextualTypeArguments = uniqueMap(classInstance.contextualTypeArguments);\n      if (baseClass) {\n        let baseCtor = this.ensureConstructor(baseClass, reportNode);\n        this.checkFieldInitialization(baseClass, reportNode);\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance,\n            // declaration is important, i.e. to access optional parameter initializers\n            (<FunctionDeclaration>baseCtor.declaration).clone()\n          ),\n          null,\n          baseCtor.signature,\n          contextualTypeArguments\n        );\n\n      // otherwise make a default constructor\n      } else {\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance, // bound\n            this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n              CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n            )\n          ),\n          null,\n          new Signature(this.program, null, classInstance.type, classInstance.type),\n          contextualTypeArguments\n        );\n      }\n\n      instance.set(CommonFlags.COMPILED);\n      instance.prototype.setResolvedInstance(\"\", instance);\n      if (classInstance.is(CommonFlags.MODULE_EXPORT)) {\n        instance.set(CommonFlags.MODULE_EXPORT);\n      }\n      classInstance.constructorInstance = instance;\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n\n      // generate body\n      let signature = instance.signature;\n      let module = this.module;\n      let nativeSizeType = this.options.nativeSizeType;\n      let stmts = new Array<ExpressionRef>();\n\n      // {\n      //   if (!this) this = <ALLOC>\n      //   IF_DERIVED: this = super(this, ...args)\n      //   this.a = X\n      //   this.b = Y\n      //   return this\n      // }\n      let allocExpr = this.makeAllocation(classInstance);\n      let classType = classInstance.type;\n      if (classType.isManaged) allocExpr = this.makeRetain(allocExpr, classType);\n      stmts.push(\n        module.if(\n          module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n            module.local_get(0, nativeSizeType)\n          ),\n          module.local_set(0, allocExpr)\n        )\n      );\n      if (baseClass) {\n        let parameterTypes = signature.parameterTypes;\n        let numParameters = parameterTypes.length;\n        let operands = new Array<ExpressionRef>(1 + numParameters);\n        operands[0] = module.local_get(0, nativeSizeType);\n        for (let i = 1; i <= numParameters; ++i) {\n          operands[i] = module.local_get(i, parameterTypes[i - 1].toNativeType());\n        }\n        stmts.push(\n          module.local_set(0,\n            this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n          )\n        );\n      }\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n      let body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n      flow.freeScopedLocals();\n      this.currentFlow = previousFlow;\n\n      // make the function\n      let locals = instance.localsByIndex;\n      let varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n      let numOperands = 1 + signature.parameterTypes.length;\n      let numLocals = locals.length;\n      if (numLocals > numOperands) {\n        for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n      }\n      let funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n      instance.finalize(module, funcRef);\n    }\n\n    return instance;\n  }\n\n  /** Checks that all class fields have been initialized. */\n  checkFieldInitialization(classInstance: Class, relatedNode: Node | null = null): void {\n    if (classInstance.didCheckFieldInitialization) return;\n    classInstance.didCheckFieldInitialization = true;\n    var ctor = assert(classInstance.constructorInstance);\n    this.checkFieldInitializationInFlow(classInstance, ctor.flow, relatedNode);\n  }\n\n  /** Checks that all class fields have been initialized in the specified flow. */\n  checkFieldInitializationInFlow(classInstance: Class, flow: Flow, relatedNode: Node | null = null): void {\n    var members = classInstance.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let element = _values[i];\n        if (element.kind == ElementKind.FIELD && element.parent == classInstance) {\n          let field = <Field>element;\n          if (!field.initializerNode && !flow.isThisFieldFlag(field, FieldFlags.INITIALIZED)) {\n            if (!field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n              if (relatedNode) {\n                this.errorRelated(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  relatedNode.range,\n                  field.internalName\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  field.internalName\n                );\n              }\n            }\n          } else if (field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n            if (field.type.isReference) {\n              this.warning( // involves a runtime check\n                DiagnosticCode.Property_0_is_always_assigned_before_being_used,\n                field.identifierNode.range,\n                field.internalName\n              );\n            } else {\n              this.pedantic( // is a nop anyway\n                DiagnosticCode.Unnecessary_definite_assignment,\n                field.identifierNode.range\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  compileInstantiate(\n    /** Constructor to call. */\n    ctorInstance: Function,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(ctorInstance.is(CommonFlags.CONSTRUCTOR));\n    var parent = ctorInstance.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    var classInstance = <Class>parent;\n    if (classInstance.type.isUnmanaged || ctorInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctorInstance,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType, reportNode),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let thisType = this.currentType;\n        if (\n          flow.actualFunction.is(CommonFlags.CONSTRUCTOR) &&\n          thisExpression.kind == NodeKind.THIS &&\n          !flow.isThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED) &&\n          !fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED)\n        ) {\n          this.errorRelated(\n            DiagnosticCode.Property_0_is_used_before_being_assigned,\n            expression.range,\n            fieldInstance.identifierNode.range,\n            fieldInstance.internalName\n          );\n        }\n        if (thisType.isNullableReference) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        let ret = module.load(\n          fieldType.byteSize,\n          fieldType.isSignedIntegerValue,\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n        if (fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED) && fieldType.isReference && !fieldType.isNullableReference) {\n          ret = this.makeRuntimeNonNullCheck(ret, fieldType, expression);\n        }\n        return ret;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n        if (!functionInstance) return module.unreachable();\n        if (!this.compileFunction(functionInstance)) return module.unreachable();\n        this.currentType = functionInstance.type;\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType,\n      expression.condition\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(ifThenExpr, ifThenType, commonType, false, ifThen);\n    ifThenType = commonType;\n    ifElseExpr = this.convertExpression(ifElseExpr, ifElseType, commonType, false, ifElse);\n    ifElseType = commonType;\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (isInstance) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PLUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MINUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType, expression.operand),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          // fall back to compare by value\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType, expression.operand));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.isFloatValue\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        expr = this.convertExpression(expr, this.currentType, this.currentType.intType, false, expression.operand);\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, operand);\n            if (type.isReference) {\n              let signatureReference = type.getSignature();\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.getClass();\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"externref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isNumericValue) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n      case TypeKind.EXNREF: {\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode)\n            && this.checkFeatureEnabled(Feature.EXCEPTION_HANDLING, reportNode);\n      }\n      case TypeKind.ANYREF: {\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode)\n            && this.checkFeatureEnabled(Feature.GC, reportNode);\n      }\n    }\n    let classReference = type.getClass();\n    if (classReference) {\n      do {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    } else {\n      let signatureReference = type.getSignature();\n      if (signatureReference) {\n        let thisType = signatureReference.thisType;\n        if (thisType) {\n          if (!this.checkTypeSupported(thisType, reportNode)) {\n            return false;\n          }\n        }\n        let parameterTypes = signatureReference.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n          if (!this.checkTypeSupported(parameterTypes[i], reportNode)) {\n            return false;\n          }\n        }\n        let returnType = signatureReference.returnType;\n        if (!this.checkTypeSupported(returnType, reportNode)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    var parameterNodes = reportNode.parameters;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      let parameterReportNode: Node;\n      if (parameterNodes.length > i) parameterReportNode = parameterNodes[i];\n      else parameterReportNode = reportNode;\n      if (!this.checkTypeSupported(parameterTypes[i], parameterReportNode)) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF:\n        return module.ref_null(type.toNativeType());\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u32>(x) & 0x7FFFFFFF) - 1 <= 0x7F800000 - 1\n        //\n        // and finally:\n        // (reinterpret<u32>(x) << 1) - (1 << 1) <= ((0x7F800000 - 1) << 1)\n        return module.binary(BinaryOp.LeU32,\n          module.binary(BinaryOp.SubI32,\n            module.binary(BinaryOp.ShlI32,\n              module.unary(UnaryOp.ReinterpretF32, expr),\n              module.i32(1)\n            ),\n            module.i32(2) // 1 << 1\n          ),\n          module.i32(0xFEFFFFFE) // (0x7F800000 - 1) << 1\n        );\n      }\n      case TypeKind.F64: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u64>(x) & 0x7FFFFFFFFFFFFFFF) - 1 <= 0x7FF0000000000000 - 1\n        //\n        // and finally:\n        // (reinterpret<u64>(x) << 1) - (1 << 1) <= ((0x7FF0000000000000 - 1) << 1)\n        return module.binary(BinaryOp.LeU64,\n          module.binary(BinaryOp.SubI64,\n            module.binary(BinaryOp.ShlI64,\n              module.unary(UnaryOp.ReinterpretF64, expr),\n              module.i64(1)\n            ),\n            module.i64(2) // 1 << 1\n          ),\n          module.i64(0xFFFFFFFE, 0xFFDFFFFF) // (0x7FF0000000000000 - 1) << 1\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF:{\n        return module.ref_is_null(expr);\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    if (classInstance.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let allocInstance = program.allocInstance;\n      this.compileFunction(allocInstance);\n      return module.call(allocInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset)\n      ], options.nativeSizeType);\n    } else {\n      let newInstance = program.newInstance;\n      this.compileFunction(newInstance);\n      return module.call(newInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset),\n        module.i32(classInstance.id)\n      ], options.nativeSizeType);\n    }\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr, fieldType);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr, fieldType);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType, fieldPrototype.declaration);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return this.module.unreachable();\n\n    var stringInstance = program.stringInstance;\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type, codeLocation);\n    }\n\n    return this.makeStaticAbort(messageArg, codeLocation);\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeStaticAbort(\n    /** Message argument of type string. May be zero. */\n    messageExpr: ExpressionRef,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var filenameExpr = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageExpr,\n          filenameExpr,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected null\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = type.nonNullableType;\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.isReference && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected upcast\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = toType;\n    return expr;\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.args;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n} from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate = includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(element.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(element.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    if (!isInterface) {\n      indent(sb, this.indentLevel);\n      sb.push(\"static wrap(ptr: usize): \");\n      sb.push(name);\n      sb.push(\";\\n\");\n    }\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.EXNREF: return \"exnref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = bigint;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = bigint;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = bigint;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = bigint;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = boolean | number;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented_0 = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Exported_generic_function_or_class_has_no_concrete_instances = 232,\n  Property_0_is_always_assigned_before_being_used = 233,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unnecessary_definite_assignment = 906,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  Variable_0_used_before_its_declaration = 2448,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned = 2564,\n  Property_0_is_used_before_being_assigned = 2565,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented: {0}\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 232: return \"Exported generic function or class has no concrete instances.\";\n    case 233: return \"Property '{0}' is always assigned before being used.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 906: return \"Unnecessary definite assignment.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2448: return \"Variable '{0}' used before its declaration.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2564: return \"Property '{0}' has no initializer and is not assigned in the constructor before 'this' is used or returned.\";\n    case 2565: return \"Property '{0}' is used before being assigned.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \"(\" +\n        source.lineAt(range.start).toString() +\n        \",\" +\n        source.columnAt().toString() +\n        \"+\" +\n        (range.end - range.start).toString() +\n        \")\"\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  DeclarationStatement,\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  IndexSignatureNode,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATURE: {\n        this.visitIndexSignature(<IndexSignatureNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string, singleQuoted: bool = false): void {\n    var sb = this.sb;\n    var off = 0;\n    var quote = singleQuoted ? \"'\" : \"\\\"\";\n    sb.push(quote);\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (!singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n    sb.push(quote);\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(node: Node): void {\n    this.visitNode(node);\n    var sb = this.sb;\n    if (\n      !sb.length ||                     // leading EmptyStatement\n      node.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      node.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var indexSignature = node.indexSignature;\n    var members = node.members;\n    var numMembers = members.length;\n    if (indexSignature !== null || numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      if (indexSignature) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(indexSignature);\n      }\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n    /* nop */\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members != null && members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignature(node: IndexSignatureNode): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.args;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL && !initializer) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global,\n  Field,\n  Class\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChildAt,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperandAt,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  uniqueMap\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  NONE = 0,\n  INITIALIZED = 1 << 0\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Creates the parent flow of the specified function. */\n  static createParent(parentFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    if (parentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    if (inlineFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  private constructor(\n    /** Function this flow belongs to. */\n    public parentFunction: Function\n  ) {\n    /* nop */\n  }\n\n  /** Parent flow. */\n  parent: Flow | null = null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags = FlowFlags.NONE;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null = null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null = null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[] = [];\n  /** Field flags on `this`. Constructors only. */\n  thisFieldFlags: Map<Field,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null = null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null = null;\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Gets the current return type. */\n  get returnType(): Type {\n    return this.actualFunction.signature.returnType;\n  }\n\n  /** Gets the current contextual type arguments. */\n  get contextualTypeArguments(): Map<string,Type> | null {\n    return this.actualFunction.contextualTypeArguments;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow(this.parentFunction);\n    branch.parent = this;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.localFlags = this.localFlags.slice();\n    if (this.actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let thisFieldFlags = assert(this.thisFieldFlags);\n      branch.thisFieldFlags = uniqueMap<Field,FieldFlags>(thisFieldFlags);\n    } else {\n      assert(!this.thisFieldFlags);\n    }\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toNativeType()) {\n      case <u32>NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>NativeType.Funcref: { temps = parentFunction.tempFuncrefs; break; }\n      case <u32>NativeType.Externref: { temps = parentFunction.tempExternrefs; break; }\n      case <u32>NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      case <u32>NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    local.resetTemporaryName();\n    switch (<u32>local.type.toNativeType()) {\n      case <u32>NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>NativeType.Funcref: {\n        let tempFuncrefs = parentFunction.tempFuncrefs;\n        if (tempFuncrefs) temps = tempFuncrefs;\n        else parentFunction.tempFuncrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Externref: {\n        let tempExternrefs = parentFunction.tempExternrefs;\n        if (tempExternrefs) temps = tempExternrefs;\n        else parentFunction.tempExternrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    scopedLocal.setTemporaryName(name);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped dummy local of the specified name. */\n  addScopedDummyLocal(name: string, type: Type): Local {\n    var scopedDummy = new Local(name, -1, type, this.parentFunction);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedDummy.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedDummy);\n    return scopedDummy;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else {\n      let existingLocal = scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees a single scoped local by its name. */\n  freeScopedDummyLocal(name: string): void {\n    var scopedLocals = assert(this.scopedLocals);\n    assert(scopedLocals.has(name));\n    let local = assert(scopedLocals.get(name));\n    assert(local.index == -1);\n    scopedLocals.delete(name);\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Initializes `this` field flags. */\n  initThisFieldFlags(): void {\n    var actualFunction = this.actualFunction;\n    assert(actualFunction.is(CommonFlags.CONSTRUCTOR));\n    var actualParent = actualFunction.parent;\n    assert(actualParent.kind == ElementKind.CLASS);\n    var actualClass = <Class>actualParent;\n    this.thisFieldFlags = new Map();\n    var members = actualClass.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = _values[i];\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          if (\n            // guaranteed by super\n            field.parent != actualClass ||\n            // has field initializer\n            field.initializerNode !== null ||\n            // is initialized as a ctor parameter\n            field.prototype.parameterIndex != -1 ||\n            // is safe to initialize with zero\n            field.type.isAny(TypeFlags.VALUE | TypeFlags.NULLABLE)\n          ) {\n            this.setThisFieldFlag(field, FieldFlags.INITIALIZED);\n          }\n        }\n      }\n    }\n  }\n\n  /** Tests if the specified `this` field has the specified flag or flags. */\n  isThisFieldFlag(field: Field, flag: FieldFlags): bool {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags != null && fieldFlags.has(field)) {\n      return (changetype<FieldFlags>(fieldFlags.get(field)) & flag) == flag;\n    }\n    return false;\n  }\n\n  /** Sets the specified flag or flags on the given `this` field. */\n  setThisFieldFlag(field: Field, flag: FieldFlags): void {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      assert(this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n      if (fieldFlags.has(field)) {\n        let flags = changetype<FieldFlags>(fieldFlags.get(field));\n        fieldFlags.set(field, flags | flag);\n      } else {\n        fieldFlags.set(field, flag);\n      }\n    } else {\n      assert(!this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n    }\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n    this.thisFieldFlags = other.thisFieldFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n\n    // field flags do not matter here since there's only INITIALIZED, which can\n    // only be set if it has been observed prior to entering the branch.\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n\n    // field flags (currently only INITIALIZED, so can simplify)\n    var leftFieldFlags = left.thisFieldFlags;\n    if (leftFieldFlags) {\n      let newFieldFlags = new Map<Field,FieldFlags>();\n      let rightFieldFlags = assert(right.thisFieldFlags);\n      for (let _keys = Map_keys(leftFieldFlags), i = 0, k = _keys.length; i < k; ++i) {\n        let key = _keys[i];\n        let leftFlags = changetype<FieldFlags>(leftFieldFlags.get(key));\n        if (\n          (leftFlags & FieldFlags.INITIALIZED) != 0 && rightFieldFlags.has(key) && \n          (changetype<FieldFlags>(rightFieldFlags.get(key)) & FieldFlags.INITIALIZED)\n        ) {\n          newFieldFlags.set(key, FieldFlags.INITIALIZED);\n        }\n      }\n      this.thisFieldFlags = newFieldFlags;\n    } else {\n      assert(!right.thisFieldFlags);\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.isShortIntegerValue) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.isNullableReference) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.isNullableReference) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperandAt(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.isShortIntegerValue) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.isSignedIntegerValue\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) &&\n                !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>NativeType.I32: { value = getConstValueI32(expr); break; }\n          case <u32>NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChildAt(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return toType.isShortIntegerValue && (\n    !fromType.isIntegerValue ||                                    // i.e. float to small int\n    fromType.size > toType.size ||                                 // larger int to small int\n    fromType.isSignedIntegerValue != toType.isSignedIntegerValue   // signedness mismatch\n  );\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n/** Garbage collection. */\nexport const FEATURE_GC = Feature.GC;\n/** Memory64. */\nexport const FEATURE_MEMORY64 = Feature.MEMORY64;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file, or `null` to indicate not found. */\n  text: string | null,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport type NativeType = usize;\nexport namespace NativeType {\n  export const None: NativeType = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: NativeType = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: NativeType = 2 /* _BinaryenTypeInt32 */;\n  export const I64: NativeType = 3 /* _BinaryenTypeInt64 */;\n  export const F32: NativeType = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: NativeType = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: NativeType = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: NativeType = 7 /* _BinaryenTypeFuncref */;\n  export const Externref: NativeType = 8 /* _BinaryenTypeExternref */;\n  export const Exnref: NativeType = 9 /* _BinaryenTypeExnref */;\n  export const Anyref: NativeType = 10 /* _BinaryenTypeAnyref */;\n  export const Auto: NativeType = -1 /* _BinaryenTypeAuto */;\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  GC = 1024 /* _BinaryenFeatureGC */,\n  Memory64 = 2048, // TODO: missing in Binaryen API\n  All = 4095 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  MemorySize = 20 /* _BinaryenMemorySizeId */,\n  MemoryGrow = 21 /* _BinaryenMemoryGrowId */,\n  Nop = 22 /* _BinaryenNopId */,\n  Unreachable = 23 /* _BinaryenUnreachableId */,\n  AtomicRMW = 24 /* _BinaryenAtomicRMWId */,\n  AtomicCmpxchg = 25 /* _BinaryenAtomicCmpxchgId */,\n  AtomicWait = 26 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 27 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 28 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 29 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 30 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 31 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 32 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 33 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 34 /* _BinaryenSIMDLoadId */,\n  // SIMDLoadStoreLane = 35,\n  MemoryInit = 36 /* _BinaryenMemoryInitId */,\n  DataDrop = 37 /* _BinaryenDataDropId */,\n  MemoryCopy = 38 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 39 /* _BinaryenMemoryFillId */,\n  Pop = 40 /* _BinaryenPopId */,\n  RefNull = 41 /* _BinaryenRefNullId */,\n  RefIsNull = 42 /* _BinaryenRefIsNullId */,\n  RefFunc = 43 /* _BinaryenRefFuncId */,\n  RefEq = 44 /* _BinaryenRefEqId */,\n  Try = 45 /* _BinaryenTryId */,\n  Throw = 46 /* _BinaryenThrowId */,\n  Rethrow = 47 /* _BinaryenRethrowId */,\n  BrOnExn = 48 /* _BinaryenBrOnExnId */,\n  TupleMake = 49 /* _BinaryenTupleMakeId */,\n  TupleExtract = 50 /* _BinaryenTupleExtractId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  AbsI8x16 = 67 /* __BinaryenAbsVecI8x16 */,\n  NegI8x16 = 68 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 69 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  BitmaskI8x16 = 71 /* __BinaryenBitmaskVecI8x16 */,\n  AbsI16x8 = 72 /* __BinaryenAbsVecI16x8 */,\n  // PopcntVecI8x16\n  NegI16x8 = 74 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 75 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 76 /* _BinaryenAllTrueVecI16x8 */,\n  BitmaskI16x8 = 77 /* _BinaryenBitmaskVecI16x8 */,\n  AbsI32x4 = 78 /* _BinaryenAbsVecI32x4 */,\n  NegI32x4 = 79 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 80 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 81 /* _BinaryenAllTrueVecI32x4 */,\n  BitmaskI32x4 = 82 /* _BinaryenBitmaskVecI32x4 */,\n  NegI64x2 = 83 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 84 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 85 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 86 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 87 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 88 /* _BinaryenSqrtVecF32x4 */,\n  CeilF32x4 = 89 /* _BinaryenCeilVecF32x4 */,\n  FloorF32x4 = 90 /* _BinaryenFloorVecF32x4 */,\n  TruncF32x4 = 90 /* BinaryenTruncVecF32x4 */,\n  NearestF32x4 = 91 /* BinaryenNearestVecF32x4 */,\n  AbsF64x2 = 93 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 94 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 95 /* _BinaryenSqrtVecF64x2 */,\n  CeilF64x2 = 96 /* _BinaryenCeilVecF64x2 */,\n  FloorF64x2 = 97 /* _BinaryenFloorVecF64x2 */,\n  TruncF64x2 = 97 /* BinaryenTruncVecF64x2 */,\n  NearestF64x2 = 98 /* BinaryenNearestVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 100 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 101 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 102 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 103 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 104 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 105 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 106 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 107 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 108 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 109 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 110 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 111 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 112 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 113 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 114 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 115 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrI32 = 11 /* _BinaryenShrSInt32 */,\n  ShrU32 = 12 /* _BinaryenShrUInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrI64 = 36 /* _BinaryenShrSInt64 */,\n  ShrU64 = 37 /* _BinaryenShrUInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  // Q15MulrSatSVecI16x8,\n  // ExtMulLowSVecI16x8,\n  // ExtMulHighSVecI16x8,\n  // ExtMulLowUVecI16x8,\n  // ExtMulHighUVecI16x8,\n  AddI32x4 = 151 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 152 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 153 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 154 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 155 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 156 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 157 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 158 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 163 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 164 /* _BinaryenSubVecI64x2 */,\n  // ExtMulLowSVecI64x2\n  // ExtMulHighSVecI64x2\n  // ExtMulLowUVecI64x2\n  // ExtMulHighUVecI64x2\n  AddF32x4 = 170 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 171 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 172 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 173 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 174 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 175 /* _BinaryenMaxVecF32x4 */,\n  PminF32x4 = 176 /* _BinaryenPMinVecF32x4 */,\n  PmaxF32x4 = 177 /* _BinaryenPMaxVecF32x4 */,\n  AddF64x2 = 178 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 179 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 180 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 181 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 182 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 183 /* _BinaryenMaxVecF64x2 */,\n  PminF64x2 = 184 /* _BinaryenPMinVecF64x2 */,\n  PmaxF64x2 = 185 /* _BinaryenPMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 186 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 187 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 188 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 189 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 190 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n  constructor(\n    /** Segment data. */\n    public buffer: Uint8Array,\n    /** Segment offset. */\n    public offset: i64\n  ) {}\n}\n\nexport class Module {\n  constructor(\n    /** Binaryen module reference. */\n    public ref: ModuleRef\n  ) {\n    this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n  }\n\n  private lit: usize;\n\n  static create(): Module {\n    return new Module(binaryen._BinaryenModuleCreate());\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length));\n    binaryen._free(changetype<usize>(cArr));\n    return module;\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) {\n      binaryen.__i32_store8(out + i, bytes[i]);\n    }\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(type: NativeType): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref, type);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  memory_size(): ExpressionRef {\n    return binaryen._BinaryenMemorySize(this.ref);\n  }\n\n  memory_grow(delta: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenMemoryGrow(this.ref, delta);\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        )\n      : binaryen._BinaryenCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(\n          this.ref, index, cArr, operands ? operands.length : 0, params, results\n        )\n      : binaryen._BinaryenCallIndirect(\n          this.ref, index, cArr, operands ? operands.length : 0, params, results\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // multi value (pseudo instructions)\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(\n      this.ref,\n      cStr,\n      params,\n      results,\n      cArr,\n      varTypes ? varTypes.length : 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(\n    result: NativeType,\n    paramTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(\n      this.ref, cStr1, cStr2, cStr3, attribute, params, results\n    );\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let segment = segments[i];\n      let buffer = segment.buffer;\n      let offset = segment.offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(\n      this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared\n    );\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) {\n      binaryen._free(segs[i]);\n    }\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(\n      this.ref, initial, maximum, cArr, numNames, offset\n    );\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getFastMath(): bool {\n    return binaryen._BinaryenGetFastMath();\n  }\n\n  setFastMath(on: bool): void {\n    binaryen._BinaryenSetFastMath(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  getAllowInliningFunctionsWithLoops(): bool {\n    return binaryen._BinaryenGetAllowInliningFunctionsWithLoops();\n  }\n\n  setAllowInliningFunctionsWithLoops(enabled: bool): void {\n    binaryen._BinaryenSetAllowInliningFunctionsWithLoops(enabled);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPass(pass: string, func: FunctionRef = 0): void {\n    var cStr = allocString(pass);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cStr, 1);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cStr, 1);\n    }\n    binaryen._free(cStr);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames - 1; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(optimizeLevel: i32, shrinkLevel: i32, debugInfo: bool = false, usesARC: bool = true): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    this.setOptimizeLevel(optimizeLevel);\n    this.setShrinkLevel(shrinkLevel);\n    this.setDebugInfo(debugInfo);\n    this.setFastMath(true);\n    this.clearPassArguments();\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel == 0) {\n      this.setAlwaysInlineMaxSize(12);\n      this.setFlexibleInlineMaxSize(70);\n      this.setOneCallerInlineMaxSize(200);\n      this.setAllowInliningFunctionsWithLoops(optimizeLevel >= 3);\n    } else {\n      this.setAlwaysInlineMaxSize(\n        optimizeLevel <= 1 || shrinkLevel >= 2\n          ? 2\n          : 6\n      );\n      this.setFlexibleInlineMaxSize(65);\n      this.setOneCallerInlineMaxSize(80);\n      this.setAllowInliningFunctionsWithLoops(false);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n        passes.push(\"ssa-nomerge\");\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"merge-blocks\");\n        passes.push(\"precompute-propagate\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"flatten\");\n        passes.push(\"vacuum\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"merge-locals\");\n\n        passes.push(\"code-folding\");\n        passes.push(\"flatten\");\n        passes.push(\"vacuum\");\n        passes.push(\"local-cse\");\n        passes.push(\"reorder-locals\");\n      }\n      // FIXME: see issue #1288\n      // if (usesARC) {\n      //   if (optimizeLevel < 3) {\n      //     passes.push(\"flatten\");\n      //   }\n      //   passes.push(\"post-assemblyscript\");\n      // }\n      passes.push(\"optimize-instructions\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"dce\");\n      }\n      passes.push(\"remove-unused-names\");\n      passes.push(\"remove-unused-brs\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"inlining\");\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      if (optimizeLevel >= 3 && shrinkLevel <= 1) {\n        passes.push(\"licm\");\n      }\n      passes.push(\"simplify-locals-nostructure\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (this.getLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (usesARC) {\n        // works best after inlining to cover most retains/releases\n        passes.push(\"post-assemblyscript-finalize\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"precompute-propagate\");\n\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"inlining\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"coalesce-locals\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-nonfunction-module-elements\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var binary = new BinaryModule(readBuffer(binaryPtr, binaryLen), readString(sourceMapPtr));\n    if (cStr) binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return binary;\n  }\n\n  toText(watFormat: bool = true): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an externref as it is opaque\n          case <u32>NativeType.Externref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(\n          this.ref, globalName, binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenUnary(\n          this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1\n        );\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenBinary(\n          this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2\n        );\n      }\n    }\n    return 0;\n  }\n\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(\n    expr: ExpressionRef,\n    flags: ExpressionRunnerFlags,\n    maxDepth: i32 = 50,\n    maxLoopIterations: i32 = 1\n  ): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChildAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChildAt(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperandAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperandAt(expr, index);\n}\n\nexport function getMemoryGrowDelta(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenMemoryGrowGetDelta(expr);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n  constructor(\n    /** Module this relooper belongs to. */\n    public module: Module,\n    /** Binaryen relooper reference. */\n    public ref: RelooperRef\n  ) {}\n\n  static create(module: Module): Relooper {\n    return new Relooper(module, binaryen._RelooperCreate(module.ref));\n  }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      labels[i] = \"case\" + i.toString() + labelPostfix;\n    }\n    entry[0] = module.local_set(localIndex, this.condition);\n    for (let i = 0; i < numValues; ++i) {\n      let index = indexes[i];\n      entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, NativeType.I32),\n          module.i32(values[i])\n        )\n      );\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = \"default\" + labelPostfix;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(labels[i], block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  DanglingPop = 2048 /* _BinaryenSideEffectDanglingPop */,\n  Any = 4095 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var len = u8s.length;\n  var ptr = binaryen._malloc(len);\n  for (let i = 0; i < len; ++i) {\n    binaryen.__i32_store8(ptr + i, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var len = i32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var len = u32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var len = ptrs.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0, k = len; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      len += 1;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else {\n      len += 4;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1) >>> 0;\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      assert(u < 0x200000, \"Invalid Unicode code point during allocString\");\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, len: i32): Uint8Array {\n  var ret = new Uint8Array(len);\n  for (let i = 0; i < len; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        assert(false, \"Invalid UTF8 sequence during readString\");\n      }\n    }\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >>> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  constructor(\n    /** WebAssembly binary. */\n    public output: Uint8Array,\n    /** Source map, if generated. */\n    public sourceMap: string | null\n  ) {}\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) {\n    return false;\n  }\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: {\n      return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    }\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return (\n          numChildren > 0 &&\n          needsExplicitUnreachable(binaryen._BinaryenBlockGetChildAt(expr, numChildren - 1))\n        );\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(\n  expr:  ExpressionRef,\n  data:  T,\n  visit: (expr: ExpressionRef, data: T) => void\n): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChildAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.MemorySize:\n      break;\n    case ExpressionId.MemoryGrow:\n      visit(binaryen._BinaryenMemoryGrowGetDelta(expr), data);\n      break;\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      for (let i: Index = 0, n = binaryen._BinaryenTupleMakeGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenTupleMakeGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureNode,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Represents a dependee. */\nclass Dependee {\n  constructor(\n    public source: Source,\n    public reportNode: Node\n  ) {}\n}\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source | null = null;\n  /** Map of dependees being depended upon by a source, by path. */\n  dependees: Map<string, Dependee> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file, or `null` to indicate not found. */\n    text: string | null,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(path);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // check if this is an error\n    if (text === null) {\n      let dependees = this.dependees;\n      let dependee: Dependee | null = null;\n      if (dependees.has(internalPath)) dependee = assert(dependees.get(internalPath));\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        dependee\n          ? dependee.reportNode.range\n          : null,\n        path\n      );\n      return;\n    }\n\n    // create the source element\n    var source = new Source(\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER,\n      normalizedPath,\n      text\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) {\n        statements.push(statement);\n      } else {\n        this.skipStatement(tn);\n      }\n    }\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart = 0;\n    var exportEnd = 0;\n    var defaultStart = 0;\n    var defaultEnd = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart = 0;\n    var declareEnd = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the path of the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var dependees = this.dependees;\n    if (dependees.has(dependent)) {\n      let dependee = assert(dependees.get(dependent));\n      return dependee.source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'null'\n    } else if (token == Token.NULL) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"null\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, false, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... | null\n    while (tn.skip(Token.BAR)) {\n      if (tn.skip(Token.NULL)) {\n        type.isNullable = true;\n      } else {\n        let notNullStart = tn.pos;\n        let notNull = this.parseType(tn, false, true);\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            notNull ? notNull.range : tn.range(notNullStart), \"null\"\n          );\n        }\n        return null;\n      }\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let paramStart = -1;\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          paramStart = tn.tokenPos;\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn, false);\n            if (!type) return null;\n            if (type.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                type.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>type;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = Node.createParameter(kind, name, Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = Node.createParameter(\n            firstParamKind,\n            firstParamNameNoType,\n            Node.createOmittedType(firstParamNameNoType.range.atEnd),\n            null,\n            firstParamNameNoType.range\n          );\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var declarations = new Array<VariableDeclaration>();\n    do {\n      let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!declaration) return null;\n      declarations.push(declaration);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITELY_ASSIGNED;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if (initializer !== null && (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      parentDecorators,\n      flags,\n      type,\n      initializer,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      decorators,\n      flags,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      parentFlags,\n      value,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>type;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>type;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        identifier,\n        type,\n        initializer,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      decorators,\n      flags,\n      typeParameters,\n      signature,\n      body,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n      // or at '(' of arrow function:\n      //  Parameters (':' Type)?\n      //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, this.parseParametersThis, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    explicitThis: NamedTypeNode | null,\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      explicitThis,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      signature,\n      body,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let type = this.parseType(tn);\n      if (!type) return null;\n      if (type.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          type.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>type;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        null,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(member instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      null,\n      null,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(declaration instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): Node | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface && decorators !== null) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart = 0;\n    var readonlyEnd = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart = 0;\n    var getEnd = 0;\n    var isSetter = false;\n    var setStart = 0;\n    var setEnd = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var isGetterOrSetter = isGetter || isSetter;\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!isGetterOrSetter && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignature(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetterOrSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.type,\n              null, // initialized via parameter\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, isSetter || name.kind == NodeKind.CONSTRUCTOR);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!isInterface && !(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT))) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        decorators,\n        flags,\n        typeParameters,\n        signature,\n        body,\n        tn.range(startPos, tn.pos)\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetterOrSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITELY_ASSIGNED;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if (\n        (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0 &&\n        (isInterface || initializer !== null || (flags & CommonFlags.STATIC) != 0)\n      ) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        decorators,\n        flags,\n        type,\n        initializer,\n        range\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignature(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureNode | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignature(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          decorators,\n          flags,\n          members,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    var currentSource = assert(this.currentSource);\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      if (path !== null) {\n        let internalPath = assert(ret.internalPath);\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(currentSource, path));\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, new Dependee(currentSource, path));\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(),\n          \"Mixed default and named imports\"\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(assert(this.currentSource), path));\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n      // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          decorators,\n          flags,\n          typeParameters,\n          type,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN) ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            null,\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = Node.createOmittedExpression(tn.range(tn.pos));\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                identifier.range\n              )\n            ],\n            null,\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN) ||\n      potentiallyGeneric &&\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// └─File                     File, analogous to Source in the AST\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef,\n  MemorySegment\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  writeI64,\n  writeI32AsI64,\n  writeI64AsI32\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n// Memory manager constants\nconst AL_SIZE = 16;\nconst AL_MASK = AL_SIZE - 1;\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    public options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(SourceKind.LIBRARY_ENTRY, LIBRARY_SUBST + \".wasm\", \"[native code]\");\n    this.nativeSource = nativeSource;\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n  }\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver!: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile!: File;\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  // Lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // Standard library\n\n  /** Gets the standard `ArrayBufferView` instance. */\n  get arrayBufferViewInstance(): Class {\n    var cached = this._arrayBufferViewInstance;\n    if (!cached) this._arrayBufferViewInstance = cached = this.requireClass(CommonNames.ArrayBufferView);\n    return cached;\n  }\n  private _arrayBufferViewInstance: Class | null = null;\n\n  /** Gets the standard `ArrayBuffer` instance. */\n  get arrayBufferInstance(): Class {\n    var cached = this._arrayBufferInstance;\n    if (!cached) this._arrayBufferInstance = cached = this.requireClass(CommonNames.ArrayBuffer);\n    return cached;\n  }\n  private _arrayBufferInstance: Class | null = null;\n\n  /** Gets the standard `Array` prototype. */\n  get arrayPrototype(): ClassPrototype {\n    var cached = this._arrayPrototype;\n    if (!cached) this._arrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _arrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `StaticArray` prototype. */\n  get staticArrayPrototype(): ClassPrototype {\n    var cached = this._staticArrayPrototype;\n    if (!cached) this._staticArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _staticArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Set` prototype. */\n  get setPrototype(): ClassPrototype {\n    var cached = this._setPrototype;\n    if (!cached) this._setPrototype = cached = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _setPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Map` prototype. */\n  get mapPrototype(): ClassPrototype {\n    var cached = this._mapPrototype;\n    if (!cached) this._mapPrototype = cached = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _mapPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Function` prototype. */\n  get functionPrototype(): ClassPrototype {\n    var cached = this._functionPrototype;\n    if (!cached) this._functionPrototype = cached = <ClassPrototype>this.require(CommonNames.Function, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _functionPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int8Array` prototype. */\n  get int8ArrayPrototype(): ClassPrototype {\n    var cached = this._int8ArrayPrototype;\n    if (!cached) this._int8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int16Array` prototype. */\n  get int16ArrayPrototype(): ClassPrototype {\n    var cached = this._int16ArrayPrototype;\n    if (!cached) this._int16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int32Array` prototype. */\n  get int32ArrayPrototype(): ClassPrototype {\n    var cached = this._int32ArrayPrototype;\n    if (!cached) this._int32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int64Array` prototype. */\n  get int64ArrayPrototype(): ClassPrototype {\n    var cached = this._int64ArrayPrototype;\n    if (!cached) this._int64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8Array` prototype. */\n  get uint8ArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ArrayPrototype;\n    if (!cached) this._uint8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8ClampedArray` prototype. */\n  get uint8ClampedArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ClampedArrayPrototype;\n    if (!cached) this._uint8ClampedArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ClampedArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint16Array` prototype. */\n  get uint16ArrayPrototype(): ClassPrototype {\n    var cached = this._uint16ArrayPrototype;\n    if (!cached) this._uint16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint32Array` prototype. */\n  get uint32ArrayPrototype(): ClassPrototype {\n    var cached = this._uint32ArrayPrototype;\n    if (!cached) this._uint32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint64Array` prototype. */\n  get uint64ArrayPrototype(): ClassPrototype {\n    var cached = this._uint64ArrayPrototype;\n    if (!cached) this._uint64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float32Array` prototype. */\n  get float32ArrayPrototype(): ClassPrototype {\n    var cached = this._float32ArrayPrototype;\n    if (!cached) this._float32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float64Array` prototype. */\n  get float64ArrayPrototype(): ClassPrototype {\n    var cached = this._float64ArrayPrototype;\n    if (!cached) this._float64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `String` instance. */\n  get stringInstance(): Class {\n    var cached = this._stringInstance;\n    if (!cached) this._stringInstance = cached = this.requireClass(CommonNames.String);\n    return cached;\n  }\n  private _stringInstance: Class | null = null;\n\n  /** Gets the standard `abort` instance, if not explicitly disabled. */\n  get abortInstance(): Function | null {\n    var prototype = this.lookup(CommonNames.abort);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  // Runtime interface\n\n  /** Gets the runtime `__alloc(size: usize): usize` instance. */\n  get allocInstance(): Function {\n    var cached = this._allocInstance;\n    if (!cached) this._allocInstance = cached = this.requireFunction(CommonNames.alloc);\n    return cached;\n  }\n  private _allocInstance: Function | null = null;\n\n  /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n  get reallocInstance(): Function {\n    var cached = this._reallocInstance;\n    if (!cached) this._reallocInstance = cached = this.requireFunction(CommonNames.realloc);\n    return cached;\n  }\n  private _reallocInstance: Function | null = null;\n\n  /** Gets the runtime `__free(ptr: usize): void` instance. */\n  get freeInstance(): Function {\n    var cached = this._freeInstance;\n    if (!cached) this._freeInstance = cached = this.requireFunction(CommonNames.free);\n    return cached;\n  }\n  private _freeInstance: Function | null = null;\n\n  /** Gets the runtime `__new(size: usize, id: u32): usize` instance. */\n  get newInstance(): Function {\n    var cached = this._newInstance;\n    if (!cached) this._newInstance = cached = this.requireFunction(CommonNames.new_);\n    return cached;\n  }\n  private _newInstance: Function | null = null;\n\n  /** Gets the runtime `__renew(ptr: usize, size: usize): usize` instance. */\n  get renewInstance(): Function {\n    var cached = this._renewInstance;\n    if (!cached) this._renewInstance = cached = this.requireFunction(CommonNames.renew);\n    return cached;\n  }\n  private _renewInstance: Function | null = null;\n\n  /** Gets the runtime `__retain(ptr: usize): usize` instance. */\n  get retainInstance(): Function {\n    var cached = this._retainInstance;\n    if (!cached) this._retainInstance = cached = this.requireFunction(CommonNames.retain);\n    return cached;\n  }\n  private _retainInstance: Function | null = null;\n\n  /** Gets the runtime `__release(ptr: usize): void` instance. */\n  get releaseInstance(): Function {\n    var cached = this._releaseInstance;\n    if (!cached) this._releaseInstance = cached = this.requireFunction(CommonNames.release);\n    return cached;\n  }\n  private _releaseInstance: Function | null = null;\n\n  /** Gets the runtime `__collect(): void` instance. */\n  get collectInstance(): Function {\n    var cached = this._collectInstance;\n    if (!cached) this._collectInstance = cached = this.requireFunction(CommonNames.collect);\n    return cached;\n  }\n  private _collectInstance: Function | null = null;\n\n  /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n  get visitInstance(): Function {\n    var cached = this._visitInstance;\n    if (!cached) this._visitInstance = cached = this.requireFunction(CommonNames.visit);\n    return cached;\n  }\n  private _visitInstance: Function | null = null;\n\n  /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n  get typeinfoInstance(): Function {\n    var cached = this._typeinfoInstance;\n    if (!cached) this._typeinfoInstance = cached = this.requireFunction(CommonNames.typeinfo);\n    return cached;\n  }\n  private _typeinfoInstance: Function | null = null;\n\n  /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n  get instanceofInstance(): Function {\n    var cached = this._instanceofInstance;\n    if (!cached) this._instanceofInstance = cached = this.requireFunction(CommonNames.instanceof_);\n    return cached;\n  }\n  private _instanceofInstance: Function | null = null;\n\n  /** Gets the runtime `__newBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n  get newBufferInstance(): Function {\n    var cached = this._newBufferInstance;\n    if (!cached) this._newBufferInstance = cached = this.requireFunction(CommonNames.newBuffer);\n    return cached;\n  }\n  private _newBufferInstance: Function | null = null;\n\n  /** Gets the runtime `__newArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n  get newArrayInstance(): Function {\n    var cached = this._newArrayInstance;\n    if (!cached) this._newArrayInstance = cached = this.requireFunction(CommonNames.newArray);\n    return cached;\n  }\n  private _newArrayInstance: Function | null = null;\n\n  /** Gets the runtime's internal `BLOCK` instance. */\n  get BLOCKInstance(): Class {\n    var cached = this._BLOCKInstance;\n    if (!cached) this._BLOCKInstance = cached = this.requireClass(CommonNames.BLOCK);\n    return cached;\n  }\n  private _BLOCKInstance: Class | null = null;\n\n  /** Gets the runtime's internal `OBJECT` instance. */\n  get OBJECTInstance(): Class {\n    var cached = this._OBJECTInstance;\n    if (!cached) this._OBJECTInstance = cached = this.requireClass(CommonNames.OBJECT);\n    return cached;\n  }\n  private _OBJECTInstance: Class | null = null;\n\n  // Utility\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Gets the overhead of a memory manager block. */\n  get blockOverhead(): i32 {\n    // BLOCK | data...\n    //       ^ 16b alignment\n    return this.BLOCKInstance.nextMemoryOffset;\n  }\n\n  /** Gets the overhead of a managed object, excl. block overhead, incl. alignment. */\n  get objectOverhead(): i32 {\n    // OBJECT+align | data...\n    //        └ 0 ┘ ^ 16b alignment\n    return (this.OBJECTInstance.nextMemoryOffset - this.blockOverhead + AL_MASK) & ~AL_MASK;\n  }\n\n  /** Gets the total overhead of a managed object, incl. block overhead. */\n  get totalOverhead(): i32 {\n    // BLOCK | OBJECT+align | data...\n    // └     = TOTAL      ┘ ^ 16b alignment\n    return this.blockOverhead + this.objectOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart(currentOffset: i32): i32 {\n    var blockOverhead = this.blockOverhead;\n    return ((currentOffset + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart64(currentOffset: i64): i64 {\n    var blockOverhead = i64_new(this.blockOverhead);\n    return i64_sub(i64_align(i64_add(currentOffset, blockOverhead), AL_SIZE), blockOverhead);\n  }\n\n  /** Computes the size of a memory manager block, excl. block overhead. */\n  computeBlockSize(payloadSize: i32, isManaged: bool): i32 {\n    // see: std/rt/tlsf.ts, computeSize; becomes mmInfo\n    if (isManaged) payloadSize += this.objectOverhead;\n    // we know that payload must be aligned, and that block sizes must be chosen\n    // so that blocks are adjacent with the next payload aligned. hence, block\n    // size is payloadSize rounded up to where the next block would start:\n    var blockSize = this.computeBlockStart(payloadSize);\n    // make sure that block size is valid according to TLSF requirements\n    var blockOverhead = this.blockOverhead;\n    var blockMinsize = ((3 * this.options.usizeType.byteSize + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n    if (blockSize < blockMinsize) blockSize = blockMinsize;\n    const blockMaxsize = 1 << 30; // 1 << (FL_BITS + SB_BITS - 1), exclusive\n    const tagsMask = 3;\n    if (blockSize >= blockMaxsize || (blockSize & tagsMask) != 0) {\n      throw new Error(\"invalid block size\");\n    }\n    return blockSize;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, null, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null, flags, null,\n      Node.createOmittedType(range),\n      range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, signature, null, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, [], range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.funcref, Type.funcref);\n    this.registerNativeType(CommonNames.externref, Type.externref);\n    this.registerNativeType(CommonNames.exnref, Type.exnref);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_GC, Type.bool,\n      i64_new(options.hasFeature(Feature.GC) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MEMORY64, Type.bool,\n      i64_new(options.hasFeature(Feature.MEMORY64) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports.\n    // note that imports may depend upon imports, so repeat until there's no more progress.\n    do {\n      let i = 0, madeProgress = false;\n      while (i < queuedImports.length) {\n        let queuedImport = queuedImports[i];\n        let localIdentifier = queuedImport.localIdentifier;\n        let foreignIdentifier = queuedImport.foreignIdentifier;\n        if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            foreignIdentifier.text,\n            queuedImport.foreignPath,\n            queuedImport.foreignPathAlt,\n            queuedExports\n          );\n          if (element) {\n            queuedImport.localFile.add(\n              localIdentifier.text,\n              element,\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n          }\n        } else { // i.e. import * as bar from \"./bar\"\n          let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n          if (foreignFile) {\n            let localFile = queuedImport.localFile;\n            let localName = localIdentifier.text;\n            localFile.add(\n              localName,\n              foreignFile.asAliasNamespace(\n                localName,\n                localFile,\n                localIdentifier\n              ),\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n            assert(false); // already reported by the parser not finding the file\n          }\n        }\n      }\n      if (!madeProgress) {\n        // report queued imports we were unable to resolve\n        for (let j = 0, l = queuedImports.length; j < l; ++j) {\n          let queuedImport = queuedImports[j];\n          let foreignIdentifier = queuedImport.foreignIdentifier;\n          if (foreignIdentifier) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n            );\n          }\n        }\n        break;\n      }\n    } while (true);\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookup(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.arrayBufferInstance.id == 0);\n    assert(this.stringInstance.id == 1);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) {\n      this.registerWrapperClass(Type.funcref, CommonNames.Funcref);\n      this.registerWrapperClass(Type.externref, CommonNames.Externref);\n      if (options.hasFeature(Feature.EXCEPTION_HANDLING)) {\n        this.registerWrapperClass(Type.exnref, CommonNames.Exnref);\n      }\n      if (options.hasFeature(Feature.GC)) {\n        this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n      }\n    }\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          thisPrototype.basePrototype = basePrototype;\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          thisPrototype.basePrototype = <InterfacePrototype>baseElement;\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) {\n          this.elementsByName.delete(alias);\n          continue;\n        }\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              } else {\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  thisMember.identifierNode.range,\n                  baseMember.identifierNode.range\n                );\n              }\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookup(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookup(name);\n    if (!element) throw new Error(\"Missing standard library component: \" + name);\n    if (element.kind != kind) throw Error(\"Invalid standard library component kind: \" + name);\n    return element;\n  }\n\n  /** Requires that a global variable is present and returns it. */\n  private requireGlobal(name: string): Global {\n    return <Global>this.require(name, ElementKind.GLOBAL);\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"Invalid standard library class: \" + name);\n    return resolved;\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"Invalid standard library function: \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the wrapper class of a non-class type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.isInternalReference && !wrapperClasses.has(type));\n    var element = assert(this.lookup(className));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = assert(this.resolver.resolveClass(<ClassPrototype>element, null));\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.isIntegerInclReference);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.isFloatValue);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n      ? assert(filesByName.get(foreignPath))\n      : filesByName.has(foreignPathAlt)\n        ? assert(filesByName.get(foreignPathAlt))\n        : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATURE: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.args;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.args)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary || declaration.is(CommonFlags.EXPORT)) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                declaration.name,\n                typeNode,\n                null,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // keep original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent!: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature, /* sameSize */ true);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction!: Function;\n  /** Array of `import * as X` alias namespaces of this file. */\n  aliasNamespaces: Array<Namespace> = new Array<Namespace>();\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookup(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n\n    // Also, add to the namespaces that capture our exports\n    for(let i = 0; i < this.aliasNamespaces.length; i++) {\n      let ns = this.aliasNamespaces[i];\n      ns.add(name, element);\n    }\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asAliasNamespace(\n    name: string, \n    parent: Element, \n    localIdentifier: IdentifierExpression\n  ): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    // NOTE: Some exports are still queued, and can't yet be added here,\n    // so we remember all the alias namespaces and add to them as well\n    // when adding an element to the file.\n    this.aliasNamespaces.push(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64 = i64_zero;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64 = 0;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.isIntegerInclReference);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.isFloatValue);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Original name of the (temporary) local. */\n  private originalName: string;\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.originalName = name;\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n\n  /** Sets the temporary name of this local. */\n  setTemporaryName(name: string): void {\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n\n  /** Resets the temporary name of this local. */\n  resetTemporaryName(): void {\n    var name = this.originalName;\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS ||\n           parent.kind == ElementKind.PROPERTY_PROTOTYPE && (\n             parent.parent.kind == ElementKind.CLASS ||\n             parent.parent.kind == ElementKind.INTERFACE\n           );\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow!: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n  /** Runtime memory segment, if created. */\n  memorySegment: MemorySegment | null = null;\n  /** Original function, if a stub. Otherwise `this`. */\n  original!: Function;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.original = this;\n    var program = prototype.program;\n    this.type = signature.type;\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          thisType,\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = this.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.createParent(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Gets the name of the parameter at the specified index. */\n  getParameterName(index: i32): string {\n    var parameters = (<FunctionDeclaration>this.declaration).signature.parameters;\n    return parameters.length > index\n      ? parameters[index].name.text\n      : getDefaultParameterName(index);\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.original.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.original = this.original;\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempFuncrefs: Local[] | null = null;\n  tempExternrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt() - 1 // source maps are 0-based\n        );\n      }\n    }\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        null, null,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n  /** Whether the field initialization check has already been performed. */\n  didCheckFieldInitialization: bool = false;\n  /** Runtime visitor function reference. */\n  visitRef: FunctionRef = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    type.classReference = this;\n    this.setType(type);\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads != null && overloads.has(kind)) {\n        return assert(overloads.get(kind));\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Creates a buffer suitable to hold a runtime instance of this class. */\n  createBuffer(overhead: i32 = 0): Uint8Array {\n    var program = this.program;\n    var payloadSize = this.nextMemoryOffset + overhead;\n    var blockSize = program.computeBlockSize(payloadSize, true); // excl. overhead\n    var buffer = new Uint8Array(program.blockOverhead + blockSize);\n    var OBJECT = program.OBJECTInstance;\n    OBJECT.writeField(\"mmInfo\", blockSize, buffer, 0);\n    OBJECT.writeField(\"gcInfo\", 1, buffer, 0); // RC = 1\n    OBJECT.writeField(\"gcInfo2\", 0, buffer, 0);\n    OBJECT.writeField(\"rtId\", this.id, buffer, 0);\n    OBJECT.writeField(\"rtSize\", payloadSize, buffer, 0);\n    return buffer;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32 = this.program.totalOverhead): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      let typeKind = fieldInstance.type.kind;\n      switch (typeKind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          assert(!i64_is(value));\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          assert(!i64_is(value));\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          assert(!i64_is(value));\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (this.program.options.isWasm64) {\n            if (i64_is(value)) {\n              writeI64(value, buffer, offset);\n            } else {\n              writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.USIZE);\n            }\n            return 8;\n          } else {\n            if (i64_is(value)) {\n              writeI64AsI32(value, buffer, offset, typeKind == TypeKind.USIZE);\n            } else {\n              writeI32(i32(value), buffer, offset);\n            }\n            return 4;\n          }\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          if (i64_is(value)) {\n            writeI64(value, buffer, offset);\n          } else {\n            writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.U64);\n          }\n          return 8;\n        }\n        case TypeKind.F32: {\n          assert(!i64_is(value));\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          assert(!i64_is(value));\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.float32ArrayPrototype) return Type.f32;\n        if (prototype == program.float64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.int8ArrayPrototype) return Type.i8;\n        if (prototype == program.int16ArrayPrototype) return Type.i16;\n        if (prototype == program.int32ArrayPrototype) return Type.i32;\n        if (prototype == program.int64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.uint8ArrayPrototype) return Type.u8;\n        if (prototype == program.uint8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.uint16ArrayPrototype) return Type.u16;\n        if (prototype == program.uint32ArrayPrototype) return Type.u32;\n        if (prototype == program.uint64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.isReference) {\n            if ((current = fieldType.getClass()) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers !== null && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index];\n}\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  uniqueMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          uniqueMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = uniqueMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (type.isInternalReference) return type.asNullable();\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_cannot_be_nullable,\n            nameNode.range, nameNode.identifier.text\n          );\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.getClassOrWrapper(this.program);\n    if (classReference) {\n      let overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n      if (overload) return overload.signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.getSignature();\n    if (signatureReference) return signatureReference.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_has_no_call_signatures,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = uniqueMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.args;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, uniqueMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.getClassOrWrapper(this.program);\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    let classReference = type.getClassOrWrapper(this.program);\n    if (classReference) return classReference;\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.getClass();\n        if (classReference) {\n          return classReference.type.asNullable();\n        } else {\n          let signatureReference = ctxType.getSignature();\n          if (signatureReference) {\n            return signatureReference.type.asNullable();\n          } else if (ctxType.isExternalReference) {\n            return ctxType; // TODO: nullable?\n          }\n        }\n        return this.program.options.usizeType;\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, uniqueMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, variableLikeElement.type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, returnType.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // Function with shadow type, i.e. function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        } else if (!target.is(CommonFlags.GENERIC)) {\n          // Inherit from 'Function' if not overridden, i.e. fn.call\n          let members = target.members;\n          if (!members || !members.has(propertyName)) {\n            let functionInstance = this.resolveFunction(<FunctionPrototype>target, null, uniqueMap<string,Type>(), ReportMode.SWALLOW);\n            if (functionInstance) {\n              let wrapper = functionInstance.type.getClassOrWrapper(this.program);\n              if (wrapper) target = wrapper;\n            }\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            let member = assert(members.get(propertyName));\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    let classReference = targetType.getClassOrWrapper(this.program);\n    if (classReference) {\n      do {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (ctxType.isValue) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          node.range,\n          \"Const assertion\"\n        );\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is common type of LHS and RHS, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        return assert(intType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        return assert(fltType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.getClass();\n        if (classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.isInternalReference\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.args.length > 0\n        ) {\n          return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let varType = (<VariableLikeElement>target).type;\n        let varElement = this.getElementOfType(varType);\n        if (!varElement || varElement.kind != ElementKind.CLASS) {\n          break;\n        }\n        target = varElement;\n        // fall-through\n      }\n      case ElementKind.CLASS: {\n        let typeArguments = (<Class>target).getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          let signatureReference = assert(ftype.signatureReference);\n          return signatureReference.returnType;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    return assert(Type.bool.getClassOrWrapper(this.program));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      if (parameterType == Type.void) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      parameterTypes[i] = parameterType;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParamters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        uniqueMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          uniqueMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n              if (fieldType == Type.void) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldTypeNode.range\n                  );\n                }\n                break;\n              }\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n        if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base === instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface === instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  start: i32;\n  end: i32;\n  source!: Source;\n  debugInfoRef: usize = 0;\n\n  constructor(start: i32, end: i32) {\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    let range = new Range(\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n    range.source = a.source;\n    return range;\n  }\n\n  equals(other: Range): bool {\n    return this.source == other.source && this.start == other.start && this.end == other.end;\n  }\n\n  get atStart(): Range {\n    let range = new Range(this.start, this.start);\n    range.source = this.source;\n    return range;\n  }\n\n  get atEnd(): Range {\n    let range = new Range(this.end, this.end);\n    range.source = this.source;\n    return range;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n    this.source = source;\n\n    var text = source.text;\n    var end = text.length;\n    var pos = 0;\n    // skip bom\n    if (\n      pos < end &&\n      text.charCodeAt(pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++pos;\n    }\n\n    // skip shebang\n    if (\n      pos + 1 < end &&\n      text.charCodeAt(pos) == CharCode.HASH &&\n      text.charCodeAt(pos + 1) == CharCode.EXCLAMATION\n    ) {\n      pos += 2;\n      while (\n        pos < end &&\n        text.charCodeAt(pos) != CharCode.LINEFEED\n      ) {\n        ++pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n    this.pos = pos;\n    this.end = end;\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    while (pos < end) {\n      this.tokenPos = pos;\n      let c = text.charCodeAt(pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++pos < end &&\n            text.charCodeAt(pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            ++pos;\n            if (\n              maxTokenLength > 2 && pos < end &&\n              text.charCodeAt(pos) == CharCode.EQUALS\n            ) {\n              this.pos = pos + 1;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            this.pos = pos;\n            return Token.EXCLAMATION_EQUALS;\n          }\n          this.pos = pos;\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          this.pos = pos;\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.PERCENT_EQUALS;\n          }\n          this.pos = pos;\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.AMPERSAND) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          this.pos = pos + 1;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          this.pos = pos + 1;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++pos;\n              if (\n                maxTokenLength > 2 && pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              this.pos = pos;\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          this.pos = pos;\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.PLUS) {\n              this.pos = pos + 1;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          this.pos = pos + 1;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.MINUS) {\n              this.pos = pos + 1;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (isDecimalDigit(chr)) {\n              this.pos = pos - 1;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(pos + 1) == CharCode.DOT\n            ) {\n              this.pos = pos + 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          this.pos = pos;\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = pos;\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                pos + 1 < end &&\n                text.charCodeAt(pos + 1) == CharCode.SLASH\n              ) {\n                ++pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++pos < end) {\n                if (text.charCodeAt(pos) == CharCode.LINEFEED) {\n                  ++pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++pos < end) {\n                c = text.charCodeAt(pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  pos + 1 < end &&\n                  text.charCodeAt(pos + 1) == CharCode.SLASH\n                ) {\n                  pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          this.pos = pos;\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          this.pos = pos + 1;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          this.pos = pos + 1;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              this.pos = pos;\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              this.pos = pos;\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              this.pos = pos + 1;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          this.pos = pos;\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++pos;\n              if (maxTokenLength > 2 && pos < end) {\n                chr = text.charCodeAt(pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++pos;\n                  if (\n                    maxTokenLength > 3 && pos < end &&\n                    text.charCodeAt(pos) == CharCode.EQUALS\n                  ) {\n                    this.pos = pos + 1;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  this.pos = pos;\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  this.pos = pos + 1;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              this.pos = pos;\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          this.pos = pos + 1;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          this.pos = pos + 1;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.CARET_EQUALS;\n          }\n          this.pos = pos;\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          this.pos = pos + 1;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.BAR) {\n              this.pos = pos + 1;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.BAR_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          this.pos = pos + 1;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          this.pos = pos + 1;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = pos;\n              while (\n                ++pos < end &&\n                isIdentifierPart(c = text.charCodeAt(pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                this.pos = pos;\n                return keywordToken;\n              }\n              this.pos = pos = posBefore;\n            }\n            this.pos = pos;\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++pos;\n            break;\n          }\n          let start = pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && pos < end &&\n            ((text.charCodeAt(pos)) & 0xFC00) == 0xDC00\n          ) ++pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, pos)\n          );\n          this.pos = pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    this.pos = pos;\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    if (token == Token.GREATERTHAN) {  // where parsing type arguments\n      maxCompoundLength = 1;\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) {\n      reusableState = null;\n      state.pos = this.pos;\n      state.token = this.token;\n      state.tokenPos = this.tokenPos;\n    } else {\n      state = new State(this.pos, this.token, this.tokenPos);\n    }\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    let range = new Range(start, end);\n    range.source = this.source;\n    return range;\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var start = pos;\n    while (\n      ++pos < end &&\n      isIdentifierPart(text.charCodeAt(pos))\n    );\n    this.pos = pos;\n    return text.substring(start, pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var quote = text.charCodeAt(pos++);\n    var start = pos;\n    var result = \"\";\n    while (true) {\n      if (pos >= end) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(pos);\n      if (c == quote) {\n        result += text.substring(start, pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, pos);\n        this.pos = pos; // save\n        result += this.readEscapeSequence();\n        pos = this.pos; // restore\n        start = pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, pos)\n        );\n        break;\n      }\n      ++pos;\n    }\n    this.pos = pos;\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 2 < this.end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos = pos + 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos = pos + 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos = pos + 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(pos + 1))) {\n        let start = pos;\n        this.pos = pos + 1;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    let pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var text = this.source.text;\n    var end = this.end;\n    var start = this.pos;\n    var sepCount = this.readDecimalFloatPartial(false);\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      sepCount += this.readDecimalFloatPartial();\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        sepCount += this.readDecimalFloatPartial();\n      }\n    }\n    let result = text.substring(start, this.pos);\n    if (sepCount) result = result.replaceAll(\"_\", \"\");\n    return parseFloat(result);\n  }\n\n  /** Reads past one section of a decimal float literal. Returns the number of separators encountered. */\n  private readDecimalFloatPartial(allowLeadingZeroSep: bool = true): u32 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var start = pos;\n    var end = this.end;\n    var sepEnd = start;\n    var sepCount = 0;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n\n      if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (!allowLeadingZeroSep && pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n        ++sepCount;\n      } else if (!isDecimalDigit(c)) {\n        break;\n      }\n      ++pos;\n    }\n\n    if (pos != start && sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n\n    this.pos = pos;\n    return sepCount;\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    while (pos < end) {\n      let c = text.charCodeAt(pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(pos - 1, pos)\n        );\n        this.pos = pos;\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(pos)\n      );\n      this.pos = pos;\n      return \"\";\n    }\n    this.pos = pos;\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  constructor(\n    /** Current position. */\n    public pos: i32,\n    /** Current token. */\n    public token: Token,\n    /** Current token's position. */\n    public tokenPos: i32\n  ) {}\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Function reference. */\n  FUNCREF,\n  /** External reference. */\n  EXTERNREF,\n  /** Exception reference. */\n  EXNREF,\n  /** Any reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a varying (in size) type. */\n  VARYING = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is an external type. */\n  EXTERNAL = 1 << 11,\n  /** Is a class. */\n  CLASS = 1 << 12,\n  /** Is a function. */\n  FUNCTION = 1 << 13\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  private _nonNullableType: Type | null = null;\n  /** Respective nullable type, if non-nullable. */\n  private _nullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    if (!(flags & TypeFlags.NULLABLE)) {\n      this._nonNullableType = this;\n    } else {\n      this._nullableType = this;\n    }\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this type represents a basic value. */\n  get isValue(): bool {\n    return this.is(TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer value. */\n  get isIntegerValue(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a small (< 32 bits) integer value. */\n  get isShortIntegerValue(): bool {\n    return this.is(TypeFlags.SHORT | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a long (> 32 bits) integer value. */\n  get isLongIntegerValue(): bool {\n    return this.is(TypeFlags.LONG | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a signed integer value. */\n  get isSignedIntegerValue(): bool {\n    return this.is(TypeFlags.SIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an unsigned integer value. */\n  get isUnsignedIntegerValue(): bool {\n    return this.is(TypeFlags.UNSIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a varying (in size) integer value. */\n  get isVaryingIntegerValue(): bool {\n    return this.is(TypeFlags.VARYING | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer, including references.  */\n  get isIntegerInclReference(): bool {\n    return this.is(TypeFlags.INTEGER);\n  }\n\n  /** Tests if this type represents a floating point value. */\n  get isFloatValue(): bool {\n    return this.is(TypeFlags.FLOAT | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents a numeric (integer or floating point) value. */\n  get isNumericValue(): bool {\n    return this.isIntegerValue || this.isFloatValue;\n  }\n\n  /** Tests if this type represents a boolean value. */\n  get isBooleanValue(): bool {\n    return this == Type.bool;\n  }\n\n  /** Tests if this type represents a vector value. */\n  get isVectorValue(): bool {\n    return this.is(TypeFlags.VECTOR | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents an internal or external reference. */\n  get isReference(): bool {\n    return this.is(TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a nullable internal or external reference. */\n  get isNullableReference(): bool {\n    return this.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an internal object. */\n  get isInternalReference(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an external object. */\n  get isExternalReference(): bool {\n    return this.is(TypeFlags.EXTERNAL | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a class. */\n  get isClass(): bool {\n    return this.isInternalReference\n      ? this.classReference !== null\n      : false;\n  }\n\n  /** Gets the underlying class of this type, if any. */\n  getClass(): Class | null {\n    return this.isInternalReference\n      ? this.classReference\n      : null;\n  }\n\n  /** Gets the underlying class or wrapper class of this type, if any. */\n  getClassOrWrapper(program: Program): Class | null {\n    let classReference = this.getClass();\n    if (classReference) {\n      // typical class\n      return classReference;\n    } else {\n      let signatureReference = this.getSignature();\n      if (signatureReference) {\n        // function wrapper\n        let type = signatureReference.type;\n        let wrapper = assert(program.resolver.resolveClass(program.functionPrototype, [ type ]));\n        wrapper.wrappedType = type;\n        return wrapper;\n      } else {\n        let wrapperClasses = program.wrapperClasses;\n        if (wrapperClasses.has(this)) {\n          // value wrapper\n          return assert(wrapperClasses.get(this));\n        }\n      }\n    }\n    return null;\n  }\n\n  /** Tests if this type represents a function. */\n  get isFunction(): bool {\n    return this.isInternalReference\n      ? this.signatureReference !== null\n      : false;\n  }\n\n  /** Gets the underlying function signature of this type, if any. */\n  getSignature(): Signature | null {\n    return this.isInternalReference\n      ? this.signatureReference\n      : null;\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.isInternalReference) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      return this.signatureReference !== null; // function references are managed\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Gets the corresponding non-nullable type. */\n  get nonNullableType(): Type {\n    if (this.isExternalReference) {\n      return this; // TODO\n    }\n    return assert(this._nonNullableType); // set either in ctor or asNullable\n  }\n\n  /** Gets the corresponding nullable type, if applicable. */\n  get nullableType(): Type | null {\n    return this._nullableType; // set either in ctor or asNullable\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.isInternalReference);\n    var nullableType = this._nullableType;\n    if (!nullableType) {\n      assert(!this.isNullableReference);\n      this._nullableType = nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      nullableType.classReference = this.classReference;         // either a class reference\n      nullableType.signatureReference = this.signatureReference; // or a function reference\n      nullableType._nonNullableType = this;\n    }\n    return nullableType;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.isReference) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.isNullableReference == other.isNullableReference\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.isReference) {\n      if (target.isReference) {\n        if (!this.isNullableReference || target.isNullableReference) {\n          if (currentClass = this.getClass()) {\n            if (targetClass = target.getClass()) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.getSignature()) {\n            if (targetFunction = target.getSignature()) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.isExternalReference && (this.kind == target.kind || target.kind == TypeKind.ANYREF)) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.isReference) {\n      if (this.isIntegerValue) {\n        if (target.isIntegerValue) {\n          if (\n            !signednessIsRelevant ||\n            this.isBooleanValue || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.isSignedIntegerValue == target.isSignedIntegerValue\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.isFloatValue) {\n        if (target.isFloatValue) {\n          return this.size <= target.size;\n        }\n      } else if (this.isVectorValue) {\n        if (target.isVectorValue) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.isReference) return this.isAssignableTo(target);\n    else if (target.isReference) return false;\n    // not dealing with references from here on\n    if (this.isIntegerValue) {\n      return target.isIntegerValue && target.size == this.size && (\n        !signednessIsRelevant ||\n        this.isSignedIntegerValue == target.isSignedIntegerValue\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    // special in that it allows integer references as well\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(validWat: bool = false): string {\n    const nullablePostfix = validWat\n      ? \"|null\"\n      : \" | null\";\n    if (this.isReference) {\n      let classReference = this.getClass();\n      if (classReference) {\n        return this.isNullableReference\n          ? classReference.internalName + nullablePostfix\n          : classReference.internalName;\n      } else {\n        let signatureReference = this.getSignature();\n        if (signatureReference) {\n          return this.isNullableReference\n            ? \"(\" + signatureReference.toString(validWat) + \")\" + nullablePostfix\n            : signatureReference.toString(validWat);\n        }\n      }\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.EXNREF: return \"exnref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.FUNCREF: return NativeType.Funcref;\n      case TypeKind.EXTERNREF: return NativeType.Externref;\n      case TypeKind.EXNREF: return NativeType.Exnref;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Function reference. */\n  static readonly funcref: Type = new Type(TypeKind.FUNCREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** External reference. */\n  static readonly externref: Type = new Type(TypeKind.EXTERNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Exception reference. */\n  static readonly exnref: Type = new Type(TypeKind.EXNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Any reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString(true);\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** Unique id representing this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    this.type = type;\n    type.signatureReference = this;\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    program.uniqueSignatures.push(this);\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType !== null) {\n      if (otherThisType === null || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      if (!thisParameterTypes[i].equals(otherParameterTypes[i])) return false;\n    }\n\n    // check return type\n    return this.returnType.equals(other.returnType);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature, requireSameSize: bool = false): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(validWat: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(validWat ? \"%28\" : \"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(validWat ? \"this:\" : \"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString(validWat));\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(validWat ? \"%2C\" : \", \");\n        if (i == restIndex) sb.push(\"...\");\n        sb.push(parameters[i].toString(validWat));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?\");\n      }\n    }\n    sb.push(validWat ? \"%29=>\" : \") => \");\n    sb.push(this.returnType.toString(validWat));\n    return sb.join(\"\");\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      cloneParameterTypes[i] = parameterTypes[i];\n    }\n    return new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n  }\n}\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8\n       | i32(buffer[offset + 2]) << 16\n       | i32(buffer[offset + 3]) << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Writes a 32-bit integer as a 64-bit integer to the specified buffer. */\nexport function writeI32AsI64(value: i32, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  writeI32(value, buffer, offset);\n  writeI32(unsigned || value >= 0 ? 0 : -1, buffer, offset + 4);\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Writes a 64-bit integer as a 32-bit integer to the specified buffer. */\nexport function writeI64AsI32(value: i64, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  assert(unsigned ? i64_is_u32(value) : i64_is_i32(value));\n  writeI32(i64_low(value), buffer, offset);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\n/** Makes a unique map. Typically used to track contextual type arguemnts. */\nexport function uniqueMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./vector\";\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Various vector utility.\n * @license Apache-2.0\n */\n\n/** v128 zero constant. */\nexport const v128_zero = new Uint8Array(16);\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9, // see: https://github.com/WebAssembly/multi-value\n  /** Garbage collection. */\n  GC = 1 << 10, // see: https://github.com/WebAssembly/gc\n  /** Memory64. */\n  MEMORY64 = 1 << 11 // see: https://github.com/WebAssembly/memory64\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n    case Feature.GC: return \"gc\";\n    case Feature.MEMORY64: return \"memory64\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** Portable. */\n  JS = 0,\n  /** WebAssembly with 32-bit pointers. */\n  WASM32 = 1,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64 = 2,\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function toText(watFormat = true) {\n  if (watFormat) {\n    // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n    // of unreachable statements not actually emitted by the compiler. Optimizing\n    // StackIR removes these again, but may also suppress useless code emitted by\n    // the compiler that's then no longer visible in tests. Both not ideal.\n    return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n  } else {\n    return binaryen.wrapModule(this.ref).emitText();\n  }\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function Map_keys(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function Map_values(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function Set_values(set) {\n  return Array.from(set.values());\n};\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function f32_as_i32(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function i32_as_f32(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function f64_as_i64(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function i64_as_f64(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero    = Long.ZERO;\nglobal.i64_one     = Long.ONE;\nglobal.i64_neg_one = Long.fromInt(-1);\n\nglobal.i64_is = function i64_is(value) {\n  return Long.isLong(value);\n};\n\nglobal.i64_new = function i64_new(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function i64_low(value) {\n  return value.low;\n};\n\nglobal.i64_high = function i64_high(value) {\n  return value.high;\n};\n\nglobal.i64_add = function i64_add(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function i64_sub(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function i64_mul(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_pow = function i64_pow(left, right) {\n  var rightLo = right.low;\n  var rightHi = right.high;\n  if (rightHi <= 0) {\n    if (rightHi < 0) {\n      if (left.eq(global.i64_neg_one)) {\n        return rightLo & 1 ? left : Long.ONE;\n      }\n      return left.eq(Long.ONE) ? left : Long.ZERO;\n    }\n    if (rightLo == 0) return Long.ONE;\n    if (rightLo == 1) return left;\n    if (rightLo == 2) return left.mul(left);\n  }\n  var result = Long.ONE;\n  while (rightLo | rightHi) {\n    if (rightLo & 1) result = result.mul(left);\n    right = right.shru(1);\n    left  = left.mul(left);\n    rightLo = right.low;\n    rightHi = right.high;\n  }\n  return result;\n};\n\nglobal.i64_div = function i64_div(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function i64_div_u(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function i64_rem(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function i64_rem_u(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function i64_and(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function i64_or(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function i64_xor(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function i64_shl(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function i64_shr(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function i64_shr_u(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function i64_not(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function i64_eq(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function i64_ne(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function i64_gt(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function i64_align(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function i64_is_i8(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function i64_is_i16(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function i64_is_i32(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function i64_is_u8(value) {\n  return value.high === 0 && (value.low >>> 0) <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function i64_is_u16(value) {\n  return value.high === 0 && (value.low >>> 0) <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function i64_is_u32(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function i64_is_bool(value) {\n  return (value.high | (value.low & ~1)) === 0;\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function i64_is_f32(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function i64_is_f64(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function i64_to_f32(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function i64_to_f64(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function i64_to_string(value, unsigned) {\n  return unsigned ? value.toUnsigned().toString() : value.toString();\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n  {\n    \"MIN_VALUE\": { value: -128, writable: false },\n    \"MAX_VALUE\": { value:  127, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n  {\n    \"MIN_VALUE\": { value: -32768, writable: false },\n    \"MAX_VALUE\": { value:  32767, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n  {\n    \"MIN_VALUE\": { value: -2147483648, writable: false },\n    \"MAX_VALUE\": { value:  2147483647, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n  {\n    \"MIN_VALUE\": { value:   0, writable: false },\n    \"MAX_VALUE\": { value: 255, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n  {\n    \"MIN_VALUE\": { value:     0, writable: false },\n    \"MAX_VALUE\": { value: 65535, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n  {\n    \"MIN_VALUE\": { value:          0, writable: false },\n    \"MAX_VALUE\": { value: 4294967295, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; },\n  {\n    \"MIN_VALUE\": { value: false, writable: false },\n    \"MAX_VALUE\": { value: true,  writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n  {\n    \"EPSILON\":   { value: 1.1920928955078125e-07, writable: false },\n    \"MIN_VALUE\": { value: 1.4012984643248170e-45, writable: false },\n    \"MAX_VALUE\": { value: 3.4028234663852886e+38, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  1.1754943508222875e-38, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; },\n  {\n    \"EPSILON\":   { value: 2.2204460492503131e-016, writable: false },\n    \"MIN_VALUE\": { value:                  5e-324, writable: false },\n    \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  2.2250738585072014e-308, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCharCode.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCharCode.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCodePoint.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCodePoint.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n};\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n};\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean(U64[1] >>> 31);\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() { /* nop */ };\n\nglobalScope[\"trace\"] = function(message, n) {\n  if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n  console.error(\"trace: \" + message);\n};\n\nObject.defineProperty(Int8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8ClampedArray, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8ClampedArray(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float64Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float64Array(buffer, byteOffset, length);\n  }\n});\n","module.exports = __WEBPACK_EXTERNAL_MODULE__911__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\n__webpack_require__(308);\nreturn __webpack_require__(780);\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"sourceRoot":""}